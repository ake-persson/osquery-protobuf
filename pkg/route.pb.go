// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/route.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The active route table for the host system.
type Route struct {
	// Destination IP address
	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination"`
	// Netmask length
	Netmask int32 `protobuf:"varint,2,opt,name=netmask,proto3" json:"netmask"`
	// Route gateway
	Gateway string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway"`
	// Route source
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source"`
	// Flags to describe route
	Flags int32 `protobuf:"varint,5,opt,name=flags,proto3" json:"flags"`
	// Route local interface
	Interface string `protobuf:"bytes,6,opt,name=interface,proto3" json:"interface"`
	// Maximum Transmission Unit for the route
	Mtu int32 `protobuf:"varint,7,opt,name=mtu,proto3" json:"mtu"`
	// Cost of route. Lowest is preferred
	Metric int32 `protobuf:"varint,8,opt,name=metric,proto3" json:"metric"`
	// Type of route
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type"`
	// Max hops expected
	Hopcount             int32    `protobuf:"varint,10,opt,name=hopcount,proto3" json:"hopcount"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_40c10b94547bcf88, []int{0}
}

func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *Route) GetNetmask() int32 {
	if m != nil {
		return m.Netmask
	}
	return 0
}

func (m *Route) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *Route) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Route) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Route) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *Route) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *Route) GetMetric() int32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *Route) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Route) GetHopcount() int32 {
	if m != nil {
		return m.Hopcount
	}
	return 0
}

func init() {
	proto.RegisterType((*Route)(nil), "schemas.Route")
}

func init() { proto.RegisterFile("pb/route.proto", fileDescriptor_40c10b94547bcf88) }

var fileDescriptor_40c10b94547bcf88 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbf, 0x4e, 0xf4, 0x30,
	0x10, 0xc4, 0x75, 0x7f, 0x72, 0xb9, 0xf8, 0x93, 0x3e, 0x21, 0x0b, 0xa1, 0x15, 0xa2, 0x88, 0xa8,
	0xae, 0xe1, 0x82, 0x40, 0x82, 0x82, 0x8e, 0x47, 0x48, 0x49, 0xe7, 0x98, 0x4d, 0x62, 0x05, 0xc7,
	0xc6, 0x5e, 0x0b, 0xa5, 0xe6, 0xc5, 0x51, 0x96, 0x1c, 0xd0, 0xed, 0x6f, 0x66, 0x67, 0x8a, 0x11,
	0xff, 0x7d, 0x53, 0x05, 0x97, 0x08, 0x8f, 0x3e, 0x38, 0x72, 0x32, 0x8f, 0xba, 0x47, 0xab, 0xe2,
	0xf5, 0xe7, 0x5a, 0x64, 0xf5, 0x6c, 0xc8, 0x52, 0xfc, 0x7b, 0xc5, 0x48, 0x66, 0x54, 0x64, 0xdc,
	0x08, 0xab, 0x72, 0x75, 0x28, 0xea, 0xbf, 0x92, 0x04, 0x91, 0x8f, 0x48, 0x56, 0xc5, 0x01, 0xd6,
	0xe5, 0xea, 0x90, 0xd5, 0x27, 0x9c, 0x9d, 0x4e, 0x11, 0x7e, 0xa8, 0x09, 0x36, 0x9c, 0x3b, 0xa1,
	0xbc, 0x10, 0xbb, 0xe8, 0x52, 0xd0, 0x08, 0x5b, 0x36, 0x16, 0x92, 0xe7, 0x22, 0x6b, 0xdf, 0x54,
	0x17, 0x21, 0xe3, 0xa6, 0x6f, 0x90, 0x57, 0xa2, 0x30, 0x23, 0x61, 0x68, 0x95, 0x46, 0xd8, 0x71,
	0xe0, 0x57, 0x90, 0x67, 0x62, 0x63, 0x29, 0x41, 0xce, 0x89, 0xf9, 0x9c, 0xdb, 0x2d, 0x52, 0x30,
	0x1a, 0xf6, 0x2c, 0x2e, 0x24, 0xa5, 0xd8, 0xd2, 0xe4, 0x11, 0x0a, 0xae, 0xe0, 0x5b, 0x5e, 0x8a,
	0x7d, 0xef, 0xbc, 0x76, 0x69, 0x24, 0x10, 0xfc, 0xfd, 0xc3, 0xcf, 0x77, 0x2f, 0xb7, 0x9d, 0xa1,
	0x3e, 0x35, 0x47, 0xed, 0x6c, 0x65, 0x8d, 0x1e, 0xd0, 0x3f, 0x3e, 0x54, 0x2e, 0xbe, 0x27, 0x0c,
	0xd3, 0x0d, 0x6f, 0xd6, 0xa4, 0xb6, 0xf2, 0x43, 0xf7, 0xb4, 0x2c, 0xd7, 0xec, 0x58, 0xbd, 0xff,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xbe, 0xf4, 0xd8, 0x5b, 0x01, 0x00, 0x00,
}
