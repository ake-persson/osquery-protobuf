// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/device_partition.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Use TSK to enumerate details about partitions on a disk device.
type DevicePartition struct {
	// Absolute file path to device node
	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device"`
	// A partition number or description
	Partition int32 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition"`
	//
	Label string `protobuf:"bytes,3,opt,name=label,proto3" json:"label"`
	//
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type"`
	//
	Offset int64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset"`
	// Byte size of each block
	BlocksSize int64 `protobuf:"varint,6,opt,name=blocks_size,json=blocksSize,proto3" json:"blocks_size"`
	// Number of blocks
	Blocks int64 `protobuf:"varint,7,opt,name=blocks,proto3" json:"blocks"`
	// Number of meta nodes
	Inodes int64 `protobuf:"varint,8,opt,name=inodes,proto3" json:"inodes"`
	//
	Flags                int32    `protobuf:"varint,9,opt,name=flags,proto3" json:"flags"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DevicePartition) Reset()         { *m = DevicePartition{} }
func (m *DevicePartition) String() string { return proto.CompactTextString(m) }
func (*DevicePartition) ProtoMessage()    {}
func (*DevicePartition) Descriptor() ([]byte, []int) {
	return fileDescriptor_d013f17b1415e543, []int{0}
}

func (m *DevicePartition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DevicePartition.Unmarshal(m, b)
}
func (m *DevicePartition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DevicePartition.Marshal(b, m, deterministic)
}
func (m *DevicePartition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicePartition.Merge(m, src)
}
func (m *DevicePartition) XXX_Size() int {
	return xxx_messageInfo_DevicePartition.Size(m)
}
func (m *DevicePartition) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicePartition.DiscardUnknown(m)
}

var xxx_messageInfo_DevicePartition proto.InternalMessageInfo

func (m *DevicePartition) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *DevicePartition) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *DevicePartition) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *DevicePartition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DevicePartition) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DevicePartition) GetBlocksSize() int64 {
	if m != nil {
		return m.BlocksSize
	}
	return 0
}

func (m *DevicePartition) GetBlocks() int64 {
	if m != nil {
		return m.Blocks
	}
	return 0
}

func (m *DevicePartition) GetInodes() int64 {
	if m != nil {
		return m.Inodes
	}
	return 0
}

func (m *DevicePartition) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func init() {
	proto.RegisterType((*DevicePartition)(nil), "schemas.DevicePartition")
}

func init() { proto.RegisterFile("pb/device_partition.proto", fileDescriptor_d013f17b1415e543) }

var fileDescriptor_d013f17b1415e543 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x89, 0xbb, 0xed, 0xda, 0x78, 0x10, 0x82, 0x48, 0x04, 0xc1, 0xe2, 0xa9, 0x17, 0xb7,
	0xa2, 0xa0, 0x07, 0x6f, 0xe2, 0x03, 0x48, 0xbd, 0x79, 0x59, 0x9a, 0xec, 0xb4, 0x1b, 0xda, 0x6e,
	0x62, 0x93, 0x0a, 0xdb, 0xa7, 0xf6, 0x11, 0xa4, 0x33, 0xd5, 0xbd, 0xe5, 0xfb, 0x32, 0xff, 0x30,
	0xfc, 0xfc, 0xca, 0xa9, 0x7c, 0x0b, 0xdf, 0x46, 0xc3, 0xc6, 0x95, 0x7d, 0x30, 0xc1, 0xd8, 0xfd,
	0xda, 0xf5, 0x36, 0x58, 0xb1, 0xf2, 0x7a, 0x07, 0x5d, 0xe9, 0x6f, 0x7f, 0x18, 0x3f, 0x7f, 0xc3,
	0x99, 0xf7, 0xbf, 0x11, 0x71, 0xc9, 0x63, 0x8a, 0x49, 0x96, 0xb2, 0x2c, 0x29, 0x66, 0x12, 0xd7,
	0x3c, 0xf9, 0xdf, 0x23, 0x4f, 0x52, 0x96, 0x45, 0xc5, 0x51, 0x88, 0x0b, 0x1e, 0xb5, 0xa5, 0x82,
	0x56, 0x2e, 0x30, 0x44, 0x20, 0x04, 0x5f, 0x86, 0x83, 0x03, 0xb9, 0x44, 0x89, 0xef, 0x69, 0xbf,
	0xad, 0x2a, 0x0f, 0x41, 0x46, 0x29, 0xcb, 0x16, 0xc5, 0x4c, 0xe2, 0x86, 0x9f, 0xa9, 0xd6, 0xea,
	0xc6, 0x6f, 0xbc, 0x19, 0x41, 0xc6, 0xf8, 0xc9, 0x49, 0x7d, 0x98, 0x11, 0x83, 0x44, 0x72, 0x45,
	0x41, 0xa2, 0xc9, 0x9b, 0xbd, 0xdd, 0x82, 0x97, 0xa7, 0xe4, 0x89, 0xa6, 0x93, 0xaa, 0xb6, 0xac,
	0xbd, 0x4c, 0xf0, 0x58, 0x82, 0xd7, 0x87, 0xcf, 0xfb, 0xda, 0x84, 0xdd, 0xa0, 0xd6, 0xda, 0x76,
	0x79, 0x67, 0x74, 0x03, 0xee, 0xf9, 0x29, 0xb7, 0xfe, 0x6b, 0x80, 0xfe, 0x70, 0x87, 0x05, 0xa9,
	0xa1, 0xca, 0x5d, 0x53, 0xbf, 0xcc, 0x35, 0xa9, 0x18, 0xed, 0xe3, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x0f, 0x25, 0x84, 0x21, 0x53, 0x01, 0x00, 0x00,
}
