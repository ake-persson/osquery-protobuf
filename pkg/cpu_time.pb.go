// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/cpu_time.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Displays information from /proc/stat file about the time the cpu cores spent in different parts of the system.
type CpuTime struct {
	// Name of the cpu (core)
	Core int32 `protobuf:"varint,1,opt,name=core,proto3" json:"core"`
	// Time spent in user mode
	User int64 `protobuf:"varint,2,opt,name=user,proto3" json:"user"`
	// Time spent in user mode with low priority (nice)
	Nice int64 `protobuf:"varint,3,opt,name=nice,proto3" json:"nice"`
	// Time spent in system mode
	System int64 `protobuf:"varint,4,opt,name=system,proto3" json:"system"`
	// Time spent in the idle task
	Idle int64 `protobuf:"varint,5,opt,name=idle,proto3" json:"idle"`
	// Time spent waiting for I/O to complete
	Iowait int64 `protobuf:"varint,6,opt,name=iowait,proto3" json:"iowait"`
	// Time spent servicing interrupts
	Irq int64 `protobuf:"varint,7,opt,name=irq,proto3" json:"irq"`
	// Time spent servicing softirqs
	Softirq int64 `protobuf:"varint,8,opt,name=softirq,proto3" json:"softirq"`
	// Time spent in other operating systems when running in a virtualized environment
	Steal int64 `protobuf:"varint,9,opt,name=steal,proto3" json:"steal"`
	// Time spent running a virtual CPU for a guest OS under the control of the Linux kernel
	Guest int64 `protobuf:"varint,10,opt,name=guest,proto3" json:"guest"`
	// Time spent running a niced guest
	GuestNice            int64    `protobuf:"varint,11,opt,name=guest_nice,json=guestNice,proto3" json:"guest_nice"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CpuTime) Reset()         { *m = CpuTime{} }
func (m *CpuTime) String() string { return proto.CompactTextString(m) }
func (*CpuTime) ProtoMessage()    {}
func (*CpuTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_1399e63baa36bc14, []int{0}
}

func (m *CpuTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CpuTime.Unmarshal(m, b)
}
func (m *CpuTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CpuTime.Marshal(b, m, deterministic)
}
func (m *CpuTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CpuTime.Merge(m, src)
}
func (m *CpuTime) XXX_Size() int {
	return xxx_messageInfo_CpuTime.Size(m)
}
func (m *CpuTime) XXX_DiscardUnknown() {
	xxx_messageInfo_CpuTime.DiscardUnknown(m)
}

var xxx_messageInfo_CpuTime proto.InternalMessageInfo

func (m *CpuTime) GetCore() int32 {
	if m != nil {
		return m.Core
	}
	return 0
}

func (m *CpuTime) GetUser() int64 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *CpuTime) GetNice() int64 {
	if m != nil {
		return m.Nice
	}
	return 0
}

func (m *CpuTime) GetSystem() int64 {
	if m != nil {
		return m.System
	}
	return 0
}

func (m *CpuTime) GetIdle() int64 {
	if m != nil {
		return m.Idle
	}
	return 0
}

func (m *CpuTime) GetIowait() int64 {
	if m != nil {
		return m.Iowait
	}
	return 0
}

func (m *CpuTime) GetIrq() int64 {
	if m != nil {
		return m.Irq
	}
	return 0
}

func (m *CpuTime) GetSoftirq() int64 {
	if m != nil {
		return m.Softirq
	}
	return 0
}

func (m *CpuTime) GetSteal() int64 {
	if m != nil {
		return m.Steal
	}
	return 0
}

func (m *CpuTime) GetGuest() int64 {
	if m != nil {
		return m.Guest
	}
	return 0
}

func (m *CpuTime) GetGuestNice() int64 {
	if m != nil {
		return m.GuestNice
	}
	return 0
}

func init() {
	proto.RegisterType((*CpuTime)(nil), "schemas.CpuTime")
}

func init() { proto.RegisterFile("pb/cpu_time.proto", fileDescriptor_1399e63baa36bc14) }

var fileDescriptor_1399e63baa36bc14 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0xd0, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x05, 0x60, 0xa5, 0x69, 0x12, 0x7a, 0x2c, 0x60, 0x21, 0x74, 0x0b, 0x52, 0xc5, 0xd4, 0x85,
	0x06, 0x81, 0x04, 0x03, 0x1b, 0xec, 0x0c, 0x15, 0x13, 0x4b, 0x95, 0x98, 0x6b, 0x7a, 0x6a, 0x8d,
	0xdd, 0xd8, 0x16, 0xea, 0xc6, 0x4f, 0x47, 0x3e, 0x97, 0xed, 0xbd, 0xcf, 0x6f, 0xb0, 0x0e, 0x2e,
	0x5d, 0xdf, 0x6a, 0x17, 0xd7, 0x81, 0x0d, 0x2d, 0xdd, 0x68, 0x83, 0x55, 0x8d, 0xd7, 0x5b, 0x32,
	0x9d, 0xbf, 0xfd, 0x9d, 0x40, 0xf3, 0xe6, 0xe2, 0x07, 0x1b, 0x52, 0x0a, 0xa6, 0xda, 0x8e, 0x84,
	0xc5, 0xbc, 0x58, 0x54, 0x2b, 0xc9, 0xc9, 0xa2, 0xa7, 0x11, 0x27, 0xf3, 0x62, 0x51, 0xae, 0x24,
	0x27, 0xfb, 0x66, 0x4d, 0x58, 0x66, 0x4b, 0x59, 0x5d, 0x43, 0xed, 0x8f, 0x3e, 0x90, 0xc1, 0xa9,
	0xe8, 0xa9, 0xa5, 0x2d, 0x7f, 0xed, 0x09, 0xab, 0xbc, 0x4d, 0x39, 0x6d, 0xd9, 0xfe, 0x74, 0x1c,
	0xb0, 0xce, 0xdb, 0xdc, 0xd4, 0x05, 0x94, 0x3c, 0x1e, 0xb0, 0x11, 0x4c, 0x51, 0x21, 0x34, 0xde,
	0x6e, 0x42, 0xd2, 0x33, 0xd1, 0xff, 0xaa, 0xae, 0xa0, 0xf2, 0x81, 0xba, 0x3d, 0xce, 0xc4, 0x73,
	0x49, 0x3a, 0x44, 0xf2, 0x01, 0x21, 0xab, 0x14, 0x75, 0x03, 0x20, 0x61, 0x2d, 0xbf, 0x3e, 0x97,
	0xa7, 0x99, 0xc8, 0x3b, 0x6b, 0x7a, 0x7d, 0xf8, 0xbc, 0x1f, 0x38, 0x6c, 0x63, 0xbf, 0xd4, 0xd6,
	0xb4, 0x86, 0xf5, 0x8e, 0xdc, 0xf3, 0x53, 0x6b, 0xfd, 0x21, 0xd2, 0x78, 0xbc, 0x93, 0x83, 0xf5,
	0x71, 0xd3, 0xba, 0xdd, 0xf0, 0x72, 0x3a, 0x5b, 0x5f, 0x8b, 0x3e, 0xfe, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x41, 0x14, 0xf8, 0xad, 0x5b, 0x01, 0x00, 0x00,
}
