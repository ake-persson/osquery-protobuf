// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/docker_container_process.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Docker container processes.
type DockerContainerProcess struct {
	// Container ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	// Process ID
	Pid int64 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid"`
	// The process path or shorthand argv[0]
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// Complete argv
	Cmdline string `protobuf:"bytes,4,opt,name=cmdline,proto3" json:"cmdline"`
	// Process state
	State string `protobuf:"bytes,5,opt,name=state,proto3" json:"state"`
	// User ID
	Uid int64 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid"`
	// Group ID
	Gid int64 `protobuf:"varint,7,opt,name=gid,proto3" json:"gid"`
	// Effective user ID
	Euid int64 `protobuf:"varint,8,opt,name=euid,proto3" json:"euid"`
	// Effective group ID
	Egid int64 `protobuf:"varint,9,opt,name=egid,proto3" json:"egid"`
	// Saved user ID
	Suid int64 `protobuf:"varint,10,opt,name=suid,proto3" json:"suid"`
	// Saved group ID
	Sgid int64 `protobuf:"varint,11,opt,name=sgid,proto3" json:"sgid"`
	// Bytes of unpagable memory used by process
	WiredSize int64 `protobuf:"varint,12,opt,name=wired_size,json=wiredSize,proto3" json:"wired_size"`
	// Bytes of private memory used by process
	ResidentSize int64 `protobuf:"varint,13,opt,name=resident_size,json=residentSize,proto3" json:"resident_size"`
	// Process parent's PID
	Parent int64 `protobuf:"varint,14,opt,name=parent,proto3" json:"parent"`
	// Process group
	Pgroup int64 `protobuf:"varint,15,opt,name=pgroup,proto3" json:"pgroup"`
	// Number of threads used by process
	Threads int32 `protobuf:"varint,16,opt,name=threads,proto3" json:"threads"`
	// Process nice level (-20 to 20
	Nice int32 `protobuf:"varint,17,opt,name=nice,proto3" json:"nice"`
	// User name
	User string `protobuf:"bytes,18,opt,name=user,proto3" json:"user"`
	// Cumulative CPU time. [DD-]HH:MM:SS format
	Time string `protobuf:"bytes,19,opt,name=time,proto3" json:"time"`
	// CPU utilization as percentage
	Cpu float64 `protobuf:"fixed64,20,opt,name=cpu,proto3" json:"cpu"`
	// Memory utilization as percentage
	Mem                  float64  `protobuf:"fixed64,21,opt,name=mem,proto3" json:"mem"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DockerContainerProcess) Reset()         { *m = DockerContainerProcess{} }
func (m *DockerContainerProcess) String() string { return proto.CompactTextString(m) }
func (*DockerContainerProcess) ProtoMessage()    {}
func (*DockerContainerProcess) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d973e46a7d649cb, []int{0}
}

func (m *DockerContainerProcess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DockerContainerProcess.Unmarshal(m, b)
}
func (m *DockerContainerProcess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DockerContainerProcess.Marshal(b, m, deterministic)
}
func (m *DockerContainerProcess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerContainerProcess.Merge(m, src)
}
func (m *DockerContainerProcess) XXX_Size() int {
	return xxx_messageInfo_DockerContainerProcess.Size(m)
}
func (m *DockerContainerProcess) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerContainerProcess.DiscardUnknown(m)
}

var xxx_messageInfo_DockerContainerProcess proto.InternalMessageInfo

func (m *DockerContainerProcess) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DockerContainerProcess) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *DockerContainerProcess) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DockerContainerProcess) GetCmdline() string {
	if m != nil {
		return m.Cmdline
	}
	return ""
}

func (m *DockerContainerProcess) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *DockerContainerProcess) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *DockerContainerProcess) GetGid() int64 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *DockerContainerProcess) GetEuid() int64 {
	if m != nil {
		return m.Euid
	}
	return 0
}

func (m *DockerContainerProcess) GetEgid() int64 {
	if m != nil {
		return m.Egid
	}
	return 0
}

func (m *DockerContainerProcess) GetSuid() int64 {
	if m != nil {
		return m.Suid
	}
	return 0
}

func (m *DockerContainerProcess) GetSgid() int64 {
	if m != nil {
		return m.Sgid
	}
	return 0
}

func (m *DockerContainerProcess) GetWiredSize() int64 {
	if m != nil {
		return m.WiredSize
	}
	return 0
}

func (m *DockerContainerProcess) GetResidentSize() int64 {
	if m != nil {
		return m.ResidentSize
	}
	return 0
}

func (m *DockerContainerProcess) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *DockerContainerProcess) GetPgroup() int64 {
	if m != nil {
		return m.Pgroup
	}
	return 0
}

func (m *DockerContainerProcess) GetThreads() int32 {
	if m != nil {
		return m.Threads
	}
	return 0
}

func (m *DockerContainerProcess) GetNice() int32 {
	if m != nil {
		return m.Nice
	}
	return 0
}

func (m *DockerContainerProcess) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *DockerContainerProcess) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *DockerContainerProcess) GetCpu() float64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *DockerContainerProcess) GetMem() float64 {
	if m != nil {
		return m.Mem
	}
	return 0
}

func init() {
	proto.RegisterType((*DockerContainerProcess)(nil), "schemas.DockerContainerProcess")
}

func init() { proto.RegisterFile("pb/docker_container_process.proto", fileDescriptor_5d973e46a7d649cb) }

var fileDescriptor_5d973e46a7d649cb = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x92, 0xbf, 0xee, 0xd3, 0x30,
	0x14, 0x85, 0x95, 0xe6, 0xd7, 0x96, 0x9a, 0xb6, 0x14, 0x53, 0xaa, 0xbb, 0x20, 0x05, 0x58, 0xb2,
	0xd0, 0x20, 0x90, 0x60, 0x60, 0x03, 0x1e, 0x00, 0x85, 0x8d, 0xa5, 0x4a, 0xec, 0x4b, 0x6a, 0x15,
	0xc7, 0xc6, 0x7f, 0x84, 0xe8, 0xd3, 0xf2, 0x28, 0xc8, 0xd7, 0xc9, 0x76, 0xce, 0xe7, 0x4f, 0xb6,
	0x74, 0x64, 0xf6, 0xd2, 0xf6, 0x8d, 0x34, 0xe2, 0x86, 0xee, 0x22, 0xcc, 0x18, 0x3a, 0x35, 0xa2,
	0xbb, 0x58, 0x67, 0x04, 0x7a, 0x7f, 0xb6, 0xce, 0x04, 0xc3, 0xd7, 0x5e, 0x5c, 0x51, 0x77, 0xfe,
	0xd5, 0xbf, 0x92, 0x9d, 0xbe, 0x92, 0xfb, 0x65, 0x56, 0xbf, 0x65, 0x93, 0xef, 0xd9, 0x42, 0x49,
	0x28, 0xaa, 0xa2, 0xde, 0xb4, 0x0b, 0x25, 0xf9, 0x81, 0x95, 0x56, 0x49, 0x58, 0x54, 0x45, 0x5d,
	0xb6, 0x29, 0x72, 0xce, 0x1e, 0xc6, 0x4e, 0x23, 0x94, 0xe4, 0x50, 0xe6, 0xc0, 0xd6, 0x42, 0xcb,
	0x5f, 0x6a, 0x44, 0x78, 0x20, 0x3c, 0x57, 0x7e, 0x64, 0x4b, 0x1f, 0xba, 0x80, 0xb0, 0x24, 0x9e,
	0x4b, 0xba, 0x35, 0x2a, 0x09, 0xab, 0x7c, 0x6b, 0xcc, 0xef, 0x0c, 0x4a, 0xc2, 0x3a, 0x93, 0x21,
	0xbf, 0x83, 0x49, 0x7a, 0x44, 0x88, 0x32, 0xb1, 0xa4, 0x6d, 0x26, 0x36, 0x79, 0x3e, 0x79, 0x2c,
	0x33, 0x3f, 0x79, 0x3e, 0x79, 0x8f, 0x27, 0x96, 0xbc, 0x17, 0x8c, 0xfd, 0x51, 0x0e, 0xe5, 0xc5,
	0xab, 0x3b, 0xc2, 0x96, 0x4e, 0x36, 0x44, 0xbe, 0xab, 0x3b, 0xf2, 0xd7, 0x6c, 0xe7, 0xd0, 0x2b,
	0x89, 0x63, 0xc8, 0xc6, 0x8e, 0x8c, 0xed, 0x0c, 0x49, 0x3a, 0xb1, 0x95, 0xed, 0x1c, 0x8e, 0x01,
	0xf6, 0x74, 0x3a, 0x35, 0xe2, 0x83, 0x33, 0xd1, 0xc2, 0x93, 0x89, 0x53, 0x4b, 0xbb, 0x84, 0xab,
	0xc3, 0x4e, 0x7a, 0x38, 0x54, 0x45, 0xbd, 0x6c, 0xe7, 0x4a, 0x2b, 0x2a, 0x81, 0xf0, 0x94, 0x30,
	0xe5, 0xc4, 0xa2, 0x47, 0x07, 0x3c, 0x2f, 0x9b, 0x72, 0x62, 0x41, 0x69, 0x84, 0x67, 0x99, 0xa5,
	0x9c, 0xb6, 0x12, 0x36, 0xc2, 0xb1, 0x2a, 0xea, 0xa2, 0x4d, 0x31, 0x11, 0x8d, 0x1a, 0x9e, 0x67,
	0xa2, 0x51, 0x7f, 0x7e, 0xf7, 0xe3, 0xed, 0xa0, 0xc2, 0x35, 0xf6, 0x67, 0x61, 0x74, 0xa3, 0x95,
	0xb8, 0xa1, 0xfd, 0xf8, 0xa1, 0x31, 0xfe, 0x77, 0x44, 0xf7, 0xf7, 0x0d, 0x7d, 0x88, 0x3e, 0xfe,
	0x6c, 0xec, 0x6d, 0xf8, 0x34, 0x7d, 0x8b, 0x7e, 0x45, 0xf4, 0xfd, 0xff, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x13, 0x67, 0xa2, 0xda, 0x4b, 0x02, 0x00, 0x00,
}
