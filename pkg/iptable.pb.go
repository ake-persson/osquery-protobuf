// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/iptable.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Linux IP packet filtering and NAT tool.
type Iptable struct {
	// Packet matching filter table name.
	FilterName string `protobuf:"bytes,1,opt,name=filter_name,json=filterName,proto3" json:"filter_name"`
	// Size of module content.
	Chain string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain"`
	// Policy that applies for this rule.
	Policy string `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy"`
	// Target that applies for this rule.
	Target string `protobuf:"bytes,4,opt,name=target,proto3" json:"target"`
	// Protocol number identification.
	Protocol int32 `protobuf:"varint,5,opt,name=protocol,proto3" json:"protocol"`
	// Protocol source port(s).
	SrcPort string `protobuf:"bytes,6,opt,name=src_port,json=srcPort,proto3" json:"src_port"`
	// Protocol destination port(s).
	DstPort string `protobuf:"bytes,7,opt,name=dst_port,json=dstPort,proto3" json:"dst_port"`
	// Source IP address.
	SrcIp string `protobuf:"bytes,8,opt,name=src_ip,json=srcIp,proto3" json:"src_ip"`
	// Source IP address mask.
	SrcMask string `protobuf:"bytes,9,opt,name=src_mask,json=srcMask,proto3" json:"src_mask"`
	// Input interface for the rule.
	Iniface string `protobuf:"bytes,10,opt,name=iniface,proto3" json:"iniface"`
	// Input interface mask for the rule.
	InifaceMask string `protobuf:"bytes,11,opt,name=iniface_mask,json=inifaceMask,proto3" json:"iniface_mask"`
	// Destination IP address.
	DstIp string `protobuf:"bytes,12,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip"`
	// Destination IP address mask.
	DstMask string `protobuf:"bytes,13,opt,name=dst_mask,json=dstMask,proto3" json:"dst_mask"`
	// Output interface for the rule.
	Outiface string `protobuf:"bytes,14,opt,name=outiface,proto3" json:"outiface"`
	// Output interface mask for the rule.
	OutifaceMask string `protobuf:"bytes,15,opt,name=outiface_mask,json=outifaceMask,proto3" json:"outiface_mask"`
	// Matching rule that applies.
	Match string `protobuf:"bytes,16,opt,name=match,proto3" json:"match"`
	// Number of matching packets for this rule.
	Packets int32 `protobuf:"varint,17,opt,name=packets,proto3" json:"packets"`
	// Number of matching bytes for this rule.
	Bytes                int32    `protobuf:"varint,18,opt,name=bytes,proto3" json:"bytes"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Iptable) Reset()         { *m = Iptable{} }
func (m *Iptable) String() string { return proto.CompactTextString(m) }
func (*Iptable) ProtoMessage()    {}
func (*Iptable) Descriptor() ([]byte, []int) {
	return fileDescriptor_34b518ca8b1c629f, []int{0}
}

func (m *Iptable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Iptable.Unmarshal(m, b)
}
func (m *Iptable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Iptable.Marshal(b, m, deterministic)
}
func (m *Iptable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Iptable.Merge(m, src)
}
func (m *Iptable) XXX_Size() int {
	return xxx_messageInfo_Iptable.Size(m)
}
func (m *Iptable) XXX_DiscardUnknown() {
	xxx_messageInfo_Iptable.DiscardUnknown(m)
}

var xxx_messageInfo_Iptable proto.InternalMessageInfo

func (m *Iptable) GetFilterName() string {
	if m != nil {
		return m.FilterName
	}
	return ""
}

func (m *Iptable) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *Iptable) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *Iptable) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Iptable) GetProtocol() int32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *Iptable) GetSrcPort() string {
	if m != nil {
		return m.SrcPort
	}
	return ""
}

func (m *Iptable) GetDstPort() string {
	if m != nil {
		return m.DstPort
	}
	return ""
}

func (m *Iptable) GetSrcIp() string {
	if m != nil {
		return m.SrcIp
	}
	return ""
}

func (m *Iptable) GetSrcMask() string {
	if m != nil {
		return m.SrcMask
	}
	return ""
}

func (m *Iptable) GetIniface() string {
	if m != nil {
		return m.Iniface
	}
	return ""
}

func (m *Iptable) GetInifaceMask() string {
	if m != nil {
		return m.InifaceMask
	}
	return ""
}

func (m *Iptable) GetDstIp() string {
	if m != nil {
		return m.DstIp
	}
	return ""
}

func (m *Iptable) GetDstMask() string {
	if m != nil {
		return m.DstMask
	}
	return ""
}

func (m *Iptable) GetOutiface() string {
	if m != nil {
		return m.Outiface
	}
	return ""
}

func (m *Iptable) GetOutifaceMask() string {
	if m != nil {
		return m.OutifaceMask
	}
	return ""
}

func (m *Iptable) GetMatch() string {
	if m != nil {
		return m.Match
	}
	return ""
}

func (m *Iptable) GetPackets() int32 {
	if m != nil {
		return m.Packets
	}
	return 0
}

func (m *Iptable) GetBytes() int32 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

func init() {
	proto.RegisterType((*Iptable)(nil), "schemas.Iptable")
}

func init() { proto.RegisterFile("pb/iptable.proto", fileDescriptor_34b518ca8b1c629f) }

var fileDescriptor_34b518ca8b1c629f = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x92, 0x3f, 0x93, 0xda, 0x30,
	0x10, 0xc5, 0x87, 0x10, 0xff, 0x61, 0x81, 0x84, 0x68, 0x20, 0xa3, 0xd0, 0x84, 0x24, 0x0d, 0x4d,
	0x70, 0x26, 0x99, 0xc9, 0x15, 0xd7, 0x5d, 0x47, 0x71, 0x37, 0x37, 0x94, 0xd7, 0x30, 0xb2, 0x10,
	0x58, 0x63, 0x1b, 0xe9, 0x24, 0xb9, 0xe0, 0x2b, 0xdf, 0xa7, 0xb8, 0xf1, 0xae, 0xed, 0x4e, 0xef,
	0xfd, 0xf4, 0x76, 0x9f, 0xff, 0xc0, 0xc2, 0xe6, 0x99, 0xb6, 0x41, 0xe4, 0x95, 0xda, 0x59, 0x67,
	0x82, 0x61, 0x89, 0x97, 0x85, 0xaa, 0x85, 0xff, 0xf9, 0x36, 0x86, 0x64, 0x4f, 0x88, 0x7d, 0x87,
	0xe9, 0x59, 0x57, 0x41, 0xb9, 0xe3, 0x55, 0xd4, 0x8a, 0x8f, 0x36, 0xa3, 0xed, 0xe4, 0x00, 0x64,
	0x3d, 0x89, 0x5a, 0xb1, 0x25, 0x44, 0xb2, 0x10, 0xfa, 0xca, 0x3f, 0x20, 0x22, 0xc1, 0xbe, 0x42,
	0x6c, 0x4d, 0xa5, 0xe5, 0x8d, 0x8f, 0xd1, 0xee, 0x54, 0xeb, 0x07, 0xe1, 0x2e, 0x2a, 0xf0, 0x8f,
	0xe4, 0x93, 0x62, 0x6b, 0x48, 0xb1, 0x84, 0x34, 0x15, 0x8f, 0x36, 0xa3, 0x6d, 0x74, 0x18, 0x34,
	0xfb, 0x06, 0xa9, 0x77, 0xf2, 0x68, 0x8d, 0x0b, 0x3c, 0xc6, 0x54, 0xe2, 0x9d, 0x7c, 0x36, 0x2e,
	0xb4, 0xe8, 0xe4, 0x03, 0xa1, 0x84, 0xd0, 0xc9, 0x07, 0x44, 0x2b, 0x88, 0xdb, 0x94, 0xb6, 0x3c,
	0xa5, 0x62, 0xde, 0xc9, 0xbd, 0xed, 0x87, 0xd5, 0xc2, 0x97, 0x7c, 0x32, 0x0c, 0x7b, 0x14, 0xbe,
	0x64, 0x1c, 0x12, 0x7d, 0xd5, 0x67, 0x21, 0x15, 0x07, 0x22, 0x9d, 0x64, 0x3f, 0x60, 0xd6, 0x1d,
	0x29, 0x38, 0x45, 0x3c, 0xed, 0x3c, 0x0c, 0xaf, 0x20, 0x6e, 0x9b, 0x68, 0xcb, 0x67, 0xb4, 0xee,
	0xe4, 0x03, 0xad, 0x6b, 0x6d, 0x4c, 0xcd, 0x87, 0x82, 0x98, 0x58, 0x43, 0x6a, 0x9a, 0x40, 0xfb,
	0x3e, 0x21, 0x1a, 0x34, 0xfb, 0x05, 0xf3, 0xfe, 0x4c, 0xd9, 0xcf, 0x78, 0x61, 0xd6, 0x9b, 0x38,
	0x60, 0x09, 0x51, 0x2d, 0x82, 0x2c, 0xf8, 0x82, 0x36, 0xa2, 0x68, 0x9f, 0xc2, 0x0a, 0x59, 0xaa,
	0xe0, 0xf9, 0x17, 0x7c, 0x91, 0xbd, 0x6c, 0xef, 0xe7, 0xb7, 0xa0, 0x3c, 0x67, 0xe8, 0x93, 0x78,
	0xf8, 0xfb, 0xf2, 0xe7, 0xa2, 0x43, 0xd1, 0xe4, 0x3b, 0x69, 0xea, 0xac, 0xd6, 0xb2, 0x54, 0xf6,
	0xee, 0x7f, 0x66, 0xfc, 0x6b, 0xa3, 0xdc, 0xed, 0x37, 0x7e, 0x85, 0xbc, 0x39, 0x67, 0xb6, 0xbc,
	0xdc, 0x77, 0x3f, 0x48, 0x1e, 0xa3, 0xfb, 0xef, 0x3d, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xf6, 0x10,
	0x4f, 0x44, 0x02, 0x00, 0x00,
}
