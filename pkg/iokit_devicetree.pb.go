// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/iokit_devicetree.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The IOKit registry matching the DeviceTree plane.
type IokitDevicetree struct {
	// Device node name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	// Best matching device class (most-specific category)
	Class string `protobuf:"bytes,2,opt,name=class,proto3" json:"class"`
	// IOKit internal registry ID
	Id int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id"`
	// Parent device registry ID
	Parent int64 `protobuf:"varint,4,opt,name=parent,proto3" json:"parent"`
	// Device tree path
	DevicePath string `protobuf:"bytes,5,opt,name=device_path,json=devicePath,proto3" json:"device_path"`
	// 1 if the device conforms to IOService else 0
	Service int32 `protobuf:"varint,6,opt,name=service,proto3" json:"service"`
	// 1 if the device is in a busy state else 0
	BusyState int32 `protobuf:"varint,7,opt,name=busy_state,json=busyState,proto3" json:"busy_state"`
	// The device reference count
	RetainCount int32 `protobuf:"varint,8,opt,name=retain_count,json=retainCount,proto3" json:"retain_count"`
	// Device nested depth
	Depth                int32    `protobuf:"varint,9,opt,name=depth,proto3" json:"depth"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IokitDevicetree) Reset()         { *m = IokitDevicetree{} }
func (m *IokitDevicetree) String() string { return proto.CompactTextString(m) }
func (*IokitDevicetree) ProtoMessage()    {}
func (*IokitDevicetree) Descriptor() ([]byte, []int) {
	return fileDescriptor_9252fda4927faf0f, []int{0}
}

func (m *IokitDevicetree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IokitDevicetree.Unmarshal(m, b)
}
func (m *IokitDevicetree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IokitDevicetree.Marshal(b, m, deterministic)
}
func (m *IokitDevicetree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IokitDevicetree.Merge(m, src)
}
func (m *IokitDevicetree) XXX_Size() int {
	return xxx_messageInfo_IokitDevicetree.Size(m)
}
func (m *IokitDevicetree) XXX_DiscardUnknown() {
	xxx_messageInfo_IokitDevicetree.DiscardUnknown(m)
}

var xxx_messageInfo_IokitDevicetree proto.InternalMessageInfo

func (m *IokitDevicetree) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IokitDevicetree) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *IokitDevicetree) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IokitDevicetree) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *IokitDevicetree) GetDevicePath() string {
	if m != nil {
		return m.DevicePath
	}
	return ""
}

func (m *IokitDevicetree) GetService() int32 {
	if m != nil {
		return m.Service
	}
	return 0
}

func (m *IokitDevicetree) GetBusyState() int32 {
	if m != nil {
		return m.BusyState
	}
	return 0
}

func (m *IokitDevicetree) GetRetainCount() int32 {
	if m != nil {
		return m.RetainCount
	}
	return 0
}

func (m *IokitDevicetree) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func init() {
	proto.RegisterType((*IokitDevicetree)(nil), "schemas.IokitDevicetree")
}

func init() { proto.RegisterFile("pb/iokit_devicetree.proto", fileDescriptor_9252fda4927faf0f) }

var fileDescriptor_9252fda4927faf0f = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0x41, 0x4b, 0xec, 0x30,
	0x14, 0x85, 0xe9, 0xcc, 0xb4, 0x7d, 0xbd, 0xf3, 0x50, 0x08, 0x22, 0x71, 0x21, 0x56, 0x57, 0xdd,
	0x38, 0x15, 0x05, 0x5d, 0xb8, 0x53, 0x37, 0xee, 0xa4, 0xee, 0xdc, 0x94, 0x34, 0xbd, 0x4e, 0x43,
	0x6d, 0x13, 0x93, 0x5b, 0x61, 0xfe, 0xb8, 0x6b, 0x49, 0x3a, 0xba, 0xcb, 0xf7, 0xdd, 0x43, 0x38,
	0x1c, 0x38, 0x31, 0x4d, 0xa9, 0x74, 0xaf, 0xa8, 0x6e, 0xf1, 0x4b, 0x49, 0x24, 0x8b, 0xb8, 0x31,
	0x56, 0x93, 0x66, 0xa9, 0x93, 0x1d, 0x0e, 0xc2, 0x5d, 0x7c, 0x47, 0x70, 0xf8, 0xec, 0x33, 0x4f,
	0x7f, 0x11, 0xc6, 0x60, 0x35, 0x8a, 0x01, 0x79, 0x94, 0x47, 0x45, 0x56, 0x85, 0x37, 0x3b, 0x82,
	0x58, 0x7e, 0x08, 0xe7, 0xf8, 0x22, 0xc8, 0x19, 0xd8, 0x01, 0x2c, 0x54, 0xcb, 0x97, 0x79, 0x54,
	0x2c, 0xab, 0x85, 0x6a, 0xd9, 0x31, 0x24, 0x46, 0x58, 0x1c, 0x89, 0xaf, 0x82, 0xdb, 0x13, 0x3b,
	0x83, 0xf5, 0x5c, 0xa1, 0x36, 0x82, 0x3a, 0x1e, 0x87, 0x3f, 0x60, 0x56, 0x2f, 0x82, 0x3a, 0xc6,
	0x21, 0x75, 0x68, 0x3d, 0xf2, 0x24, 0x8f, 0x8a, 0xb8, 0xfa, 0x45, 0x76, 0x0a, 0xd0, 0x4c, 0x6e,
	0x57, 0x3b, 0x12, 0x84, 0x3c, 0x0d, 0xc7, 0xcc, 0x9b, 0x57, 0x2f, 0xd8, 0x39, 0xfc, 0xb7, 0x48,
	0x42, 0x8d, 0xb5, 0xd4, 0xd3, 0x48, 0xfc, 0x5f, 0x08, 0xac, 0x67, 0xf7, 0xe8, 0x95, 0xaf, 0xde,
	0xa2, 0xa1, 0x8e, 0x67, 0xe1, 0x36, 0xc3, 0xc3, 0xf5, 0xdb, 0xd5, 0x56, 0x51, 0x37, 0x35, 0x1b,
	0xa9, 0x87, 0x72, 0x50, 0xb2, 0x47, 0x73, 0x77, 0x5b, 0x6a, 0xf7, 0x39, 0xa1, 0xdd, 0x5d, 0x86,
	0x99, 0x9a, 0xe9, 0xbd, 0x34, 0xfd, 0xf6, 0x7e, 0x3f, 0x56, 0x93, 0x04, 0x7b, 0xf3, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xef, 0xff, 0x4e, 0x6f, 0x59, 0x01, 0x00, 0x00,
}
