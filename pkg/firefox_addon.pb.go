// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/firefox_addon.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Firefox browser extensions, webapps, and addons.
type FirefoxAddon struct {
	// Addon display name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	// Addon identifier
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier"`
	// Addon-supported creator string
	Creator string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator"`
	// Extension
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type"`
	// Addon-supplied version string
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version"`
	// Addon-supplied description string
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	// URL that installed the addon
	SourceUrl string `protobuf:"bytes,7,opt,name=source_url,json=sourceUrl,proto3" json:"source_url"`
	// 1 If the addon is shown in browser else 0
	Visible int32 `protobuf:"varint,8,opt,name=visible,proto3" json:"visible"`
	// 1 If the addon is active else 0
	Active int32 `protobuf:"varint,9,opt,name=active,proto3" json:"active"`
	// Global
	Location string `protobuf:"bytes,10,opt,name=location,proto3" json:"location"`
	// Path to plugin bundle
	Path                 string   `protobuf:"bytes,11,opt,name=path,proto3" json:"path"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FirefoxAddon) Reset()         { *m = FirefoxAddon{} }
func (m *FirefoxAddon) String() string { return proto.CompactTextString(m) }
func (*FirefoxAddon) ProtoMessage()    {}
func (*FirefoxAddon) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc700ac9f43873d2, []int{0}
}

func (m *FirefoxAddon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirefoxAddon.Unmarshal(m, b)
}
func (m *FirefoxAddon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirefoxAddon.Marshal(b, m, deterministic)
}
func (m *FirefoxAddon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirefoxAddon.Merge(m, src)
}
func (m *FirefoxAddon) XXX_Size() int {
	return xxx_messageInfo_FirefoxAddon.Size(m)
}
func (m *FirefoxAddon) XXX_DiscardUnknown() {
	xxx_messageInfo_FirefoxAddon.DiscardUnknown(m)
}

var xxx_messageInfo_FirefoxAddon proto.InternalMessageInfo

func (m *FirefoxAddon) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FirefoxAddon) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *FirefoxAddon) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *FirefoxAddon) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FirefoxAddon) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *FirefoxAddon) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FirefoxAddon) GetSourceUrl() string {
	if m != nil {
		return m.SourceUrl
	}
	return ""
}

func (m *FirefoxAddon) GetVisible() int32 {
	if m != nil {
		return m.Visible
	}
	return 0
}

func (m *FirefoxAddon) GetActive() int32 {
	if m != nil {
		return m.Active
	}
	return 0
}

func (m *FirefoxAddon) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *FirefoxAddon) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*FirefoxAddon)(nil), "schemas.FirefoxAddon")
}

func init() { proto.RegisterFile("pb/firefox_addon.proto", fileDescriptor_fc700ac9f43873d2) }

var fileDescriptor_fc700ac9f43873d2 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x14, 0x84, 0x95, 0xd2, 0x26, 0xcd, 0x2b, 0x93, 0x87, 0xca, 0x42, 0x02, 0x45, 0x4c, 0x5d, 0x68,
	0x10, 0x48, 0x30, 0x30, 0xc1, 0xc0, 0x0f, 0xa8, 0xc4, 0xc2, 0x52, 0x39, 0xce, 0x4b, 0x63, 0x35,
	0x89, 0x8d, 0xed, 0x54, 0xf4, 0x47, 0xf1, 0x1f, 0x91, 0x5f, 0xd2, 0xaa, 0xdb, 0xdd, 0x7d, 0xa7,
	0xb3, 0xf5, 0x60, 0x69, 0x8a, 0xbc, 0x52, 0x16, 0x2b, 0xfd, 0xbb, 0x15, 0x65, 0xa9, 0xbb, 0xb5,
	0xb1, 0xda, 0x6b, 0x96, 0x38, 0x59, 0x63, 0x2b, 0xdc, 0xfd, 0xdf, 0x04, 0xae, 0x3f, 0x87, 0xc2,
	0x7b, 0xe0, 0x8c, 0xc1, 0xb4, 0x13, 0x2d, 0xf2, 0x28, 0x8b, 0x56, 0xe9, 0x86, 0x34, 0xbb, 0x03,
	0x50, 0x25, 0x76, 0x5e, 0x55, 0x0a, 0x2d, 0x9f, 0x10, 0xb9, 0x48, 0x18, 0x87, 0x44, 0x5a, 0x14,
	0x5e, 0x5b, 0x7e, 0x45, 0xf0, 0x64, 0xc3, 0x9a, 0x3f, 0x1a, 0xe4, 0xd3, 0x61, 0x2d, 0xe8, 0xd0,
	0x3e, 0xa0, 0x75, 0x4a, 0x77, 0x7c, 0x36, 0xb4, 0x47, 0xcb, 0x32, 0x58, 0x94, 0xe8, 0xa4, 0x55,
	0xc6, 0x07, 0x1a, 0x13, 0xbd, 0x8c, 0xd8, 0x2d, 0x80, 0xd3, 0xbd, 0x95, 0xb8, 0xed, 0x6d, 0xc3,
	0x13, 0x2a, 0xa4, 0x43, 0xf2, 0x65, 0x1b, 0x9a, 0x56, 0x4e, 0x15, 0x0d, 0xf2, 0x79, 0x16, 0xad,
	0x66, 0x9b, 0x93, 0x65, 0x4b, 0x88, 0x85, 0xf4, 0xea, 0x80, 0x3c, 0x25, 0x30, 0x3a, 0x76, 0x03,
	0xf3, 0x46, 0x4b, 0x41, 0xef, 0x01, 0xcd, 0x9d, 0x7d, 0xf8, 0xbc, 0x11, 0xbe, 0xe6, 0x8b, 0xe1,
	0xf3, 0x41, 0x7f, 0x3c, 0x7d, 0x3f, 0xee, 0x94, 0xaf, 0xfb, 0x62, 0x2d, 0x75, 0x9b, 0xb7, 0x4a,
	0xee, 0xd1, 0xbc, 0xbe, 0xe4, 0xda, 0xfd, 0xf4, 0x68, 0x8f, 0x0f, 0x74, 0xdd, 0xa2, 0xaf, 0x72,
	0xb3, 0xdf, 0xbd, 0x8d, 0x37, 0x2e, 0x62, 0x4a, 0x9f, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x83,
	0x87, 0x59, 0xe0, 0x8d, 0x01, 0x00, 0x00,
}
