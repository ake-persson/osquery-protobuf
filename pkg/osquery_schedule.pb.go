// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/osquery_schedule.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Information about the current queries that are scheduled in osquery.
type OsquerySchedule struct {
	// The given name for this query
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	// The exact query to run
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query"`
	// Number of times the query was executed
	Executions int64 `protobuf:"varint,3,opt,name=executions,proto3" json:"executions"`
	// 1 if the query is blacklisted else 0
	Blacklisted int32 `protobuf:"varint,4,opt,name=blacklisted,proto3" json:"blacklisted"`
	// Total wall time spent executing
	WallTime int64 `protobuf:"varint,5,opt,name=wall_time,json=wallTime,proto3" json:"wall_time"`
	// Total user time spent executing
	UserTime int64 `protobuf:"varint,6,opt,name=user_time,json=userTime,proto3" json:"user_time"`
	// Total system time spent executing
	SystemTime           int64    `protobuf:"varint,7,opt,name=system_time,json=systemTime,proto3" json:"system_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OsquerySchedule) Reset()         { *m = OsquerySchedule{} }
func (m *OsquerySchedule) String() string { return proto.CompactTextString(m) }
func (*OsquerySchedule) ProtoMessage()    {}
func (*OsquerySchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f96ecc64dbaf5bf, []int{0}
}

func (m *OsquerySchedule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OsquerySchedule.Unmarshal(m, b)
}
func (m *OsquerySchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OsquerySchedule.Marshal(b, m, deterministic)
}
func (m *OsquerySchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OsquerySchedule.Merge(m, src)
}
func (m *OsquerySchedule) XXX_Size() int {
	return xxx_messageInfo_OsquerySchedule.Size(m)
}
func (m *OsquerySchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_OsquerySchedule.DiscardUnknown(m)
}

var xxx_messageInfo_OsquerySchedule proto.InternalMessageInfo

func (m *OsquerySchedule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OsquerySchedule) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *OsquerySchedule) GetExecutions() int64 {
	if m != nil {
		return m.Executions
	}
	return 0
}

func (m *OsquerySchedule) GetBlacklisted() int32 {
	if m != nil {
		return m.Blacklisted
	}
	return 0
}

func (m *OsquerySchedule) GetWallTime() int64 {
	if m != nil {
		return m.WallTime
	}
	return 0
}

func (m *OsquerySchedule) GetUserTime() int64 {
	if m != nil {
		return m.UserTime
	}
	return 0
}

func (m *OsquerySchedule) GetSystemTime() int64 {
	if m != nil {
		return m.SystemTime
	}
	return 0
}

func init() {
	proto.RegisterType((*OsquerySchedule)(nil), "schemas.OsquerySchedule")
}

func init() { proto.RegisterFile("pb/osquery_schedule.proto", fileDescriptor_5f96ecc64dbaf5bf) }

var fileDescriptor_5f96ecc64dbaf5bf = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x14, 0x45, 0x89, 0xed, 0xb4, 0xf6, 0x75, 0x21, 0x04, 0x17, 0x11, 0x41, 0x07, 0x57, 0xb3, 0xb1,
	0x23, 0x0a, 0xba, 0x70, 0xe7, 0x0f, 0x08, 0xa3, 0x2b, 0x37, 0x65, 0x92, 0x3e, 0xdb, 0x30, 0x49,
	0x33, 0xce, 0x4b, 0xd0, 0xfe, 0xa9, 0x9f, 0x23, 0x49, 0x2a, 0xcc, 0x2e, 0xf7, 0x9c, 0x4b, 0x1e,
	0x5c, 0xb8, 0xe8, 0x65, 0xed, 0xe8, 0x2b, 0xe0, 0x70, 0x58, 0x93, 0xda, 0xe1, 0x26, 0x18, 0x5c,
	0xf5, 0x83, 0xf3, 0x8e, 0xcf, 0x63, 0xb6, 0x2d, 0xdd, 0xfc, 0x32, 0x38, 0x7b, 0xcd, 0x9d, 0xb7,
	0x63, 0x85, 0x73, 0x98, 0xee, 0x5b, 0x8b, 0x82, 0x95, 0xac, 0x5a, 0x34, 0xe9, 0xcd, 0xcf, 0xa1,
	0x48, 0x25, 0x71, 0x92, 0x60, 0x0e, 0xfc, 0x0a, 0x00, 0x7f, 0x50, 0x05, 0xaf, 0xdd, 0x9e, 0xc4,
	0xa4, 0x64, 0xd5, 0xa4, 0x19, 0x11, 0x5e, 0xc2, 0x52, 0x9a, 0x56, 0x75, 0x46, 0x93, 0xc7, 0x8d,
	0x98, 0x96, 0xac, 0x2a, 0x9a, 0x31, 0xe2, 0x97, 0xb0, 0xf8, 0x6e, 0x8d, 0x59, 0x7b, 0x6d, 0x51,
	0x14, 0xe9, 0x83, 0xd3, 0x08, 0xde, 0xb5, 0xc5, 0x28, 0x03, 0xe1, 0x90, 0xe5, 0x2c, 0xcb, 0x08,
	0x92, 0xbc, 0x86, 0x25, 0x1d, 0xc8, 0xa3, 0xcd, 0x7a, 0x9e, 0x8f, 0x67, 0x14, 0x0b, 0x2f, 0xf7,
	0x1f, 0x77, 0x5b, 0xed, 0x77, 0x41, 0xae, 0x94, 0xb3, 0xb5, 0xd5, 0xaa, 0xc3, 0xfe, 0xe9, 0xf1,
	0x7f, 0x91, 0xdb, 0x34, 0x84, 0x0c, 0x9f, 0x75, 0xdf, 0x6d, 0x9f, 0x8f, 0x73, 0xc8, 0x59, 0xa2,
	0x0f, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x49, 0x3c, 0x86, 0x3d, 0x3b, 0x01, 0x00, 0x00,
}
