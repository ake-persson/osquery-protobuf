// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/file.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Interactive filesystem attributes and metadata.
type File struct {
	// Absolute file path
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path"`
	// Directory of file(s)
	Directory string `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory"`
	// Name portion of file path
	Filename string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename"`
	// Filesystem inode number
	Inode int64 `protobuf:"varint,4,opt,name=inode,proto3" json:"inode"`
	// Owning user ID
	Uid int64 `protobuf:"varint,5,opt,name=uid,proto3" json:"uid"`
	// Owning group ID
	Gid int64 `protobuf:"varint,6,opt,name=gid,proto3" json:"gid"`
	// Permission bits
	Mode string `protobuf:"bytes,7,opt,name=mode,proto3" json:"mode"`
	// Device ID (optional)
	Device int64 `protobuf:"varint,8,opt,name=device,proto3" json:"device"`
	// Size of file in bytes
	Size int64 `protobuf:"varint,9,opt,name=size,proto3" json:"size"`
	// Block size of filesystem
	BlockSize int32 `protobuf:"varint,10,opt,name=block_size,json=blockSize,proto3" json:"block_size"`
	// Last access time
	Atime int64 `protobuf:"varint,11,opt,name=atime,proto3" json:"atime"`
	// Last modification time
	Mtime int64 `protobuf:"varint,12,opt,name=mtime,proto3" json:"mtime"`
	// Last status change time
	Ctime int64 `protobuf:"varint,13,opt,name=ctime,proto3" json:"ctime"`
	// (B)irth or (cr)eate time
	Btime int64 `protobuf:"varint,14,opt,name=btime,proto3" json:"btime"`
	// Number of hard links
	HardLinks int32 `protobuf:"varint,15,opt,name=hard_links,json=hardLinks,proto3" json:"hard_links"`
	// 1 if the path is a symlink
	Symlink int32 `protobuf:"varint,16,opt,name=symlink,proto3" json:"symlink"`
	// File status
	Type string `protobuf:"bytes,17,opt,name=type,proto3" json:"type"`
	// File attrib string. See: https://ss64.com/nt/attrib.html
	Attributes string `protobuf:"bytes,18,opt,name=attributes,proto3" json:"attributes"`
	// Volume serial number
	VolumeSerial string `protobuf:"bytes,19,opt,name=volume_serial,json=volumeSerial,proto3" json:"volume_serial"`
	// file ID
	FileId string `protobuf:"bytes,20,opt,name=file_id,json=fileId,proto3" json:"file_id"`
	// File product version
	ProductVersion string `protobuf:"bytes,21,opt,name=product_version,json=productVersion,proto3" json:"product_version"`
	// The BSD file flags (chflags). Possible values: NODUMP
	BsdFlags             string   `protobuf:"bytes,22,opt,name=bsd_flags,json=bsdFlags,proto3" json:"bsd_flags"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_1133fac6745382fb, []int{0}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *File) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *File) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *File) GetInode() int64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *File) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *File) GetGid() int64 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *File) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *File) GetDevice() int64 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *File) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *File) GetBlockSize() int32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *File) GetAtime() int64 {
	if m != nil {
		return m.Atime
	}
	return 0
}

func (m *File) GetMtime() int64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *File) GetCtime() int64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *File) GetBtime() int64 {
	if m != nil {
		return m.Btime
	}
	return 0
}

func (m *File) GetHardLinks() int32 {
	if m != nil {
		return m.HardLinks
	}
	return 0
}

func (m *File) GetSymlink() int32 {
	if m != nil {
		return m.Symlink
	}
	return 0
}

func (m *File) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *File) GetAttributes() string {
	if m != nil {
		return m.Attributes
	}
	return ""
}

func (m *File) GetVolumeSerial() string {
	if m != nil {
		return m.VolumeSerial
	}
	return ""
}

func (m *File) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *File) GetProductVersion() string {
	if m != nil {
		return m.ProductVersion
	}
	return ""
}

func (m *File) GetBsdFlags() string {
	if m != nil {
		return m.BsdFlags
	}
	return ""
}

func init() {
	proto.RegisterType((*File)(nil), "schemas.File")
}

func init() { proto.RegisterFile("pb/file.proto", fileDescriptor_1133fac6745382fb) }

var fileDescriptor_1133fac6745382fb = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xd2, 0x4b, 0x8f, 0xd3, 0x30,
	0x10, 0x07, 0x70, 0x95, 0xbe, 0x36, 0xc3, 0x76, 0x77, 0x31, 0x65, 0x19, 0xf1, 0x52, 0x05, 0x07,
	0x7a, 0x61, 0x8b, 0x40, 0x82, 0x03, 0x37, 0x0e, 0x2b, 0x21, 0x71, 0xea, 0x4a, 0x1c, 0xb8, 0x44,
	0xf1, 0xa3, 0xa9, 0xd5, 0xb8, 0x0e, 0xb6, 0x53, 0x29, 0x7c, 0x30, 0x3e, 0x1f, 0x9a, 0x71, 0x0b,
	0x7b, 0x9b, 0xff, 0xef, 0x3f, 0x6d, 0x1c, 0xc5, 0x30, 0x6b, 0xe5, 0x6a, 0x63, 0x1b, 0x73, 0xd3,
	0x06, 0x9f, 0xbc, 0x98, 0x46, 0xb5, 0x35, 0xae, 0x8a, 0xaf, 0xff, 0x8c, 0x60, 0x74, 0x6b, 0x1b,
	0x23, 0x04, 0x8c, 0xda, 0x2a, 0x6d, 0x71, 0xb0, 0x18, 0x2c, 0x8b, 0x35, 0xcf, 0xe2, 0x05, 0x14,
	0xda, 0x06, 0xa3, 0x92, 0x0f, 0x3d, 0x3e, 0xe0, 0xe2, 0x3f, 0x88, 0x67, 0x70, 0x46, 0xff, 0xb8,
	0xaf, 0x9c, 0xc1, 0x21, 0x97, 0xff, 0xb2, 0x98, 0xc3, 0xd8, 0xee, 0xbd, 0x36, 0x38, 0x5a, 0x0c,
	0x96, 0xc3, 0x75, 0x0e, 0xe2, 0x0a, 0x86, 0x9d, 0xd5, 0x38, 0x66, 0xa3, 0x91, 0xa4, 0xb6, 0x1a,
	0x27, 0x59, 0x6a, 0xab, 0xe9, 0x1c, 0x8e, 0x7e, 0x38, 0xcd, 0xe7, 0xa0, 0x59, 0x5c, 0xc3, 0x44,
	0x9b, 0x83, 0x55, 0x06, 0xcf, 0x78, 0xf1, 0x98, 0x68, 0x37, 0xda, 0xdf, 0x06, 0x0b, 0x56, 0x9e,
	0xc5, 0x4b, 0x00, 0xd9, 0x78, 0xb5, 0x2b, 0xb9, 0x81, 0xc5, 0x60, 0x39, 0x5e, 0x17, 0x2c, 0x77,
	0x54, 0xcf, 0x61, 0x5c, 0x25, 0xeb, 0x0c, 0x3e, 0xcc, 0x07, 0xe3, 0x40, 0xea, 0x58, 0xcf, 0xb3,
	0xba, 0x93, 0x2a, 0xd6, 0x59, 0x56, 0x75, 0x52, 0xc9, 0x7a, 0x91, 0x95, 0x03, 0x3d, 0x76, 0x5b,
	0x05, 0x5d, 0x36, 0x76, 0xbf, 0x8b, 0x78, 0x99, 0x1f, 0x4b, 0xf2, 0x9d, 0x40, 0x20, 0x4c, 0x63,
	0xef, 0xa8, 0xc4, 0x2b, 0xee, 0x4e, 0x91, 0xde, 0x21, 0xf5, 0xad, 0xc1, 0x47, 0xf9, 0x7d, 0x69,
	0x16, 0xaf, 0x00, 0xaa, 0x94, 0x82, 0x95, 0x5d, 0x32, 0x11, 0x05, 0x37, 0xf7, 0x44, 0xbc, 0x81,
	0xd9, 0xc1, 0x37, 0x9d, 0x33, 0x65, 0x34, 0xc1, 0x56, 0x0d, 0x3e, 0xe6, 0x95, 0xf3, 0x8c, 0x77,
	0x6c, 0xe2, 0x29, 0x4c, 0xe9, 0x73, 0x94, 0x56, 0xe3, 0x9c, 0xeb, 0x09, 0xc5, 0x6f, 0x5a, 0xbc,
	0x85, 0xcb, 0x36, 0x78, 0xdd, 0xa9, 0x54, 0x1e, 0x4c, 0x88, 0xd6, 0xef, 0xf1, 0x09, 0x2f, 0x5c,
	0x1c, 0xf9, 0x47, 0x56, 0xf1, 0x1c, 0x0a, 0x19, 0x75, 0xb9, 0x69, 0xaa, 0x3a, 0xe2, 0x75, 0xfe,
	0xc2, 0x32, 0xea, 0x5b, 0xca, 0x5f, 0x3f, 0xfc, 0x7c, 0x5f, 0xdb, 0xb4, 0xed, 0xe4, 0x8d, 0xf2,
	0x6e, 0xe5, 0xac, 0xda, 0x99, 0xf6, 0xf3, 0xa7, 0x95, 0x8f, 0xbf, 0x3a, 0x13, 0xfa, 0x77, 0x7c,
	0xcd, 0x64, 0xb7, 0x59, 0xb5, 0xbb, 0xfa, 0xcb, 0xf1, 0xb2, 0xc9, 0x09, 0xeb, 0xc7, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x32, 0x3b, 0xe8, 0x9b, 0x8d, 0x02, 0x00, 0x00,
}
