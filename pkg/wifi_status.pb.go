// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/wifi_status.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// OS X current WiFi status.
type WifiStatus struct {
	// Name of the interface
	Interface string `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface"`
	// SSID octets of the network
	Ssid string `protobuf:"bytes,2,opt,name=ssid,proto3" json:"ssid"`
	// The current basic service set identifier
	Bssid string `protobuf:"bytes,3,opt,name=bssid,proto3" json:"bssid"`
	// Name of the network
	NetworkName string `protobuf:"bytes,4,opt,name=network_name,json=networkName,proto3" json:"network_name"`
	// The country code (ISO/IEC 3166-1:1997) for the network
	CountryCode string `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code"`
	// Type of security on this network
	SecurityType string `protobuf:"bytes,6,opt,name=security_type,json=securityType,proto3" json:"security_type"`
	// The current received signal strength indication (dbm)
	Rssi int32 `protobuf:"varint,7,opt,name=rssi,proto3" json:"rssi"`
	// The current noise measurement (dBm)
	Noise int32 `protobuf:"varint,8,opt,name=noise,proto3" json:"noise"`
	// Channel number
	Channel int32 `protobuf:"varint,9,opt,name=channel,proto3" json:"channel"`
	// Channel width
	ChannelWidth int32 `protobuf:"varint,10,opt,name=channel_width,json=channelWidth,proto3" json:"channel_width"`
	// Channel band
	ChannelBand int32 `protobuf:"varint,11,opt,name=channel_band,json=channelBand,proto3" json:"channel_band"`
	// The current transmit rate
	TransmitRate string `protobuf:"bytes,12,opt,name=transmit_rate,json=transmitRate,proto3" json:"transmit_rate"`
	// The current operating mode for the Wi-Fi interface
	Mode                 string   `protobuf:"bytes,13,opt,name=mode,proto3" json:"mode"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WifiStatus) Reset()         { *m = WifiStatus{} }
func (m *WifiStatus) String() string { return proto.CompactTextString(m) }
func (*WifiStatus) ProtoMessage()    {}
func (*WifiStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c79391a98327001, []int{0}
}

func (m *WifiStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiStatus.Unmarshal(m, b)
}
func (m *WifiStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiStatus.Marshal(b, m, deterministic)
}
func (m *WifiStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiStatus.Merge(m, src)
}
func (m *WifiStatus) XXX_Size() int {
	return xxx_messageInfo_WifiStatus.Size(m)
}
func (m *WifiStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WifiStatus proto.InternalMessageInfo

func (m *WifiStatus) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *WifiStatus) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *WifiStatus) GetBssid() string {
	if m != nil {
		return m.Bssid
	}
	return ""
}

func (m *WifiStatus) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *WifiStatus) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *WifiStatus) GetSecurityType() string {
	if m != nil {
		return m.SecurityType
	}
	return ""
}

func (m *WifiStatus) GetRssi() int32 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func (m *WifiStatus) GetNoise() int32 {
	if m != nil {
		return m.Noise
	}
	return 0
}

func (m *WifiStatus) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *WifiStatus) GetChannelWidth() int32 {
	if m != nil {
		return m.ChannelWidth
	}
	return 0
}

func (m *WifiStatus) GetChannelBand() int32 {
	if m != nil {
		return m.ChannelBand
	}
	return 0
}

func (m *WifiStatus) GetTransmitRate() string {
	if m != nil {
		return m.TransmitRate
	}
	return ""
}

func (m *WifiStatus) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func init() {
	proto.RegisterType((*WifiStatus)(nil), "schemas.WifiStatus")
}

func init() { proto.RegisterFile("pb/wifi_status.proto", fileDescriptor_6c79391a98327001) }

var fileDescriptor_6c79391a98327001 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0xbd, 0x6e, 0xe3, 0x30,
	0x10, 0x84, 0xe1, 0xf3, 0xdf, 0x99, 0x96, 0x1b, 0xc2, 0x05, 0x8b, 0x2b, 0x7c, 0x77, 0x8d, 0x9b,
	0x58, 0x41, 0x02, 0x24, 0x45, 0x3a, 0xa7, 0x4f, 0xe1, 0x04, 0x30, 0x90, 0x46, 0xa0, 0xa8, 0x95,
	0x45, 0x38, 0x24, 0x15, 0x72, 0x05, 0x43, 0x7d, 0x1e, 0x3c, 0xe0, 0x8a, 0x46, 0xba, 0xd9, 0x6f,
	0x06, 0xe4, 0x90, 0xcb, 0xd6, 0x6d, 0x99, 0x5f, 0x74, 0xad, 0x8b, 0x80, 0x12, 0xbb, 0xb0, 0x6b,
	0xbd, 0x43, 0xc7, 0xe7, 0x41, 0x35, 0x60, 0x64, 0xf8, 0xf7, 0x35, 0x66, 0xec, 0xa8, 0x6b, 0xfd,
	0x4a, 0x2e, 0xff, 0xc3, 0x16, 0xda, 0x22, 0xf8, 0x5a, 0x2a, 0x10, 0xa3, 0xcd, 0x68, 0xbb, 0x38,
	0xfc, 0x00, 0xce, 0xd9, 0x24, 0x04, 0x5d, 0x89, 0x5f, 0x64, 0x90, 0xe6, 0x6b, 0x36, 0x2d, 0x09,
	0x8e, 0x09, 0x0e, 0x03, 0xff, 0xcb, 0x32, 0x0b, 0x78, 0x71, 0xfe, 0x5c, 0x58, 0x69, 0x40, 0x4c,
	0xc8, 0x5c, 0x26, 0xf6, 0x22, 0x0d, 0xc4, 0x88, 0x72, 0x9d, 0x45, 0xdf, 0x17, 0xca, 0x55, 0x20,
	0xa6, 0x43, 0x24, 0xb1, 0x67, 0x57, 0x01, 0xff, 0xcf, 0x56, 0x01, 0x54, 0xe7, 0x35, 0xf6, 0x05,
	0xf6, 0x2d, 0x88, 0x19, 0x65, 0xb2, 0x2b, 0x7c, 0xeb, 0x5b, 0x2a, 0xe5, 0x43, 0xd0, 0x62, 0xbe,
	0x19, 0x6d, 0xa7, 0x07, 0xd2, 0xb1, 0x94, 0x75, 0x3a, 0x80, 0xf8, 0x4d, 0x70, 0x18, 0xb8, 0x60,
	0x73, 0xd5, 0x48, 0x6b, 0xe1, 0x43, 0x2c, 0x88, 0x5f, 0xc7, 0x78, 0x51, 0x92, 0xc5, 0x45, 0x57,
	0xd8, 0x08, 0x46, 0x7e, 0x96, 0xe0, 0x31, 0x32, 0x2a, 0x9c, 0x42, 0xa5, 0xb4, 0x95, 0x58, 0x52,
	0x66, 0x99, 0xd8, 0x5e, 0xda, 0x2a, 0x9e, 0x83, 0x5e, 0xda, 0x60, 0x34, 0x16, 0x5e, 0x22, 0x88,
	0x6c, 0x28, 0x7c, 0x85, 0x07, 0x89, 0x54, 0xd8, 0xc4, 0x07, 0xaf, 0x86, 0x5f, 0x8c, 0x7a, 0x7f,
	0xf7, 0x7e, 0x7b, 0xd2, 0xd8, 0x74, 0xe5, 0x4e, 0x39, 0x93, 0x1b, 0xad, 0xce, 0xd0, 0x3e, 0x3e,
	0xe4, 0x2e, 0x7c, 0x76, 0xe0, 0xfb, 0x1b, 0x5a, 0x5a, 0xd9, 0xd5, 0x79, 0x7b, 0x3e, 0x3d, 0xa5,
	0xd5, 0x95, 0x33, 0xa2, 0xf7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x36, 0x39, 0xcf, 0x0f, 0xe2,
	0x01, 0x00, 0x00,
}
