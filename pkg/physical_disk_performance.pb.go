// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/physical_disk_performance.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Provides provides raw data from performance counters that monitor hard or fixed disk drives on the system.
type PhysicalDiskPerformance struct {
	// Name of the physical disk
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	// Average number of bytes transferred from the disk during read operations
	AvgDiskBytesPerRead int64 `protobuf:"varint,2,opt,name=avg_disk_bytes_per_read,json=avgDiskBytesPerRead,proto3" json:"avg_disk_bytes_per_read"`
	// Average number of bytes transferred to the disk during write operations
	AvgDiskBytesPerWrite int64 `protobuf:"varint,3,opt,name=avg_disk_bytes_per_write,json=avgDiskBytesPerWrite,proto3" json:"avg_disk_bytes_per_write"`
	// Average number of read requests that were queued for the selected disk during the sample interval
	AvgDiskReadQueueLength int64 `protobuf:"varint,4,opt,name=avg_disk_read_queue_length,json=avgDiskReadQueueLength,proto3" json:"avg_disk_read_queue_length"`
	// Average number of write requests that were queued for the selected disk during the sample interval
	AvgDiskWriteQueueLength int64 `protobuf:"varint,5,opt,name=avg_disk_write_queue_length,json=avgDiskWriteQueueLength,proto3" json:"avg_disk_write_queue_length"`
	// Average time
	AvgDiskSecPerRead int32 `protobuf:"varint,6,opt,name=avg_disk_sec_per_read,json=avgDiskSecPerRead,proto3" json:"avg_disk_sec_per_read"`
	// Average time
	AvgDiskSecPerWrite int32 `protobuf:"varint,7,opt,name=avg_disk_sec_per_write,json=avgDiskSecPerWrite,proto3" json:"avg_disk_sec_per_write"`
	// Number of requests outstanding on the disk at the time the performance data is collected
	CurrentDiskQueueLength int32 `protobuf:"varint,8,opt,name=current_disk_queue_length,json=currentDiskQueueLength,proto3" json:"current_disk_queue_length"`
	// Percentage of elapsed time that the selected disk drive is busy servicing read requests
	PercentDiskReadTime int64 `protobuf:"varint,9,opt,name=percent_disk_read_time,json=percentDiskReadTime,proto3" json:"percent_disk_read_time"`
	// Percentage of elapsed time that the selected disk drive is busy servicing write requests
	PercentDiskWriteTime int64 `protobuf:"varint,10,opt,name=percent_disk_write_time,json=percentDiskWriteTime,proto3" json:"percent_disk_write_time"`
	// Percentage of elapsed time that the selected disk drive is busy servicing read or write requests
	PercentDiskTime int64 `protobuf:"varint,11,opt,name=percent_disk_time,json=percentDiskTime,proto3" json:"percent_disk_time"`
	// Percentage of time during the sample interval that the disk was idle
	PercentIdleTime      int64    `protobuf:"varint,12,opt,name=percent_idle_time,json=percentIdleTime,proto3" json:"percent_idle_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhysicalDiskPerformance) Reset()         { *m = PhysicalDiskPerformance{} }
func (m *PhysicalDiskPerformance) String() string { return proto.CompactTextString(m) }
func (*PhysicalDiskPerformance) ProtoMessage()    {}
func (*PhysicalDiskPerformance) Descriptor() ([]byte, []int) {
	return fileDescriptor_43b4828254e011b4, []int{0}
}

func (m *PhysicalDiskPerformance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalDiskPerformance.Unmarshal(m, b)
}
func (m *PhysicalDiskPerformance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalDiskPerformance.Marshal(b, m, deterministic)
}
func (m *PhysicalDiskPerformance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalDiskPerformance.Merge(m, src)
}
func (m *PhysicalDiskPerformance) XXX_Size() int {
	return xxx_messageInfo_PhysicalDiskPerformance.Size(m)
}
func (m *PhysicalDiskPerformance) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalDiskPerformance.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalDiskPerformance proto.InternalMessageInfo

func (m *PhysicalDiskPerformance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PhysicalDiskPerformance) GetAvgDiskBytesPerRead() int64 {
	if m != nil {
		return m.AvgDiskBytesPerRead
	}
	return 0
}

func (m *PhysicalDiskPerformance) GetAvgDiskBytesPerWrite() int64 {
	if m != nil {
		return m.AvgDiskBytesPerWrite
	}
	return 0
}

func (m *PhysicalDiskPerformance) GetAvgDiskReadQueueLength() int64 {
	if m != nil {
		return m.AvgDiskReadQueueLength
	}
	return 0
}

func (m *PhysicalDiskPerformance) GetAvgDiskWriteQueueLength() int64 {
	if m != nil {
		return m.AvgDiskWriteQueueLength
	}
	return 0
}

func (m *PhysicalDiskPerformance) GetAvgDiskSecPerRead() int32 {
	if m != nil {
		return m.AvgDiskSecPerRead
	}
	return 0
}

func (m *PhysicalDiskPerformance) GetAvgDiskSecPerWrite() int32 {
	if m != nil {
		return m.AvgDiskSecPerWrite
	}
	return 0
}

func (m *PhysicalDiskPerformance) GetCurrentDiskQueueLength() int32 {
	if m != nil {
		return m.CurrentDiskQueueLength
	}
	return 0
}

func (m *PhysicalDiskPerformance) GetPercentDiskReadTime() int64 {
	if m != nil {
		return m.PercentDiskReadTime
	}
	return 0
}

func (m *PhysicalDiskPerformance) GetPercentDiskWriteTime() int64 {
	if m != nil {
		return m.PercentDiskWriteTime
	}
	return 0
}

func (m *PhysicalDiskPerformance) GetPercentDiskTime() int64 {
	if m != nil {
		return m.PercentDiskTime
	}
	return 0
}

func (m *PhysicalDiskPerformance) GetPercentIdleTime() int64 {
	if m != nil {
		return m.PercentIdleTime
	}
	return 0
}

func init() {
	proto.RegisterType((*PhysicalDiskPerformance)(nil), "schemas.PhysicalDiskPerformance")
}

func init() { proto.RegisterFile("pb/physical_disk_performance.proto", fileDescriptor_43b4828254e011b4) }

var fileDescriptor_43b4828254e011b4 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xd2, 0xcd, 0xab, 0xd3, 0x40,
	0x10, 0x00, 0x70, 0xe2, 0xeb, 0x7b, 0xcf, 0xb7, 0x0a, 0xd2, 0x55, 0x93, 0xa8, 0x97, 0xd2, 0x53,
	0x11, 0x6c, 0x4a, 0xab, 0x15, 0x3f, 0x4e, 0xc5, 0x8b, 0xe0, 0xa1, 0x46, 0x41, 0xf0, 0x12, 0x36,
	0x9b, 0x69, 0xb2, 0xe4, 0xb3, 0xbb, 0x49, 0xa5, 0xff, 0xba, 0x27, 0xd9, 0xc9, 0x36, 0x4d, 0xea,
	0xbb, 0x85, 0xcc, 0xfc, 0x66, 0x76, 0x66, 0x97, 0x4c, 0xab, 0xd0, 0xab, 0x92, 0xa3, 0x12, 0x9c,
	0x65, 0x41, 0x24, 0x54, 0x1a, 0x54, 0x20, 0x77, 0xa5, 0xcc, 0x59, 0xc1, 0x61, 0x5e, 0xc9, 0xb2,
	0x2e, 0xe9, 0xad, 0xe2, 0x09, 0xe4, 0x4c, 0x4d, 0xff, 0x8e, 0x88, 0xb3, 0x35, 0xc9, 0x5f, 0x84,
	0x4a, 0xb7, 0xe7, 0x54, 0x4a, 0xc9, 0xa8, 0x60, 0x39, 0xb8, 0xd6, 0xc4, 0x9a, 0xdd, 0xf9, 0xf8,
	0x4d, 0xdf, 0x12, 0x87, 0x1d, 0xe2, 0xb6, 0x6c, 0x78, 0xac, 0x41, 0xe9, 0xe2, 0x81, 0x04, 0x16,
	0xb9, 0x0f, 0x26, 0xd6, 0xec, 0xca, 0x7f, 0xca, 0x0e, 0xb1, 0x2e, 0xb4, 0xd1, 0xc1, 0x2d, 0x48,
	0x1f, 0x58, 0x44, 0xd7, 0xc4, 0xbd, 0x47, 0xfd, 0x91, 0xa2, 0x06, 0xf7, 0x0a, 0xd9, 0xb3, 0x0b,
	0xf6, 0x4b, 0xc7, 0xe8, 0x47, 0xf2, 0xb2, 0x73, 0xba, 0x47, 0xb0, 0x6f, 0xa0, 0x81, 0x20, 0x83,
	0x22, 0xae, 0x13, 0x77, 0x84, 0xd2, 0x36, 0x52, 0x37, 0xfa, 0xae, 0xc3, 0xdf, 0x30, 0x4a, 0x3f,
	0x93, 0x57, 0x9d, 0xc5, 0x4e, 0x43, 0x7c, 0x8d, 0xd8, 0x31, 0x18, 0xdb, 0xf5, 0xf5, 0x82, 0x3c,
	0xef, 0xb4, 0x02, 0x7e, 0x9e, 0xf2, 0x66, 0x62, 0xcd, 0xae, 0xfd, 0xb1, 0x71, 0x3f, 0x80, 0x9f,
	0x66, 0x5c, 0x12, 0xfb, 0x3f, 0xd1, 0x4e, 0x78, 0x8b, 0x84, 0x0e, 0x48, 0x3b, 0xdf, 0x07, 0xf2,
	0x82, 0x37, 0x52, 0x42, 0x51, 0xb7, 0x6e, 0x70, 0xc2, 0x87, 0xc8, 0x6c, 0x93, 0xa0, 0x69, 0xff,
	0x80, 0x2b, 0x62, 0x57, 0x20, 0x79, 0x47, 0x71, 0x3d, 0xb5, 0xc8, 0xc1, 0xbd, 0x6b, 0xef, 0xc1,
	0x44, 0x4f, 0xab, 0xf9, 0x29, 0x72, 0xa0, 0xef, 0x88, 0x33, 0x40, 0xed, 0x5e, 0x50, 0x91, 0xf6,
	0x1a, 0x7a, 0x0a, 0x8f, 0x88, 0xec, 0x35, 0x19, 0x0f, 0x18, 0x82, 0x47, 0x08, 0x9e, 0xf4, 0xc0,
	0x65, 0xae, 0x88, 0x32, 0x53, 0xfc, 0xf1, 0x20, 0xf7, 0x6b, 0x94, 0x61, 0xdd, 0xcd, 0xf2, 0xf7,
	0x22, 0x16, 0x75, 0xd2, 0x84, 0x73, 0x5e, 0xe6, 0x5e, 0x2e, 0x78, 0x0a, 0xd5, 0xfb, 0xb5, 0x57,
	0xaa, 0x7d, 0x03, 0xf2, 0xf8, 0x06, 0x9f, 0x6a, 0xd8, 0xec, 0xbc, 0x2a, 0x8d, 0x3f, 0x99, 0x07,
	0x1b, 0xde, 0xe0, 0xdf, 0xd5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x1e, 0x0a, 0xa8, 0xe6,
	0x02, 0x00, 0x00,
}
