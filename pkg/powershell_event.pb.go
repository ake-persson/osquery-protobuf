// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/powershell_event.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Powershell script blocks reconstructed to their full script content, this table requires script block logging to be enabled.
type PowershellEvent struct {
	// Timestamp the event was received by the osquery event publisher
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time"`
	// System time at which the Powershell script event occurred
	Datetime string `protobuf:"bytes,2,opt,name=datetime,proto3" json:"datetime"`
	// The unique GUID of the powershell script to which this block belongs
	ScriptBlockId string `protobuf:"bytes,3,opt,name=script_block_id,json=scriptBlockId,proto3" json:"script_block_id"`
	// The total number of script blocks for this script
	ScriptBlockCount int32 `protobuf:"varint,4,opt,name=script_block_count,json=scriptBlockCount,proto3" json:"script_block_count"`
	// The text content of the Powershell script
	ScriptText string `protobuf:"bytes,5,opt,name=script_text,json=scriptText,proto3" json:"script_text"`
	// The name of the Powershell script
	ScriptName string `protobuf:"bytes,6,opt,name=script_name,json=scriptName,proto3" json:"script_name"`
	// The path for the Powershell script
	ScriptPath string `protobuf:"bytes,7,opt,name=script_path,json=scriptPath,proto3" json:"script_path"`
	// How similar the Powershell script is to a provided 'normal' character frequency
	CosineSimilarity     float64  `protobuf:"fixed64,8,opt,name=cosine_similarity,json=cosineSimilarity,proto3" json:"cosine_similarity"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PowershellEvent) Reset()         { *m = PowershellEvent{} }
func (m *PowershellEvent) String() string { return proto.CompactTextString(m) }
func (*PowershellEvent) ProtoMessage()    {}
func (*PowershellEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0071b2f7748bc8c6, []int{0}
}

func (m *PowershellEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PowershellEvent.Unmarshal(m, b)
}
func (m *PowershellEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PowershellEvent.Marshal(b, m, deterministic)
}
func (m *PowershellEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PowershellEvent.Merge(m, src)
}
func (m *PowershellEvent) XXX_Size() int {
	return xxx_messageInfo_PowershellEvent.Size(m)
}
func (m *PowershellEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PowershellEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PowershellEvent proto.InternalMessageInfo

func (m *PowershellEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PowershellEvent) GetDatetime() string {
	if m != nil {
		return m.Datetime
	}
	return ""
}

func (m *PowershellEvent) GetScriptBlockId() string {
	if m != nil {
		return m.ScriptBlockId
	}
	return ""
}

func (m *PowershellEvent) GetScriptBlockCount() int32 {
	if m != nil {
		return m.ScriptBlockCount
	}
	return 0
}

func (m *PowershellEvent) GetScriptText() string {
	if m != nil {
		return m.ScriptText
	}
	return ""
}

func (m *PowershellEvent) GetScriptName() string {
	if m != nil {
		return m.ScriptName
	}
	return ""
}

func (m *PowershellEvent) GetScriptPath() string {
	if m != nil {
		return m.ScriptPath
	}
	return ""
}

func (m *PowershellEvent) GetCosineSimilarity() float64 {
	if m != nil {
		return m.CosineSimilarity
	}
	return 0
}

func init() {
	proto.RegisterType((*PowershellEvent)(nil), "schemas.PowershellEvent")
}

func init() { proto.RegisterFile("pb/powershell_event.proto", fileDescriptor_0071b2f7748bc8c6) }

var fileDescriptor_0071b2f7748bc8c6 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xd0, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc7, 0x71, 0xb2, 0xff, 0x46, 0x64, 0x33, 0xa7, 0xe8, 0xc5, 0xe2, 0x41, 0x0a, 0xea, 0x2a,
	0x0a, 0x7a, 0xf0, 0x36, 0xf1, 0xe0, 0x45, 0x46, 0xf5, 0xe4, 0xa5, 0xa4, 0xd9, 0xe3, 0x1a, 0xd6,
	0x34, 0xb1, 0x79, 0xaa, 0xdb, 0x2b, 0xf2, 0x6d, 0x4a, 0xd3, 0x51, 0xea, 0x2d, 0xf9, 0xe6, 0x43,
	0x0e, 0x3f, 0x7a, 0x62, 0xd3, 0xc8, 0x9a, 0x1f, 0x28, 0x5d, 0x06, 0x79, 0x9e, 0xc0, 0x37, 0x14,
	0x38, 0xb7, 0xa5, 0x41, 0xc3, 0xc6, 0x4e, 0x66, 0xa0, 0x85, 0x3b, 0xff, 0xed, 0xd1, 0xe9, 0xb2,
	0x35, 0xcf, 0x35, 0x61, 0x8c, 0x0e, 0x50, 0x69, 0xe0, 0x24, 0x20, 0x61, 0x3f, 0xf6, 0x67, 0x76,
	0x4a, 0x27, 0x2b, 0x81, 0xe0, 0x7b, 0x2f, 0x20, 0xe1, 0x41, 0xdc, 0xde, 0xd9, 0x05, 0x9d, 0x3a,
	0x59, 0x2a, 0x8b, 0x49, 0x9a, 0x1b, 0xb9, 0x49, 0xd4, 0x8a, 0xf7, 0x3d, 0x39, 0x6a, 0xf2, 0xa2,
	0xae, 0x2f, 0x2b, 0x76, 0x45, 0xd9, 0x3f, 0x27, 0x4d, 0x55, 0x20, 0x1f, 0x04, 0x24, 0x1c, 0xc6,
	0xb3, 0x0e, 0x7d, 0xaa, 0x3b, 0x3b, 0xa3, 0x87, 0x7b, 0x8d, 0xb0, 0x45, 0x3e, 0xf4, 0x3f, 0xd2,
	0x26, 0xbd, 0xc3, 0xb6, 0x0b, 0x0a, 0xa1, 0x81, 0x8f, 0xba, 0xe0, 0x55, 0x68, 0xe8, 0x00, 0x2b,
	0x30, 0xe3, 0xe3, 0x2e, 0x58, 0x0a, 0xcc, 0xd8, 0x25, 0x3d, 0x96, 0xc6, 0xa9, 0x02, 0x12, 0xa7,
	0xb4, 0xca, 0x45, 0xa9, 0x70, 0xc7, 0x27, 0x01, 0x09, 0x49, 0x3c, 0x6b, 0x1e, 0xde, 0xda, 0xbe,
	0xb8, 0xfd, 0xb8, 0x59, 0x2b, 0xcc, 0xaa, 0x74, 0x2e, 0x8d, 0x8e, 0xb4, 0x92, 0x1b, 0xb0, 0x0f,
	0xf7, 0x91, 0x71, 0x5f, 0x15, 0x94, 0xbb, 0x6b, 0xbf, 0x6b, 0x5a, 0x7d, 0x46, 0x76, 0xb3, 0x7e,
	0xdc, 0xaf, 0x9b, 0x8e, 0x7c, 0xbd, 0xfb, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x65, 0xa8, 0x16, 0x9a,
	0x8a, 0x01, 0x00, 0x00,
}
