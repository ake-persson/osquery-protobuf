// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/cpu_info.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Retrieve cpu hardware info of the machine.
type CpuInfo struct {
	// The DeviceID of the CPU.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id"`
	// The model of the CPU.
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model"`
	// The manufacturer of the CPU.
	Manufacturer string `protobuf:"bytes,3,opt,name=manufacturer,proto3" json:"manufacturer"`
	// The processor type
	ProcessorType string `protobuf:"bytes,4,opt,name=processor_type,json=processorType,proto3" json:"processor_type"`
	// The availability and status of the CPU.
	Availability string `protobuf:"bytes,5,opt,name=availability,proto3" json:"availability"`
	// The current operating status of the CPU.
	CpuStatus int32 `protobuf:"varint,6,opt,name=cpu_status,json=cpuStatus,proto3" json:"cpu_status"`
	// The number of cores of the CPU.
	NumberOfCores string `protobuf:"bytes,7,opt,name=number_of_cores,json=numberOfCores,proto3" json:"number_of_cores"`
	// The number of logical processors of the CPU.
	LogicalProcessors int32 `protobuf:"varint,8,opt,name=logical_processors,json=logicalProcessors,proto3" json:"logical_processors"`
	// The width of the CPU address bus.
	AddressWidth string `protobuf:"bytes,9,opt,name=address_width,json=addressWidth,proto3" json:"address_width"`
	// The current frequency of the CPU.
	CurrentClockSpeed int32 `protobuf:"varint,10,opt,name=current_clock_speed,json=currentClockSpeed,proto3" json:"current_clock_speed"`
	// The maximum possible frequency of the CPU.
	MaxClockSpeed int32 `protobuf:"varint,11,opt,name=max_clock_speed,json=maxClockSpeed,proto3" json:"max_clock_speed"`
	// The assigned socket on the board for the given CPU.
	SocketDesignation    string   `protobuf:"bytes,12,opt,name=socket_designation,json=socketDesignation,proto3" json:"socket_designation"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CpuInfo) Reset()         { *m = CpuInfo{} }
func (m *CpuInfo) String() string { return proto.CompactTextString(m) }
func (*CpuInfo) ProtoMessage()    {}
func (*CpuInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc1a58699f62176c, []int{0}
}

func (m *CpuInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CpuInfo.Unmarshal(m, b)
}
func (m *CpuInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CpuInfo.Marshal(b, m, deterministic)
}
func (m *CpuInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CpuInfo.Merge(m, src)
}
func (m *CpuInfo) XXX_Size() int {
	return xxx_messageInfo_CpuInfo.Size(m)
}
func (m *CpuInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CpuInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CpuInfo proto.InternalMessageInfo

func (m *CpuInfo) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *CpuInfo) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *CpuInfo) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *CpuInfo) GetProcessorType() string {
	if m != nil {
		return m.ProcessorType
	}
	return ""
}

func (m *CpuInfo) GetAvailability() string {
	if m != nil {
		return m.Availability
	}
	return ""
}

func (m *CpuInfo) GetCpuStatus() int32 {
	if m != nil {
		return m.CpuStatus
	}
	return 0
}

func (m *CpuInfo) GetNumberOfCores() string {
	if m != nil {
		return m.NumberOfCores
	}
	return ""
}

func (m *CpuInfo) GetLogicalProcessors() int32 {
	if m != nil {
		return m.LogicalProcessors
	}
	return 0
}

func (m *CpuInfo) GetAddressWidth() string {
	if m != nil {
		return m.AddressWidth
	}
	return ""
}

func (m *CpuInfo) GetCurrentClockSpeed() int32 {
	if m != nil {
		return m.CurrentClockSpeed
	}
	return 0
}

func (m *CpuInfo) GetMaxClockSpeed() int32 {
	if m != nil {
		return m.MaxClockSpeed
	}
	return 0
}

func (m *CpuInfo) GetSocketDesignation() string {
	if m != nil {
		return m.SocketDesignation
	}
	return ""
}

func init() {
	proto.RegisterType((*CpuInfo)(nil), "schemas.CpuInfo")
}

func init() { proto.RegisterFile("pb/cpu_info.proto", fileDescriptor_cc1a58699f62176c) }

var fileDescriptor_cc1a58699f62176c = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xcf, 0xcb, 0xd3, 0x30,
	0x1c, 0xc6, 0x99, 0xaf, 0x7b, 0xf7, 0x36, 0x6e, 0xca, 0xa2, 0x87, 0x80, 0x08, 0x63, 0xa2, 0xec,
	0xb2, 0x55, 0x14, 0xf4, 0xe0, 0xcd, 0x79, 0xd9, 0x49, 0xd9, 0x04, 0xc1, 0x4b, 0x48, 0x93, 0x6f,
	0xbb, 0xd0, 0xa6, 0x89, 0xf9, 0x31, 0xd7, 0x3f, 0xd2, 0xff, 0x49, 0x9a, 0x94, 0xb9, 0x1d, 0xfb,
	0xf9, 0x3c, 0x3c, 0x7d, 0x42, 0x82, 0xe6, 0xa6, 0xc8, 0xb9, 0x09, 0x54, 0xb6, 0xa5, 0xde, 0x18,
	0xab, 0xbd, 0xc6, 0x13, 0xc7, 0x8f, 0xa0, 0x98, 0x5b, 0xfe, 0xbd, 0x43, 0x93, 0xad, 0x09, 0xbb,
	0xb6, 0xd4, 0xf8, 0x25, 0xca, 0x04, 0x9c, 0x24, 0x07, 0x2a, 0x05, 0x19, 0x2d, 0x46, 0xab, 0x6c,
	0xff, 0x90, 0xc0, 0x4e, 0xe0, 0x17, 0x68, 0xac, 0xb4, 0x80, 0x86, 0x3c, 0x8a, 0x22, 0x7d, 0xe0,
	0x25, 0x9a, 0x2a, 0xd6, 0x86, 0x92, 0x71, 0x1f, 0x2c, 0x58, 0x72, 0x17, 0xe5, 0x0d, 0xc3, 0x6f,
	0xd0, 0x53, 0x63, 0x35, 0x07, 0xe7, 0xb4, 0xa5, 0xbe, 0x33, 0x40, 0x1e, 0xc7, 0xd4, 0xec, 0x42,
	0x7f, 0x74, 0x06, 0xfa, 0x2a, 0x76, 0x62, 0xb2, 0x61, 0x85, 0x6c, 0xa4, 0xef, 0xc8, 0x38, 0x55,
	0x5d, 0x33, 0xfc, 0x0a, 0xa1, 0xfe, 0x20, 0xce, 0x33, 0x1f, 0x1c, 0xb9, 0x5f, 0x8c, 0x56, 0xe3,
	0x7d, 0xc6, 0x4d, 0x38, 0x44, 0x80, 0xdf, 0xa2, 0x67, 0x6d, 0x50, 0x05, 0x58, 0xaa, 0x4b, 0xca,
	0xb5, 0x05, 0x47, 0x26, 0xe9, 0x57, 0x09, 0x7f, 0x2b, 0xb7, 0x3d, 0xc4, 0x6b, 0x84, 0x1b, 0x5d,
	0x49, 0xce, 0x1a, 0x7a, 0xd9, 0xe0, 0xc8, 0x43, 0xac, 0x9b, 0x0f, 0xe6, 0xfb, 0x45, 0xe0, 0xd7,
	0x68, 0xc6, 0x84, 0xb0, 0xe0, 0x1c, 0xfd, 0x23, 0x85, 0x3f, 0x92, 0x6c, 0x98, 0x96, 0xe0, 0xcf,
	0x9e, 0xe1, 0x0d, 0x7a, 0xce, 0x83, 0xb5, 0xd0, 0x7a, 0xca, 0x1b, 0xcd, 0x6b, 0xea, 0x0c, 0x80,
	0x20, 0x28, 0x95, 0x0e, 0x6a, 0xdb, 0x9b, 0x43, 0x2f, 0xfa, 0xad, 0x8a, 0x9d, 0x6f, 0xb2, 0x4f,
	0x62, 0x76, 0xa6, 0xd8, 0xf9, 0x2a, 0xb7, 0x46, 0xd8, 0x69, 0x5e, 0x83, 0xa7, 0x02, 0x9c, 0xac,
	0x5a, 0xe6, 0xa5, 0x6e, 0xc9, 0x34, 0x2e, 0x98, 0x27, 0xf3, 0xf5, 0xbf, 0xf8, 0xf2, 0xfe, 0xd7,
	0xbb, 0x4a, 0xfa, 0x63, 0x28, 0x36, 0x5c, 0xab, 0x5c, 0x49, 0x5e, 0x83, 0xf9, 0xf4, 0x31, 0xd7,
	0xee, 0x77, 0x00, 0xdb, 0xad, 0xe3, 0xed, 0x17, 0xa1, 0xcc, 0x4d, 0x5d, 0x7d, 0x1e, 0xde, 0x40,
	0x71, 0x1f, 0xe9, 0x87, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x2c, 0xce, 0x2d, 0x28, 0x02,
	0x00, 0x00,
}
