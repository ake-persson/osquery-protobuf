// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/os_version.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A single row containing the operating system name and version.
type OsVersion struct {
	// Distribution or product name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	// Pretty
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version"`
	// Major release version
	Major int32 `protobuf:"varint,3,opt,name=major,proto3" json:"major"`
	// Minor release version
	Minor int32 `protobuf:"varint,4,opt,name=minor,proto3" json:"minor"`
	// Optional patch release
	Patch int32 `protobuf:"varint,5,opt,name=patch,proto3" json:"patch"`
	// Optional build-specific or variant string
	Build string `protobuf:"bytes,6,opt,name=build,proto3" json:"build"`
	// OS Platform or ID
	Platform string `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform"`
	// Closely related platforms
	PlatformLike string `protobuf:"bytes,8,opt,name=platform_like,json=platformLike,proto3" json:"platform_like"`
	// OS version codename
	Codename string `protobuf:"bytes,9,opt,name=codename,proto3" json:"codename"`
	// The install date of the OS.
	InstallDate          string   `protobuf:"bytes,10,opt,name=install_date,json=installDate,proto3" json:"install_date"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OsVersion) Reset()         { *m = OsVersion{} }
func (m *OsVersion) String() string { return proto.CompactTextString(m) }
func (*OsVersion) ProtoMessage()    {}
func (*OsVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_05660366c9cbb8b8, []int{0}
}

func (m *OsVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OsVersion.Unmarshal(m, b)
}
func (m *OsVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OsVersion.Marshal(b, m, deterministic)
}
func (m *OsVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OsVersion.Merge(m, src)
}
func (m *OsVersion) XXX_Size() int {
	return xxx_messageInfo_OsVersion.Size(m)
}
func (m *OsVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_OsVersion.DiscardUnknown(m)
}

var xxx_messageInfo_OsVersion proto.InternalMessageInfo

func (m *OsVersion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OsVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *OsVersion) GetMajor() int32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *OsVersion) GetMinor() int32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *OsVersion) GetPatch() int32 {
	if m != nil {
		return m.Patch
	}
	return 0
}

func (m *OsVersion) GetBuild() string {
	if m != nil {
		return m.Build
	}
	return ""
}

func (m *OsVersion) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *OsVersion) GetPlatformLike() string {
	if m != nil {
		return m.PlatformLike
	}
	return ""
}

func (m *OsVersion) GetCodename() string {
	if m != nil {
		return m.Codename
	}
	return ""
}

func (m *OsVersion) GetInstallDate() string {
	if m != nil {
		return m.InstallDate
	}
	return ""
}

func init() {
	proto.RegisterType((*OsVersion)(nil), "schemas.OsVersion")
}

func init() { proto.RegisterFile("pb/os_version.proto", fileDescriptor_05660366c9cbb8b8) }

var fileDescriptor_05660366c9cbb8b8 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x95, 0xd2, 0x34, 0x8d, 0x29, 0x8b, 0x61, 0xb0, 0x98, 0x0a, 0x2c, 0x5d, 0x68, 0x10,
	0x48, 0x30, 0xb0, 0x21, 0x46, 0x24, 0xa4, 0x0e, 0x0c, 0x2c, 0x91, 0x93, 0x5c, 0x1b, 0x93, 0x38,
	0x67, 0x6c, 0x07, 0x89, 0xc7, 0xe0, 0x8d, 0x51, 0xce, 0x49, 0xb7, 0xfb, 0xbe, 0xdf, 0xfe, 0xa5,
	0x3b, 0x76, 0x6e, 0x8a, 0x0c, 0x5d, 0xfe, 0x03, 0xd6, 0x29, 0xec, 0xb6, 0xc6, 0xa2, 0x47, 0x9e,
	0xb8, 0xb2, 0x06, 0x2d, 0xdd, 0xf5, 0xdf, 0x8c, 0xa5, 0xef, 0xee, 0x23, 0x84, 0x9c, 0xb3, 0x79,
	0x27, 0x35, 0x88, 0x68, 0x1d, 0x6d, 0xd2, 0x1d, 0xcd, 0x5c, 0xb0, 0x64, 0xfc, 0x2b, 0x66, 0xa4,
	0x27, 0xe4, 0x17, 0x2c, 0xd6, 0xf2, 0x0b, 0xad, 0x38, 0x59, 0x47, 0x9b, 0x78, 0x17, 0x80, 0xac,
	0xea, 0xd0, 0x8a, 0xf9, 0x68, 0x07, 0x18, 0xac, 0x91, 0xbe, 0xac, 0x45, 0x1c, 0x2c, 0xc1, 0x60,
	0x8b, 0x5e, 0xb5, 0x95, 0x58, 0x50, 0x73, 0x00, 0x7e, 0xc9, 0x96, 0xa6, 0x95, 0x7e, 0x8f, 0x56,
	0x8b, 0x84, 0x82, 0x23, 0xf3, 0x1b, 0x76, 0x36, 0xcd, 0x79, 0xab, 0x1a, 0x10, 0x4b, 0x7a, 0xb0,
	0x9a, 0xe4, 0x9b, 0x6a, 0x60, 0x28, 0x28, 0xb1, 0x02, 0x5a, 0x25, 0x0d, 0x05, 0x13, 0xf3, 0x2b,
	0xb6, 0x52, 0x9d, 0xf3, 0xb2, 0x6d, 0xf3, 0x4a, 0x7a, 0x10, 0x8c, 0xf2, 0xd3, 0xd1, 0xbd, 0x4a,
	0x0f, 0x2f, 0xf7, 0x9f, 0x77, 0x07, 0xe5, 0xeb, 0xbe, 0xd8, 0x96, 0xa8, 0x33, 0xad, 0xca, 0x06,
	0xcc, 0xd3, 0x63, 0x86, 0xee, 0xbb, 0x07, 0xfb, 0x7b, 0x4b, 0x17, 0x2c, 0xfa, 0x7d, 0x66, 0x9a,
	0xc3, 0xf3, 0x78, 0xc7, 0x62, 0x41, 0xf6, 0xe1, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x80, 0xfb,
	0x9f, 0x6e, 0x01, 0x00, 0x00,
}
