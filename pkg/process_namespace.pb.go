// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/process_namespace.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Linux namespaces for processes running on the host system.
type ProcessNamespace struct {
	// Process (or thread) ID
	Pid int32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid"`
	// cgroup namespace inode
	CgroupNamespace string `protobuf:"bytes,2,opt,name=cgroup_namespace,json=cgroupNamespace,proto3" json:"cgroup_namespace"`
	// ipc namespace inode
	IpcNamespace string `protobuf:"bytes,3,opt,name=ipc_namespace,json=ipcNamespace,proto3" json:"ipc_namespace"`
	// mnt namespace inode
	MntNamespace string `protobuf:"bytes,4,opt,name=mnt_namespace,json=mntNamespace,proto3" json:"mnt_namespace"`
	// net namespace inode
	NetNamespace string `protobuf:"bytes,5,opt,name=net_namespace,json=netNamespace,proto3" json:"net_namespace"`
	// pid namespace inode
	PidNamespace string `protobuf:"bytes,6,opt,name=pid_namespace,json=pidNamespace,proto3" json:"pid_namespace"`
	// user namespace inode
	UserNamespace string `protobuf:"bytes,7,opt,name=user_namespace,json=userNamespace,proto3" json:"user_namespace"`
	// uts namespace inode
	UtsNamespace         string   `protobuf:"bytes,8,opt,name=uts_namespace,json=utsNamespace,proto3" json:"uts_namespace"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessNamespace) Reset()         { *m = ProcessNamespace{} }
func (m *ProcessNamespace) String() string { return proto.CompactTextString(m) }
func (*ProcessNamespace) ProtoMessage()    {}
func (*ProcessNamespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_40baf858f88deb79, []int{0}
}

func (m *ProcessNamespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessNamespace.Unmarshal(m, b)
}
func (m *ProcessNamespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessNamespace.Marshal(b, m, deterministic)
}
func (m *ProcessNamespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessNamespace.Merge(m, src)
}
func (m *ProcessNamespace) XXX_Size() int {
	return xxx_messageInfo_ProcessNamespace.Size(m)
}
func (m *ProcessNamespace) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessNamespace.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessNamespace proto.InternalMessageInfo

func (m *ProcessNamespace) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcessNamespace) GetCgroupNamespace() string {
	if m != nil {
		return m.CgroupNamespace
	}
	return ""
}

func (m *ProcessNamespace) GetIpcNamespace() string {
	if m != nil {
		return m.IpcNamespace
	}
	return ""
}

func (m *ProcessNamespace) GetMntNamespace() string {
	if m != nil {
		return m.MntNamespace
	}
	return ""
}

func (m *ProcessNamespace) GetNetNamespace() string {
	if m != nil {
		return m.NetNamespace
	}
	return ""
}

func (m *ProcessNamespace) GetPidNamespace() string {
	if m != nil {
		return m.PidNamespace
	}
	return ""
}

func (m *ProcessNamespace) GetUserNamespace() string {
	if m != nil {
		return m.UserNamespace
	}
	return ""
}

func (m *ProcessNamespace) GetUtsNamespace() string {
	if m != nil {
		return m.UtsNamespace
	}
	return ""
}

func init() {
	proto.RegisterType((*ProcessNamespace)(nil), "schemas.ProcessNamespace")
}

func init() { proto.RegisterFile("pb/process_namespace.proto", fileDescriptor_40baf858f88deb79) }

var fileDescriptor_40baf858f88deb79 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xd0, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0x06, 0x70, 0xb6, 0xb5, 0xad, 0x06, 0xab, 0xcb, 0x9e, 0x16, 0x4f, 0x45, 0x11, 0xea, 0xc1,
	0xae, 0x28, 0xe8, 0xc1, 0x9b, 0x0f, 0x20, 0xd2, 0xa3, 0x17, 0xd9, 0xcc, 0x8e, 0xdb, 0x50, 0x92,
	0x8c, 0xf9, 0x73, 0xf0, 0xa9, 0x7c, 0x45, 0x69, 0xa2, 0x24, 0xb9, 0x0d, 0x1f, 0xbf, 0xf9, 0x0e,
	0x1f, 0xbb, 0x20, 0xde, 0x91, 0xd1, 0x80, 0xd6, 0x7e, 0xa8, 0x5e, 0xa2, 0xa5, 0x1e, 0x70, 0x43,
	0x46, 0x3b, 0xdd, 0x2c, 0x2c, 0xec, 0x50, 0xf6, 0xf6, 0xf2, 0x67, 0xc2, 0xea, 0xb7, 0x88, 0x5e,
	0xff, 0x4d, 0x53, 0xb3, 0x29, 0x89, 0xa1, 0xad, 0x56, 0xd5, 0x7a, 0xb6, 0x3d, 0x9c, 0xcd, 0x0d,
	0xab, 0x61, 0x34, 0xda, 0x53, 0x6a, 0x6a, 0x27, 0xab, 0x6a, 0x7d, 0xb2, 0x3d, 0x8f, 0x79, 0x7a,
	0xbe, 0x62, 0x4b, 0x41, 0x90, 0xb9, 0x69, 0x70, 0xa7, 0x82, 0xa0, 0x40, 0x52, 0xb9, 0x0c, 0x1d,
	0x45, 0x24, 0x95, 0x2b, 0x90, 0xc2, 0x1c, 0xcd, 0x22, 0x52, 0x58, 0x22, 0x12, 0x43, 0x86, 0xe6,
	0x11, 0x91, 0x18, 0x12, 0xba, 0x66, 0x67, 0xde, 0xa2, 0xc9, 0xd4, 0x22, 0xa8, 0xe5, 0x21, 0x2d,
	0xba, 0xbc, 0xcb, 0xc6, 0x6a, 0x8f, 0x63, 0x97, 0x77, 0x69, 0x9c, 0x97, 0xfb, 0xf7, 0xbb, 0x51,
	0xb8, 0x9d, 0xe7, 0x1b, 0xd0, 0xb2, 0x93, 0x02, 0xf6, 0x48, 0x4f, 0x8f, 0x9d, 0xb6, 0x5f, 0x1e,
	0xcd, 0xf7, 0x6d, 0xd8, 0x97, 0xfb, 0xcf, 0x8e, 0xf6, 0xe3, 0xf3, 0xdf, 0xca, 0x7c, 0x1e, 0xd2,
	0x87, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x0c, 0x90, 0xa0, 0x93, 0x01, 0x00, 0x00,
}
