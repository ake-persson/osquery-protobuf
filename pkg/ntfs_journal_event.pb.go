// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/ntfs_journal_event.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Track time/action changes to files specified in configuration data.
type NtfsJournalEvent struct {
	// Change action (Write
	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action"`
	// The category that the event originated from
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category"`
	// Old path (renames only)
	OldPath string `protobuf:"bytes,3,opt,name=old_path,json=oldPath,proto3" json:"old_path"`
	// Path
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path"`
	// Journal record timestamp
	RecordTimestamp string `protobuf:"bytes,5,opt,name=record_timestamp,json=recordTimestamp,proto3" json:"record_timestamp"`
	// The update sequence number that identifies the journal record
	RecordUsn string `protobuf:"bytes,6,opt,name=record_usn,json=recordUsn,proto3" json:"record_usn"`
	// The ordinal that associates a journal record with a filename
	NodeRefNumber string `protobuf:"bytes,7,opt,name=node_ref_number,json=nodeRefNumber,proto3" json:"node_ref_number"`
	// The ordinal that associates a journal record with a filename's parent directory
	ParentRefNumber string `protobuf:"bytes,8,opt,name=parent_ref_number,json=parentRefNumber,proto3" json:"parent_ref_number"`
	// The drive letter identifying the source journal
	DriveLetter string `protobuf:"bytes,9,opt,name=drive_letter,json=driveLetter,proto3" json:"drive_letter"`
	// File attributes
	FileAttributes string `protobuf:"bytes,10,opt,name=file_attributes,json=fileAttributes,proto3" json:"file_attributes"`
	// Set to 1 if either path or old_path only contains the file or folder name
	Partial int64 `protobuf:"varint,11,opt,name=partial,proto3" json:"partial"`
	// Time of file event
	Time int64 `protobuf:"varint,12,opt,name=time,proto3" json:"time"`
	// Event ID
	Eid                  string   `protobuf:"bytes,13,opt,name=eid,proto3" json:"eid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NtfsJournalEvent) Reset()         { *m = NtfsJournalEvent{} }
func (m *NtfsJournalEvent) String() string { return proto.CompactTextString(m) }
func (*NtfsJournalEvent) ProtoMessage()    {}
func (*NtfsJournalEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e130276e2edebb26, []int{0}
}

func (m *NtfsJournalEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NtfsJournalEvent.Unmarshal(m, b)
}
func (m *NtfsJournalEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NtfsJournalEvent.Marshal(b, m, deterministic)
}
func (m *NtfsJournalEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NtfsJournalEvent.Merge(m, src)
}
func (m *NtfsJournalEvent) XXX_Size() int {
	return xxx_messageInfo_NtfsJournalEvent.Size(m)
}
func (m *NtfsJournalEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_NtfsJournalEvent.DiscardUnknown(m)
}

var xxx_messageInfo_NtfsJournalEvent proto.InternalMessageInfo

func (m *NtfsJournalEvent) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *NtfsJournalEvent) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *NtfsJournalEvent) GetOldPath() string {
	if m != nil {
		return m.OldPath
	}
	return ""
}

func (m *NtfsJournalEvent) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *NtfsJournalEvent) GetRecordTimestamp() string {
	if m != nil {
		return m.RecordTimestamp
	}
	return ""
}

func (m *NtfsJournalEvent) GetRecordUsn() string {
	if m != nil {
		return m.RecordUsn
	}
	return ""
}

func (m *NtfsJournalEvent) GetNodeRefNumber() string {
	if m != nil {
		return m.NodeRefNumber
	}
	return ""
}

func (m *NtfsJournalEvent) GetParentRefNumber() string {
	if m != nil {
		return m.ParentRefNumber
	}
	return ""
}

func (m *NtfsJournalEvent) GetDriveLetter() string {
	if m != nil {
		return m.DriveLetter
	}
	return ""
}

func (m *NtfsJournalEvent) GetFileAttributes() string {
	if m != nil {
		return m.FileAttributes
	}
	return ""
}

func (m *NtfsJournalEvent) GetPartial() int64 {
	if m != nil {
		return m.Partial
	}
	return 0
}

func (m *NtfsJournalEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *NtfsJournalEvent) GetEid() string {
	if m != nil {
		return m.Eid
	}
	return ""
}

func init() {
	proto.RegisterType((*NtfsJournalEvent)(nil), "schemas.NtfsJournalEvent")
}

func init() { proto.RegisterFile("pb/ntfs_journal_event.proto", fileDescriptor_e130276e2edebb26) }

var fileDescriptor_e130276e2edebb26 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x41, 0xab, 0x13, 0x31,
	0x10, 0xc7, 0xa9, 0xfb, 0xec, 0xb6, 0xf3, 0x5e, 0x6d, 0xcd, 0x41, 0xa2, 0x22, 0x54, 0x0f, 0x5a,
	0x05, 0xbb, 0xa2, 0xa0, 0x07, 0x4f, 0x0a, 0x5e, 0x44, 0x8a, 0x14, 0xbd, 0x78, 0x09, 0xd9, 0xdd,
	0xd9, 0x6e, 0xec, 0x6e, 0x12, 0x93, 0xd9, 0x42, 0x3f, 0x8d, 0x5f, 0x55, 0x76, 0xb6, 0xad, 0xef,
	0x36, 0xff, 0xdf, 0xff, 0x47, 0x42, 0x32, 0xf0, 0xd8, 0xe7, 0x99, 0xa5, 0x2a, 0xaa, 0xdf, 0xae,
	0x0b, 0x56, 0x37, 0x0a, 0x0f, 0x68, 0x69, 0xed, 0x83, 0x23, 0x27, 0xd2, 0x58, 0xd4, 0xd8, 0xea,
	0xf8, 0xec, 0x6f, 0x02, 0x8b, 0x0d, 0x55, 0xf1, 0xeb, 0x20, 0x7d, 0xe9, 0x1d, 0xf1, 0x00, 0xc6,
	0xba, 0x20, 0xe3, 0xac, 0x1c, 0x2d, 0x47, 0xab, 0xe9, 0xf6, 0x94, 0xc4, 0x23, 0x98, 0x14, 0x9a,
	0x70, 0xe7, 0xc2, 0x51, 0xde, 0xe1, 0xe6, 0x92, 0xc5, 0x43, 0x98, 0xb8, 0xa6, 0x54, 0x5e, 0x53,
	0x2d, 0x13, 0xee, 0x52, 0xd7, 0x94, 0xdf, 0x35, 0xd5, 0x42, 0xc0, 0x15, 0xe3, 0x2b, 0xc6, 0x3c,
	0x8b, 0x97, 0xb0, 0x08, 0x58, 0xb8, 0x50, 0x2a, 0x32, 0x2d, 0x46, 0xd2, 0xad, 0x97, 0x77, 0xb9,
	0x9f, 0x0f, 0xfc, 0xc7, 0x19, 0x8b, 0x27, 0x00, 0x27, 0xb5, 0x8b, 0x56, 0x8e, 0x59, 0x9a, 0x0e,
	0xe4, 0x67, 0xb4, 0xe2, 0x39, 0xcc, 0xad, 0x2b, 0x51, 0x05, 0xac, 0x94, 0xed, 0xda, 0x1c, 0x83,
	0x4c, 0xd9, 0x99, 0xf5, 0x78, 0x8b, 0xd5, 0x86, 0xa1, 0x78, 0x05, 0xf7, 0xbd, 0x0e, 0x68, 0xe9,
	0xb6, 0x39, 0x19, 0xae, 0x1c, 0x8a, 0xff, 0xee, 0x53, 0xb8, 0x29, 0x83, 0x39, 0xa0, 0x6a, 0x90,
	0x08, 0x83, 0x9c, 0xb2, 0x76, 0xcd, 0xec, 0x1b, 0x23, 0xf1, 0x02, 0xe6, 0x95, 0x69, 0x50, 0x69,
	0xa2, 0x60, 0xf2, 0x8e, 0x30, 0x4a, 0x60, 0xeb, 0x5e, 0x8f, 0x3f, 0x5d, 0xa8, 0x90, 0x90, 0x7a,
	0x1d, 0xc8, 0xe8, 0x46, 0x5e, 0x2f, 0x47, 0xab, 0x64, 0x7b, 0x8e, 0xfd, 0xbf, 0xf4, 0x8f, 0x97,
	0x37, 0x8c, 0x79, 0x16, 0x0b, 0x48, 0xd0, 0x94, 0x72, 0xc6, 0x47, 0xf5, 0xe3, 0xe7, 0xb7, 0xbf,
	0xde, 0xec, 0x0c, 0xd5, 0x5d, 0xbe, 0x2e, 0x5c, 0x9b, 0xb5, 0xa6, 0xd8, 0xa3, 0xff, 0xf0, 0x3e,
	0x73, 0xf1, 0x4f, 0x87, 0xe1, 0xf8, 0x9a, 0xf7, 0x99, 0x77, 0x55, 0xe6, 0xf7, 0xbb, 0x8f, 0xa7,
	0xad, 0xe6, 0x63, 0xa6, 0xef, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x8c, 0xde, 0x31, 0x04,
	0x02, 0x00, 0x00,
}
