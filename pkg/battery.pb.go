// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/battery.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Provides information about the internal battery of a Macbook.
type Battery struct {
	// The battery manufacturer's name
	Manufacturer string `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer"`
	// The date the battery was manufactured UNIX Epoch
	ManufactureDate int32 `protobuf:"varint,2,opt,name=manufacture_date,json=manufactureDate,proto3" json:"manufacture_date"`
	// The battery's model number
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model"`
	// The battery's unique serial number
	SerialNumber string `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number"`
	// The number of charge/discharge cycles
	CycleCount int32 `protobuf:"varint,5,opt,name=cycle_count,json=cycleCount,proto3" json:"cycle_count"`
	// One of the following: \"Good\" describes a well-performing battery
	Health string `protobuf:"bytes,6,opt,name=health,proto3" json:"health"`
	// One of the following: \"Normal\" indicates the condition of the battery is within normal tolerances
	Condition string `protobuf:"bytes,7,opt,name=condition,proto3" json:"condition"`
	// One of the following: \"AC Power\" indicates the battery is connected to an external power source
	State string `protobuf:"bytes,8,opt,name=state,proto3" json:"state"`
	// 1 if the battery is currently being charged by a power source. 0 otherwise
	Charging int32 `protobuf:"varint,9,opt,name=charging,proto3" json:"charging"`
	// 1 if the battery is currently completely charged. 0 otherwise
	Charged int32 `protobuf:"varint,10,opt,name=charged,proto3" json:"charged"`
	// The battery's designed capacity in mAh
	DesignedCapacity int32 `protobuf:"varint,11,opt,name=designed_capacity,json=designedCapacity,proto3" json:"designed_capacity"`
	// The battery's actual capacity when it is fully charged in mAh
	MaxCapacity int32 `protobuf:"varint,12,opt,name=max_capacity,json=maxCapacity,proto3" json:"max_capacity"`
	// The battery's current charged capacity in mAh
	CurrentCapacity int32 `protobuf:"varint,13,opt,name=current_capacity,json=currentCapacity,proto3" json:"current_capacity"`
	// The percentage of battery remaining before it is drained
	PercentRemaining int32 `protobuf:"varint,14,opt,name=percent_remaining,json=percentRemaining,proto3" json:"percent_remaining"`
	// The battery's current amperage in mA
	Amperage int32 `protobuf:"varint,15,opt,name=amperage,proto3" json:"amperage"`
	// The battery's current voltage in mV
	Voltage int32 `protobuf:"varint,16,opt,name=voltage,proto3" json:"voltage"`
	// The number of minutes until the battery is fully depleted. This value is -1 if this time is still being calculated
	MinutesUntilEmpty int32 `protobuf:"varint,17,opt,name=minutes_until_empty,json=minutesUntilEmpty,proto3" json:"minutes_until_empty"`
	// The number of minutes until the battery is fully charged. This value is -1 if this time is still being calculated
	MinutesToFullCharge  int32    `protobuf:"varint,18,opt,name=minutes_to_full_charge,json=minutesToFullCharge,proto3" json:"minutes_to_full_charge"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Battery) Reset()         { *m = Battery{} }
func (m *Battery) String() string { return proto.CompactTextString(m) }
func (*Battery) ProtoMessage()    {}
func (*Battery) Descriptor() ([]byte, []int) {
	return fileDescriptor_52469dac72085758, []int{0}
}

func (m *Battery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Battery.Unmarshal(m, b)
}
func (m *Battery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Battery.Marshal(b, m, deterministic)
}
func (m *Battery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Battery.Merge(m, src)
}
func (m *Battery) XXX_Size() int {
	return xxx_messageInfo_Battery.Size(m)
}
func (m *Battery) XXX_DiscardUnknown() {
	xxx_messageInfo_Battery.DiscardUnknown(m)
}

var xxx_messageInfo_Battery proto.InternalMessageInfo

func (m *Battery) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Battery) GetManufactureDate() int32 {
	if m != nil {
		return m.ManufactureDate
	}
	return 0
}

func (m *Battery) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Battery) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Battery) GetCycleCount() int32 {
	if m != nil {
		return m.CycleCount
	}
	return 0
}

func (m *Battery) GetHealth() string {
	if m != nil {
		return m.Health
	}
	return ""
}

func (m *Battery) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

func (m *Battery) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Battery) GetCharging() int32 {
	if m != nil {
		return m.Charging
	}
	return 0
}

func (m *Battery) GetCharged() int32 {
	if m != nil {
		return m.Charged
	}
	return 0
}

func (m *Battery) GetDesignedCapacity() int32 {
	if m != nil {
		return m.DesignedCapacity
	}
	return 0
}

func (m *Battery) GetMaxCapacity() int32 {
	if m != nil {
		return m.MaxCapacity
	}
	return 0
}

func (m *Battery) GetCurrentCapacity() int32 {
	if m != nil {
		return m.CurrentCapacity
	}
	return 0
}

func (m *Battery) GetPercentRemaining() int32 {
	if m != nil {
		return m.PercentRemaining
	}
	return 0
}

func (m *Battery) GetAmperage() int32 {
	if m != nil {
		return m.Amperage
	}
	return 0
}

func (m *Battery) GetVoltage() int32 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *Battery) GetMinutesUntilEmpty() int32 {
	if m != nil {
		return m.MinutesUntilEmpty
	}
	return 0
}

func (m *Battery) GetMinutesToFullCharge() int32 {
	if m != nil {
		return m.MinutesToFullCharge
	}
	return 0
}

func init() {
	proto.RegisterType((*Battery)(nil), "schemas.Battery")
}

func init() { proto.RegisterFile("pb/battery.proto", fileDescriptor_52469dac72085758) }

var fileDescriptor_52469dac72085758 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xcd, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x55, 0x58, 0xdb, 0xd5, 0xdd, 0x58, 0x6a, 0xd0, 0x64, 0x21, 0x24, 0xc6, 0xb8, 0x6c,
	0x9a, 0x68, 0x10, 0x93, 0xe0, 0xc0, 0x6d, 0x05, 0x8e, 0x1c, 0x2a, 0xb8, 0x70, 0x89, 0x1c, 0xe7,
	0x6d, 0x62, 0xcd, 0x1f, 0xc1, 0x79, 0x8d, 0x96, 0x3f, 0x9d, 0x1b, 0xb2, 0x9d, 0xb4, 0xe3, 0xe6,
	0xe7, 0xf7, 0x3c, 0xf6, 0xfb, 0x21, 0x93, 0xac, 0x2d, 0xf3, 0x92, 0x23, 0x82, 0xeb, 0xd7, 0xad,
	0xb3, 0x68, 0xe9, 0xbc, 0x13, 0x0d, 0x68, 0xde, 0x5d, 0xfe, 0x3d, 0x22, 0xf3, 0xbb, 0x64, 0xd1,
	0x4b, 0x72, 0xa2, 0xb9, 0xf1, 0x3b, 0x2e, 0xd0, 0x3b, 0x70, 0x6c, 0x72, 0x31, 0xb9, 0x5a, 0x6c,
	0xff, 0x63, 0xf4, 0x9a, 0x64, 0x8f, 0x74, 0x51, 0x71, 0x04, 0xf6, 0xe4, 0x62, 0x72, 0x35, 0xdd,
	0x9e, 0x3d, 0xe2, 0x5f, 0x38, 0x02, 0x7d, 0x41, 0xa6, 0xda, 0x56, 0xa0, 0xd8, 0xd3, 0xf8, 0x4e,
	0x12, 0xf4, 0x2d, 0x39, 0xed, 0xc0, 0x49, 0xae, 0x0a, 0xe3, 0x75, 0x09, 0x8e, 0x1d, 0xa5, 0x2a,
	0x09, 0x7e, 0x8f, 0x8c, 0xbe, 0x26, 0x4b, 0xd1, 0x0b, 0x05, 0x85, 0xb0, 0xde, 0x20, 0x9b, 0xc6,
	0x02, 0x24, 0xa2, 0x4d, 0x20, 0xf4, 0x9c, 0xcc, 0x1a, 0xe0, 0x0a, 0x1b, 0x36, 0x8b, 0xd7, 0x07,
	0x45, 0x5f, 0x91, 0x85, 0xb0, 0xa6, 0x92, 0x28, 0xad, 0x61, 0xf3, 0x68, 0x1d, 0x40, 0xe8, 0xa8,
	0xc3, 0xd0, 0xf1, 0x71, 0xea, 0x28, 0x0a, 0xfa, 0x92, 0x1c, 0x8b, 0x86, 0xbb, 0x5a, 0x9a, 0x9a,
	0x2d, 0x62, 0xa5, 0xbd, 0xa6, 0x8c, 0xcc, 0xe3, 0x19, 0x2a, 0x46, 0xa2, 0x35, 0x4a, 0x7a, 0x43,
	0x56, 0x15, 0x74, 0xb2, 0x36, 0x50, 0x15, 0x82, 0xb7, 0x5c, 0x48, 0xec, 0xd9, 0x32, 0x66, 0xb2,
	0xd1, 0xd8, 0x0c, 0x9c, 0xbe, 0x09, 0x9b, 0x7d, 0x38, 0xe4, 0x4e, 0x62, 0x6e, 0xa9, 0xf9, 0xc3,
	0x3e, 0x72, 0x4d, 0x32, 0xe1, 0x9d, 0x03, 0x83, 0x87, 0xd8, 0x69, 0x5a, 0xec, 0xc0, 0xf7, 0xd1,
	0x1b, 0xb2, 0x6a, 0xc1, 0x89, 0x10, 0x75, 0xa0, 0xb9, 0x34, 0xa1, 0xf3, 0x67, 0xa9, 0xf4, 0x60,
	0x6c, 0x47, 0x1e, 0xa6, 0xe3, 0xba, 0x05, 0xc7, 0x6b, 0x60, 0x67, 0x69, 0xba, 0x51, 0x87, 0xe9,
	0xfe, 0x58, 0x85, 0xc1, 0xca, 0xd2, 0x74, 0x83, 0xa4, 0x6b, 0xf2, 0x5c, 0x4b, 0xe3, 0x11, 0xba,
	0xc2, 0x1b, 0x94, 0xaa, 0x00, 0xdd, 0x62, 0xcf, 0x56, 0x31, 0xb5, 0x1a, 0xac, 0x9f, 0xc1, 0xf9,
	0x1a, 0x0c, 0x7a, 0x4b, 0xce, 0xc7, 0x3c, 0xda, 0x62, 0xe7, 0x95, 0x2a, 0xd2, 0xa2, 0x18, 0x8d,
	0x57, 0xc6, 0xd7, 0x7e, 0xd8, 0x6f, 0x5e, 0xa9, 0x4d, 0xb4, 0xee, 0x3e, 0xfc, 0x7a, 0x5f, 0x4b,
	0x6c, 0x7c, 0xb9, 0x16, 0x56, 0xe7, 0x5a, 0x8a, 0x7b, 0x68, 0x3f, 0x7d, 0xcc, 0x6d, 0xf7, 0xdb,
	0x83, 0xeb, 0xdf, 0xc5, 0x9f, 0x5a, 0xfa, 0x5d, 0xde, 0xde, 0xd7, 0x9f, 0x87, 0xff, 0x5a, 0xce,
	0x22, 0xbd, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0xca, 0x95, 0x2c, 0x60, 0xd3, 0x02, 0x00, 0x00,
}
