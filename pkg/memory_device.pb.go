// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/memory_device.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Physical memory device (type 17) information retrieved from SMBIOS.
type MemoryDevice struct {
	// Handle
	Handle string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle"`
	// The memory array that the device is attached to
	ArrayHandle string `protobuf:"bytes,2,opt,name=array_handle,json=arrayHandle,proto3" json:"array_handle"`
	// Implementation form factor for this memory device
	FormFactor string `protobuf:"bytes,3,opt,name=form_factor,json=formFactor,proto3" json:"form_factor"`
	// Total width
	TotalWidth int32 `protobuf:"varint,4,opt,name=total_width,json=totalWidth,proto3" json:"total_width"`
	// Data width
	DataWidth int32 `protobuf:"varint,5,opt,name=data_width,json=dataWidth,proto3" json:"data_width"`
	// Size of memory device in Megabyte
	Size int32 `protobuf:"varint,6,opt,name=size,proto3" json:"size"`
	// Identifies if memory device is one of a set of devices.  A value of 0 indicates no set affiliation.
	Set int32 `protobuf:"varint,7,opt,name=set,proto3" json:"set"`
	// String number of the string that identifies the physically-labeled socket or board position where the memory device is located
	DeviceLocator string `protobuf:"bytes,8,opt,name=device_locator,json=deviceLocator,proto3" json:"device_locator"`
	// String number of the string that identifies the physically-labeled bank where the memory device is located
	BankLocator string `protobuf:"bytes,9,opt,name=bank_locator,json=bankLocator,proto3" json:"bank_locator"`
	// Type of memory used
	MemoryType string `protobuf:"bytes,10,opt,name=memory_type,json=memoryType,proto3" json:"memory_type"`
	// Additional details for memory device
	MemoryTypeDetails string `protobuf:"bytes,11,opt,name=memory_type_details,json=memoryTypeDetails,proto3" json:"memory_type_details"`
	// Max speed of memory device in megatransfers per second (MT/s)
	MaxSpeed int32 `protobuf:"varint,12,opt,name=max_speed,json=maxSpeed,proto3" json:"max_speed"`
	// Configured speed of memory device in megatransfers per second (MT/s)
	ConfiguredClockSpeed int32 `protobuf:"varint,13,opt,name=configured_clock_speed,json=configuredClockSpeed,proto3" json:"configured_clock_speed"`
	// Manufacturer ID string
	Manufacturer string `protobuf:"bytes,14,opt,name=manufacturer,proto3" json:"manufacturer"`
	// Serial number of memory device
	SerialNumber string `protobuf:"bytes,15,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number"`
	// Manufacturer specific asset tag of memory device
	AssetTag string `protobuf:"bytes,16,opt,name=asset_tag,json=assetTag,proto3" json:"asset_tag"`
	// Manufacturer specific serial number of memory device
	PartNumber string `protobuf:"bytes,17,opt,name=part_number,json=partNumber,proto3" json:"part_number"`
	// Minimum operating voltage of device in millivolts
	MinVoltage int32 `protobuf:"varint,18,opt,name=min_voltage,json=minVoltage,proto3" json:"min_voltage"`
	// Maximum operating voltage of device in millivolts
	MaxVoltage int32 `protobuf:"varint,19,opt,name=max_voltage,json=maxVoltage,proto3" json:"max_voltage"`
	// Configured operating voltage of device in millivolts
	ConfiguredVoltage    int32    `protobuf:"varint,20,opt,name=configured_voltage,json=configuredVoltage,proto3" json:"configured_voltage"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemoryDevice) Reset()         { *m = MemoryDevice{} }
func (m *MemoryDevice) String() string { return proto.CompactTextString(m) }
func (*MemoryDevice) ProtoMessage()    {}
func (*MemoryDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_82fa1e5c1e74249a, []int{0}
}

func (m *MemoryDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemoryDevice.Unmarshal(m, b)
}
func (m *MemoryDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemoryDevice.Marshal(b, m, deterministic)
}
func (m *MemoryDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryDevice.Merge(m, src)
}
func (m *MemoryDevice) XXX_Size() int {
	return xxx_messageInfo_MemoryDevice.Size(m)
}
func (m *MemoryDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryDevice.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryDevice proto.InternalMessageInfo

func (m *MemoryDevice) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *MemoryDevice) GetArrayHandle() string {
	if m != nil {
		return m.ArrayHandle
	}
	return ""
}

func (m *MemoryDevice) GetFormFactor() string {
	if m != nil {
		return m.FormFactor
	}
	return ""
}

func (m *MemoryDevice) GetTotalWidth() int32 {
	if m != nil {
		return m.TotalWidth
	}
	return 0
}

func (m *MemoryDevice) GetDataWidth() int32 {
	if m != nil {
		return m.DataWidth
	}
	return 0
}

func (m *MemoryDevice) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *MemoryDevice) GetSet() int32 {
	if m != nil {
		return m.Set
	}
	return 0
}

func (m *MemoryDevice) GetDeviceLocator() string {
	if m != nil {
		return m.DeviceLocator
	}
	return ""
}

func (m *MemoryDevice) GetBankLocator() string {
	if m != nil {
		return m.BankLocator
	}
	return ""
}

func (m *MemoryDevice) GetMemoryType() string {
	if m != nil {
		return m.MemoryType
	}
	return ""
}

func (m *MemoryDevice) GetMemoryTypeDetails() string {
	if m != nil {
		return m.MemoryTypeDetails
	}
	return ""
}

func (m *MemoryDevice) GetMaxSpeed() int32 {
	if m != nil {
		return m.MaxSpeed
	}
	return 0
}

func (m *MemoryDevice) GetConfiguredClockSpeed() int32 {
	if m != nil {
		return m.ConfiguredClockSpeed
	}
	return 0
}

func (m *MemoryDevice) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *MemoryDevice) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *MemoryDevice) GetAssetTag() string {
	if m != nil {
		return m.AssetTag
	}
	return ""
}

func (m *MemoryDevice) GetPartNumber() string {
	if m != nil {
		return m.PartNumber
	}
	return ""
}

func (m *MemoryDevice) GetMinVoltage() int32 {
	if m != nil {
		return m.MinVoltage
	}
	return 0
}

func (m *MemoryDevice) GetMaxVoltage() int32 {
	if m != nil {
		return m.MaxVoltage
	}
	return 0
}

func (m *MemoryDevice) GetConfiguredVoltage() int32 {
	if m != nil {
		return m.ConfiguredVoltage
	}
	return 0
}

func init() {
	proto.RegisterType((*MemoryDevice)(nil), "schemas.MemoryDevice")
}

func init() { proto.RegisterFile("pb/memory_device.proto", fileDescriptor_82fa1e5c1e74249a) }

var fileDescriptor_82fa1e5c1e74249a = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x51, 0x6f, 0xd3, 0x30,
	0x10, 0xc7, 0x55, 0xb6, 0x76, 0xed, 0xb5, 0x1d, 0xab, 0x37, 0x55, 0x96, 0x10, 0xda, 0x18, 0x42,
	0xda, 0xcb, 0x5a, 0x04, 0x08, 0x1e, 0x78, 0x83, 0x09, 0xf1, 0x00, 0x3c, 0x8c, 0x09, 0x24, 0x5e,
	0xac, 0x4b, 0x72, 0x4d, 0xa3, 0xc6, 0x71, 0xb0, 0x9d, 0xd1, 0xf2, 0xc1, 0xf8, 0x7c, 0xc8, 0xe7,
	0x74, 0xdd, 0xde, 0xec, 0xdf, 0xff, 0x77, 0xca, 0xdd, 0xc5, 0x30, 0xad, 0x93, 0xb9, 0x26, 0x6d,
	0xec, 0x46, 0x65, 0x74, 0x5b, 0xa4, 0x34, 0xab, 0xad, 0xf1, 0x46, 0x1c, 0xb8, 0x74, 0x49, 0x1a,
	0xdd, 0xf9, 0xbf, 0x2e, 0x8c, 0xbe, 0xb2, 0x70, 0xc5, 0xb9, 0x98, 0x42, 0x6f, 0x89, 0x55, 0x56,
	0x92, 0xec, 0x9c, 0x75, 0x2e, 0x06, 0xd7, 0xed, 0x4d, 0x3c, 0x83, 0x11, 0x5a, 0x8b, 0x1b, 0xd5,
	0xa6, 0x8f, 0x38, 0x1d, 0x32, 0xfb, 0x1c, 0x95, 0x53, 0x18, 0x2e, 0x8c, 0xd5, 0x6a, 0x81, 0xa9,
	0x37, 0x56, 0xee, 0xb1, 0x01, 0x01, 0x7d, 0x62, 0x12, 0x04, 0x6f, 0x3c, 0x96, 0xea, 0x4f, 0x91,
	0xf9, 0xa5, 0xdc, 0x3f, 0xeb, 0x5c, 0x74, 0xaf, 0x81, 0xd1, 0xcf, 0x40, 0xc4, 0x53, 0x80, 0x0c,
	0x3d, 0xb6, 0x79, 0x97, 0xf3, 0x41, 0x20, 0x31, 0x16, 0xb0, 0xef, 0x8a, 0xbf, 0x24, 0x7b, 0x1c,
	0xf0, 0x59, 0x1c, 0xc1, 0x9e, 0x23, 0x2f, 0x0f, 0x18, 0x85, 0xa3, 0x78, 0x01, 0x87, 0x71, 0x56,
	0x55, 0x9a, 0x14, 0x43, 0x27, 0x7d, 0xee, 0x64, 0x1c, 0xe9, 0x97, 0x08, 0xc3, 0x40, 0x09, 0x56,
	0xab, 0x3b, 0x69, 0x10, 0x07, 0x0a, 0x6c, 0xab, 0x9c, 0xc2, 0xb0, 0x5d, 0x9e, 0xdf, 0xd4, 0x24,
	0x21, 0x0e, 0x14, 0xd1, 0xcd, 0xa6, 0x26, 0x31, 0x83, 0xe3, 0x7b, 0x82, 0xca, 0xc8, 0x63, 0x51,
	0x3a, 0x39, 0x64, 0x71, 0xb2, 0x13, 0xaf, 0x62, 0x20, 0x9e, 0xc0, 0x40, 0xe3, 0x5a, 0xb9, 0x9a,
	0x28, 0x93, 0x23, 0x6e, 0xb9, 0xaf, 0x71, 0xfd, 0x3d, 0xdc, 0xc5, 0x1b, 0x98, 0xa6, 0xa6, 0x5a,
	0x14, 0x79, 0x63, 0x29, 0x53, 0x69, 0x69, 0xd2, 0x55, 0x6b, 0x8e, 0xd9, 0x3c, 0xd9, 0xa5, 0x1f,
	0x43, 0x18, 0xab, 0xce, 0x61, 0xa4, 0xb1, 0x6a, 0xc2, 0xce, 0x1b, 0x4b, 0x56, 0x1e, 0xf2, 0xb7,
	0x1f, 0x30, 0xf1, 0x1c, 0xc6, 0x8e, 0x6c, 0x81, 0xa5, 0xaa, 0x1a, 0x9d, 0x90, 0x95, 0x8f, 0xa3,
	0x14, 0xe1, 0x37, 0x66, 0xa1, 0x37, 0x74, 0x8e, 0xbc, 0xf2, 0x98, 0xcb, 0x23, 0x16, 0xfa, 0x0c,
	0x6e, 0x30, 0x0f, 0x9b, 0xa8, 0xd1, 0xfa, 0x6d, 0xfd, 0x24, 0x6e, 0x22, 0xa0, 0xb6, 0x3a, 0xac,
	0xaa, 0xa8, 0xd4, 0xad, 0x29, 0x3d, 0xe6, 0x24, 0x45, 0xfc, 0xb5, 0xba, 0xa8, 0x7e, 0x44, 0xc2,
	0x02, 0xae, 0xef, 0x84, 0xe3, 0x56, 0xc0, 0xf5, 0x56, 0xb8, 0x04, 0x71, 0x6f, 0xfc, 0xad, 0x77,
	0xc2, 0xde, 0x64, 0x97, 0xb4, 0xfa, 0x87, 0x57, 0xbf, 0x5e, 0xe6, 0x85, 0x5f, 0x36, 0xc9, 0x2c,
	0x35, 0x7a, 0xae, 0x8b, 0x74, 0x45, 0xf5, 0xbb, 0xb7, 0x73, 0xe3, 0x7e, 0x37, 0x64, 0x37, 0x97,
	0xfc, 0xcc, 0x93, 0x66, 0x31, 0xaf, 0x57, 0xf9, 0xfb, 0xf6, 0xb1, 0x27, 0x3d, 0xa6, 0xaf, 0xff,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x35, 0xf9, 0x2d, 0xdc, 0x16, 0x03, 0x00, 0x00,
}
