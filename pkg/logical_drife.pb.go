// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/logical_drife.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Details for logical drives on the system. A logical drive generally represents a single partition.
type LogicalDrife struct {
	// The drive id
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id"`
	// Deprecated (always 'Unknown').
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
	// The canonical description of the drive
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description"`
	// The amount of free space
	FreeSpace int64 `protobuf:"varint,4,opt,name=free_space,json=freeSpace,proto3" json:"free_space"`
	// The total amount of space
	Size int64 `protobuf:"varint,5,opt,name=size,proto3" json:"size"`
	// The file system of the drive.
	FileSystem string `protobuf:"bytes,6,opt,name=file_system,json=fileSystem,proto3" json:"file_system"`
	// True if Windows booted from this drive.
	BootPartition        int32    `protobuf:"varint,7,opt,name=boot_partition,json=bootPartition,proto3" json:"boot_partition"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogicalDrife) Reset()         { *m = LogicalDrife{} }
func (m *LogicalDrife) String() string { return proto.CompactTextString(m) }
func (*LogicalDrife) ProtoMessage()    {}
func (*LogicalDrife) Descriptor() ([]byte, []int) {
	return fileDescriptor_14848ddd3429f414, []int{0}
}

func (m *LogicalDrife) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalDrife.Unmarshal(m, b)
}
func (m *LogicalDrife) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalDrife.Marshal(b, m, deterministic)
}
func (m *LogicalDrife) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalDrife.Merge(m, src)
}
func (m *LogicalDrife) XXX_Size() int {
	return xxx_messageInfo_LogicalDrife.Size(m)
}
func (m *LogicalDrife) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalDrife.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalDrife proto.InternalMessageInfo

func (m *LogicalDrife) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *LogicalDrife) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LogicalDrife) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *LogicalDrife) GetFreeSpace() int64 {
	if m != nil {
		return m.FreeSpace
	}
	return 0
}

func (m *LogicalDrife) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *LogicalDrife) GetFileSystem() string {
	if m != nil {
		return m.FileSystem
	}
	return ""
}

func (m *LogicalDrife) GetBootPartition() int32 {
	if m != nil {
		return m.BootPartition
	}
	return 0
}

func init() {
	proto.RegisterType((*LogicalDrife)(nil), "schemas.LogicalDrife")
}

func init() { proto.RegisterFile("pb/logical_drife.proto", fileDescriptor_14848ddd3429f414) }

var fileDescriptor_14848ddd3429f414 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xd0, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0x05, 0x70, 0xea, 0xfe, 0xb3, 0xb3, 0xea, 0x21, 0x07, 0x09, 0x88, 0x58, 0x04, 0xa1, 0x17,
	0xb7, 0xa2, 0xa0, 0x07, 0x6f, 0xe2, 0x45, 0xf0, 0x20, 0xdd, 0x9b, 0x97, 0xd2, 0xa6, 0xd3, 0xee,
	0xb0, 0xad, 0x89, 0x49, 0x2a, 0xd4, 0xcf, 0xea, 0x87, 0x91, 0xcc, 0x2a, 0xec, 0x6d, 0xf8, 0xbd,
	0xf0, 0x02, 0x0f, 0x4e, 0x4d, 0x95, 0x75, 0xba, 0x25, 0x55, 0x76, 0x45, 0x6d, 0xa9, 0xc1, 0x95,
	0xb1, 0xda, 0x6b, 0xb1, 0x70, 0x6a, 0x83, 0x7d, 0xe9, 0x2e, 0x7f, 0x22, 0x38, 0x7a, 0xdd, 0x3d,
	0x78, 0x0e, 0xb9, 0x38, 0x83, 0xb8, 0xc6, 0x2f, 0x52, 0x58, 0x50, 0x2d, 0xa3, 0x24, 0x4a, 0xe3,
	0xfc, 0x70, 0x07, 0x2f, 0xb5, 0x10, 0x30, 0xf5, 0xa3, 0x41, 0x79, 0xc0, 0xce, 0xb7, 0x48, 0x60,
	0x59, 0xa3, 0x53, 0x96, 0x8c, 0x27, 0xfd, 0x21, 0x27, 0x1c, 0xed, 0x93, 0x38, 0x07, 0x68, 0x2c,
	0x62, 0xe1, 0x4c, 0xa9, 0x50, 0x4e, 0x93, 0x28, 0x9d, 0xe4, 0x71, 0x90, 0x75, 0x80, 0x50, 0xea,
	0xe8, 0x1b, 0xe5, 0x8c, 0x03, 0xbe, 0xc5, 0x05, 0x2c, 0x1b, 0xea, 0xb0, 0x70, 0xa3, 0xf3, 0xd8,
	0xcb, 0x39, 0x97, 0x42, 0xa0, 0x35, 0x8b, 0xb8, 0x82, 0x93, 0x4a, 0x6b, 0x5f, 0x98, 0xd2, 0x7a,
	0xe2, 0x8f, 0x17, 0x49, 0x94, 0xce, 0xf2, 0xe3, 0xa0, 0x6f, 0xff, 0xf8, 0x74, 0xfb, 0x7e, 0xd3,
	0x92, 0xdf, 0x0c, 0xd5, 0x4a, 0xe9, 0x3e, 0xeb, 0x49, 0x6d, 0xd1, 0x3c, 0xdc, 0x67, 0xda, 0x7d,
	0x0e, 0x68, 0xc7, 0x6b, 0x1e, 0xa3, 0x1a, 0x9a, 0xcc, 0x6c, 0xdb, 0xc7, 0xbf, 0x49, 0xaa, 0x39,
	0xeb, 0xdd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08, 0x19, 0xdc, 0xb1, 0x3c, 0x01, 0x00, 0x00,
}
