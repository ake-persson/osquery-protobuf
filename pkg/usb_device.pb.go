// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/usb_device.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// USB devices that are actively plugged into the host system.
type UsbDevice struct {
	// USB Device used address
	UsbAddress int32 `protobuf:"varint,1,opt,name=usb_address,json=usbAddress,proto3" json:"usb_address"`
	// USB Device used port
	UsbPort int32 `protobuf:"varint,2,opt,name=usb_port,json=usbPort,proto3" json:"usb_port"`
	// USB Device vendor string
	Vendor string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor"`
	// Hex encoded USB Device vendor identifier
	VendorId string `protobuf:"bytes,4,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id"`
	// USB Device version number
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version"`
	// USB Device model string
	Model string `protobuf:"bytes,6,opt,name=model,proto3" json:"model"`
	// Hex encoded USB Device model identifier
	ModelId string `protobuf:"bytes,7,opt,name=model_id,json=modelId,proto3" json:"model_id"`
	// USB Device serial connection
	Serial string `protobuf:"bytes,8,opt,name=serial,proto3" json:"serial"`
	// USB Device class
	Class string `protobuf:"bytes,9,opt,name=class,proto3" json:"class"`
	// USB Device subclass
	Subclass string `protobuf:"bytes,10,opt,name=subclass,proto3" json:"subclass"`
	// USB Device protocol
	Protocol string `protobuf:"bytes,11,opt,name=protocol,proto3" json:"protocol"`
	// 1 If USB device is removable else 0
	Removable            int32    `protobuf:"varint,12,opt,name=removable,proto3" json:"removable"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UsbDevice) Reset()         { *m = UsbDevice{} }
func (m *UsbDevice) String() string { return proto.CompactTextString(m) }
func (*UsbDevice) ProtoMessage()    {}
func (*UsbDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_25ee754f9ee1633b, []int{0}
}

func (m *UsbDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UsbDevice.Unmarshal(m, b)
}
func (m *UsbDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UsbDevice.Marshal(b, m, deterministic)
}
func (m *UsbDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsbDevice.Merge(m, src)
}
func (m *UsbDevice) XXX_Size() int {
	return xxx_messageInfo_UsbDevice.Size(m)
}
func (m *UsbDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_UsbDevice.DiscardUnknown(m)
}

var xxx_messageInfo_UsbDevice proto.InternalMessageInfo

func (m *UsbDevice) GetUsbAddress() int32 {
	if m != nil {
		return m.UsbAddress
	}
	return 0
}

func (m *UsbDevice) GetUsbPort() int32 {
	if m != nil {
		return m.UsbPort
	}
	return 0
}

func (m *UsbDevice) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *UsbDevice) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *UsbDevice) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *UsbDevice) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *UsbDevice) GetModelId() string {
	if m != nil {
		return m.ModelId
	}
	return ""
}

func (m *UsbDevice) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *UsbDevice) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *UsbDevice) GetSubclass() string {
	if m != nil {
		return m.Subclass
	}
	return ""
}

func (m *UsbDevice) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *UsbDevice) GetRemovable() int32 {
	if m != nil {
		return m.Removable
	}
	return 0
}

func init() {
	proto.RegisterType((*UsbDevice)(nil), "schemas.UsbDevice")
}

func init() { proto.RegisterFile("pb/usb_device.proto", fileDescriptor_25ee754f9ee1633b) }

var fileDescriptor_25ee754f9ee1633b = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0x3f, 0x4f, 0xf3, 0x30,
	0x10, 0xc6, 0xd5, 0xbe, 0x6f, 0x9b, 0xe4, 0xca, 0x64, 0x10, 0x32, 0x7f, 0x24, 0x2a, 0xa6, 0x2e,
	0x34, 0x08, 0x24, 0x18, 0x98, 0x40, 0x2c, 0xdd, 0x50, 0x25, 0x16, 0x96, 0x2a, 0xb6, 0x8f, 0xd6,
	0x6a, 0x52, 0x07, 0x5f, 0x1c, 0x89, 0xcf, 0xc8, 0x97, 0x42, 0x3e, 0xb7, 0x62, 0xf3, 0xef, 0xf9,
	0x39, 0xcf, 0x45, 0x67, 0x38, 0x6e, 0x55, 0x19, 0x48, 0xad, 0x0c, 0xf6, 0x56, 0xe3, 0xbc, 0xf5,
	0xae, 0x73, 0x22, 0x23, 0xbd, 0xc1, 0xa6, 0xa2, 0xeb, 0x9f, 0x21, 0x14, 0xef, 0xa4, 0x5e, 0x59,
	0x8a, 0x2b, 0x98, 0xc4, 0xab, 0x95, 0x31, 0x1e, 0x89, 0xe4, 0x60, 0x3a, 0x98, 0x8d, 0x96, 0x10,
	0x48, 0x3d, 0xa7, 0x44, 0x9c, 0x41, 0x1e, 0x2f, 0xb4, 0xce, 0x77, 0x72, 0xc8, 0x36, 0x0b, 0xa4,
	0xde, 0x9c, 0xef, 0xc4, 0x29, 0x8c, 0x7b, 0xdc, 0x19, 0xe7, 0xe5, 0xbf, 0xe9, 0x60, 0x56, 0x2c,
	0xf7, 0x24, 0x2e, 0xa0, 0x48, 0xa7, 0x95, 0x35, 0xf2, 0x3f, 0xab, 0x3c, 0x05, 0x0b, 0x23, 0x24,
	0x64, 0x3d, 0x7a, 0xb2, 0x6e, 0x27, 0x47, 0xac, 0x0e, 0x28, 0x4e, 0x60, 0xd4, 0x38, 0x83, 0xb5,
	0x1c, 0x73, 0x9e, 0x20, 0xce, 0xe7, 0x43, 0xec, 0xca, 0xd2, 0x07, 0xcc, 0x0b, 0x13, 0xe7, 0x13,
	0x7a, 0x5b, 0xd5, 0x32, 0x4f, 0xf3, 0x13, 0xc5, 0x22, 0x5d, 0x57, 0x44, 0xb2, 0x48, 0x45, 0x0c,
	0xe2, 0x1c, 0x72, 0x0a, 0x2a, 0x09, 0x48, 0x3f, 0x75, 0xe0, 0xe8, 0x78, 0x4b, 0xda, 0xd5, 0x72,
	0x92, 0xdc, 0x81, 0xc5, 0x25, 0x14, 0x1e, 0x1b, 0xd7, 0x57, 0xaa, 0x46, 0x79, 0xc4, 0x1b, 0xf8,
	0x0b, 0x5e, 0xee, 0x3e, 0x6e, 0xd7, 0xb6, 0xdb, 0x04, 0x35, 0xd7, 0xae, 0x29, 0x1b, 0xab, 0xb7,
	0xd8, 0x3e, 0x3e, 0x94, 0x8e, 0xbe, 0x02, 0xfa, 0xef, 0x1b, 0x6e, 0x51, 0xe1, 0xb3, 0x6c, 0xb7,
	0xeb, 0xa7, 0xfd, 0x0b, 0xa8, 0x31, 0xa7, 0xf7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x6e,
	0x34, 0xe1, 0xa8, 0x01, 0x00, 0x00,
}
