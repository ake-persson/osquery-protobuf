// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/bitlocker_info.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Retrieve bitlocker status of the machine.
type BitlockerInfo struct {
	// ID of the encrypted drive.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id"`
	// Drive letter of the encrypted drive.
	DriveLetter string `protobuf:"bytes,2,opt,name=drive_letter,json=driveLetter,proto3" json:"drive_letter"`
	// Persistent ID of the drive.
	PersistentVolumeId string `protobuf:"bytes,3,opt,name=persistent_volume_id,json=persistentVolumeId,proto3" json:"persistent_volume_id"`
	// The bitlocker conversion status of the drive.
	ConversionStatus int32 `protobuf:"varint,4,opt,name=conversion_status,json=conversionStatus,proto3" json:"conversion_status"`
	// The bitlocker protection status of the drive.
	ProtectionStatus int32 `protobuf:"varint,5,opt,name=protection_status,json=protectionStatus,proto3" json:"protection_status"`
	// The encryption type of the device.
	EncryptionMethod string `protobuf:"bytes,6,opt,name=encryption_method,json=encryptionMethod,proto3" json:"encryption_method"`
	// The FVE metadata version of the drive.
	Version int32 `protobuf:"varint,7,opt,name=version,proto3" json:"version"`
	// The percentage of the drive that is encrypted.
	PercentageEncrypted int32 `protobuf:"varint,8,opt,name=percentage_encrypted,json=percentageEncrypted,proto3" json:"percentage_encrypted"`
	// The accessibility status of the drive from Windows.
	LockStatus           int32    `protobuf:"varint,9,opt,name=lock_status,json=lockStatus,proto3" json:"lock_status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BitlockerInfo) Reset()         { *m = BitlockerInfo{} }
func (m *BitlockerInfo) String() string { return proto.CompactTextString(m) }
func (*BitlockerInfo) ProtoMessage()    {}
func (*BitlockerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9f2f3533fea19d3, []int{0}
}

func (m *BitlockerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BitlockerInfo.Unmarshal(m, b)
}
func (m *BitlockerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BitlockerInfo.Marshal(b, m, deterministic)
}
func (m *BitlockerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitlockerInfo.Merge(m, src)
}
func (m *BitlockerInfo) XXX_Size() int {
	return xxx_messageInfo_BitlockerInfo.Size(m)
}
func (m *BitlockerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BitlockerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BitlockerInfo proto.InternalMessageInfo

func (m *BitlockerInfo) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *BitlockerInfo) GetDriveLetter() string {
	if m != nil {
		return m.DriveLetter
	}
	return ""
}

func (m *BitlockerInfo) GetPersistentVolumeId() string {
	if m != nil {
		return m.PersistentVolumeId
	}
	return ""
}

func (m *BitlockerInfo) GetConversionStatus() int32 {
	if m != nil {
		return m.ConversionStatus
	}
	return 0
}

func (m *BitlockerInfo) GetProtectionStatus() int32 {
	if m != nil {
		return m.ProtectionStatus
	}
	return 0
}

func (m *BitlockerInfo) GetEncryptionMethod() string {
	if m != nil {
		return m.EncryptionMethod
	}
	return ""
}

func (m *BitlockerInfo) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BitlockerInfo) GetPercentageEncrypted() int32 {
	if m != nil {
		return m.PercentageEncrypted
	}
	return 0
}

func (m *BitlockerInfo) GetLockStatus() int32 {
	if m != nil {
		return m.LockStatus
	}
	return 0
}

func init() {
	proto.RegisterType((*BitlockerInfo)(nil), "schemas.BitlockerInfo")
}

func init() { proto.RegisterFile("pb/bitlocker_info.proto", fileDescriptor_b9f2f3533fea19d3) }

var fileDescriptor_b9f2f3533fea19d3 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0x47, 0x69, 0xb5, 0xff, 0x52, 0x85, 0x1a, 0x05, 0x03, 0x1e, 0xac, 0x9e, 0x0a, 0x62, 0xb7,
	0x2a, 0xe8, 0xc1, 0x5b, 0xc1, 0x43, 0x41, 0x2f, 0x15, 0x3c, 0x78, 0x59, 0xba, 0xc9, 0xb4, 0x0d,
	0xed, 0x26, 0x31, 0x99, 0x5d, 0xe8, 0x17, 0xf7, 0x2c, 0x3b, 0xed, 0x12, 0x8f, 0xf9, 0xbd, 0x97,
	0xc9, 0x4c, 0x86, 0x5d, 0xba, 0x2c, 0xc9, 0x34, 0x6e, 0xad, 0xdc, 0x80, 0x4f, 0xb5, 0x59, 0xda,
	0xb1, 0xf3, 0x16, 0x2d, 0xef, 0x04, 0xb9, 0x86, 0x7c, 0x11, 0x6e, 0x7f, 0x9b, 0xec, 0x74, 0x5a,
	0x1b, 0x33, 0xb3, 0xb4, 0xfc, 0x8a, 0xf5, 0x14, 0x94, 0x5a, 0x42, 0xaa, 0x95, 0x68, 0x0c, 0x1b,
	0xa3, 0xde, 0xbc, 0xbb, 0x0f, 0x66, 0x8a, 0xdf, 0xb0, 0x13, 0xe5, 0x75, 0x09, 0xe9, 0x16, 0x10,
	0xc1, 0x8b, 0x26, 0xf1, 0x3e, 0x65, 0xef, 0x14, 0xf1, 0x09, 0xbb, 0x70, 0xe0, 0x83, 0x0e, 0x08,
	0x06, 0xd3, 0xd2, 0x6e, 0x8b, 0x9c, 0x4a, 0x1d, 0x91, 0xca, 0x23, 0xfb, 0x22, 0x34, 0x53, 0xfc,
	0x8e, 0x9d, 0x49, 0x6b, 0xca, 0x0a, 0x58, 0x93, 0x06, 0x5c, 0x60, 0x11, 0xc4, 0xf1, 0xb0, 0x31,
	0x6a, 0xcd, 0x07, 0x11, 0x7c, 0x52, 0x5e, 0xc9, 0xd5, 0x08, 0x20, 0xf1, 0x9f, 0xdc, 0xda, 0xcb,
	0x11, 0x44, 0x19, 0x8c, 0xf4, 0x3b, 0x47, 0x72, 0x0e, 0xb8, 0xb6, 0x4a, 0xb4, 0xa9, 0x91, 0x41,
	0x04, 0x1f, 0x94, 0x73, 0xc1, 0x3a, 0x87, 0xa7, 0x44, 0x87, 0xea, 0xd5, 0x47, 0xfe, 0x40, 0x23,
	0x49, 0x30, 0xb8, 0x58, 0x41, 0x7a, 0xb8, 0x08, 0x4a, 0x74, 0x49, 0x3b, 0x8f, 0xec, 0xad, 0x46,
	0xfc, 0x9a, 0xf5, 0xab, 0x3f, 0xad, 0x1b, 0xec, 0x91, 0xc9, 0xaa, 0x68, 0xdf, 0xda, 0xf4, 0xf1,
	0x7b, 0xb2, 0xd2, 0xb8, 0x2e, 0xb2, 0xb1, 0xb4, 0x79, 0x92, 0x6b, 0xb9, 0x01, 0xf7, 0xf2, 0x9c,
	0xd8, 0xf0, 0x53, 0x80, 0xdf, 0xdd, 0xd3, 0x9a, 0xb2, 0x62, 0x99, 0xb8, 0xcd, 0xea, 0xf5, 0xb0,
	0xac, 0xac, 0x4d, 0xe9, 0xd3, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xc6, 0x06, 0x2c, 0xd7,
	0x01, 0x00, 0x00,
}
