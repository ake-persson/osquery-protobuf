// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/crontab.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Line parsed values from system and user cron/tab.
type Crontab struct {
	// The job @event name (rare)
	Event string `protobuf:"bytes,1,opt,name=event,proto3" json:"event"`
	// The exact minute for the job
	Minute string `protobuf:"bytes,2,opt,name=minute,proto3" json:"minute"`
	// The hour of the day for the job
	Hour string `protobuf:"bytes,3,opt,name=hour,proto3" json:"hour"`
	// The day of the month for the job
	DayOfMonth string `protobuf:"bytes,4,opt,name=day_of_month,json=dayOfMonth,proto3" json:"day_of_month"`
	// The month of the year for the job
	Month string `protobuf:"bytes,5,opt,name=month,proto3" json:"month"`
	// The day of the week for the job
	DayOfWeek string `protobuf:"bytes,6,opt,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week"`
	// Raw command string
	Command string `protobuf:"bytes,7,opt,name=command,proto3" json:"command"`
	// File parsed
	Path                 string   `protobuf:"bytes,8,opt,name=path,proto3" json:"path"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Crontab) Reset()         { *m = Crontab{} }
func (m *Crontab) String() string { return proto.CompactTextString(m) }
func (*Crontab) ProtoMessage()    {}
func (*Crontab) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b12ec7f71a0322c, []int{0}
}

func (m *Crontab) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Crontab.Unmarshal(m, b)
}
func (m *Crontab) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Crontab.Marshal(b, m, deterministic)
}
func (m *Crontab) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Crontab.Merge(m, src)
}
func (m *Crontab) XXX_Size() int {
	return xxx_messageInfo_Crontab.Size(m)
}
func (m *Crontab) XXX_DiscardUnknown() {
	xxx_messageInfo_Crontab.DiscardUnknown(m)
}

var xxx_messageInfo_Crontab proto.InternalMessageInfo

func (m *Crontab) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *Crontab) GetMinute() string {
	if m != nil {
		return m.Minute
	}
	return ""
}

func (m *Crontab) GetHour() string {
	if m != nil {
		return m.Hour
	}
	return ""
}

func (m *Crontab) GetDayOfMonth() string {
	if m != nil {
		return m.DayOfMonth
	}
	return ""
}

func (m *Crontab) GetMonth() string {
	if m != nil {
		return m.Month
	}
	return ""
}

func (m *Crontab) GetDayOfWeek() string {
	if m != nil {
		return m.DayOfWeek
	}
	return ""
}

func (m *Crontab) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Crontab) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*Crontab)(nil), "schemas.Crontab")
}

func init() { proto.RegisterFile("pb/crontab.proto", fileDescriptor_8b12ec7f71a0322c) }

var fileDescriptor_8b12ec7f71a0322c = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x90, 0x41, 0x4b, 0xf4, 0x30,
	0x10, 0x86, 0xe9, 0xf7, 0xed, 0xb6, 0xee, 0xe8, 0x41, 0x82, 0x48, 0x4e, 0xb2, 0x78, 0xf2, 0xe2,
	0x56, 0x14, 0xf4, 0xe0, 0x4d, 0xcf, 0x22, 0x78, 0x11, 0xbc, 0x2c, 0x49, 0x3a, 0xdd, 0x94, 0x92,
	0x4c, 0x6c, 0x13, 0xa5, 0x3f, 0xd3, 0x7f, 0x24, 0x9d, 0xd4, 0xdb, 0xbc, 0xcf, 0xc3, 0x30, 0xc3,
	0x0b, 0xa7, 0x41, 0xd7, 0x66, 0x20, 0x1f, 0x95, 0xde, 0x85, 0x81, 0x22, 0x89, 0x6a, 0x34, 0x16,
	0x9d, 0x1a, 0x2f, 0x7f, 0x0a, 0xa8, 0x9e, 0xb3, 0x12, 0x67, 0xb0, 0xc6, 0x2f, 0xf4, 0x51, 0x16,
	0xdb, 0xe2, 0x6a, 0xf3, 0x96, 0x83, 0x38, 0x87, 0xd2, 0x75, 0x3e, 0x45, 0x94, 0xff, 0x18, 0x2f,
	0x49, 0x08, 0x58, 0x59, 0x4a, 0x83, 0xfc, 0xcf, 0x94, 0x67, 0xb1, 0x85, 0x93, 0x46, 0x4d, 0x7b,
	0x6a, 0xf7, 0x8e, 0x7c, 0xb4, 0x72, 0xc5, 0x0e, 0x1a, 0x35, 0xbd, 0xb6, 0x2f, 0x33, 0x99, 0x6f,
	0x64, 0xb5, 0xce, 0x37, 0x38, 0x88, 0x0b, 0x38, 0x5e, 0xf6, 0xbe, 0x11, 0x7b, 0x59, 0xb2, 0xdb,
	0xf0, 0xda, 0x3b, 0x62, 0x2f, 0x24, 0x54, 0x86, 0x9c, 0x53, 0xbe, 0x91, 0x15, 0xbb, 0xbf, 0x38,
	0x7f, 0x11, 0x54, 0xb4, 0xf2, 0x28, 0x7f, 0x31, 0xcf, 0x4f, 0xb7, 0x1f, 0x37, 0x87, 0x2e, 0xda,
	0xa4, 0x77, 0x86, 0x5c, 0xed, 0x3a, 0xd3, 0x63, 0x78, 0xb8, 0xaf, 0x69, 0xfc, 0x4c, 0x38, 0x4c,
	0xd7, 0xdc, 0x80, 0x4e, 0x6d, 0x1d, 0xfa, 0xc3, 0xe3, 0xd2, 0x83, 0x2e, 0x99, 0xde, 0xfd, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x0d, 0xfc, 0x14, 0x63, 0x2b, 0x01, 0x00, 0x00,
}
