// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/lldp_neighbor.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// LLDP neighbors of interfaces.
type LldpNeighbor struct {
	// Interface name
	Interface string `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface"`
	// Neighbor chassis index
	Rid int32 `protobuf:"varint,2,opt,name=rid,proto3" json:"rid"`
	// Neighbor chassis ID type
	ChassisIdType string `protobuf:"bytes,3,opt,name=chassis_id_type,json=chassisIdType,proto3" json:"chassis_id_type"`
	// Neighbor chassis ID value
	ChassisId string `protobuf:"bytes,4,opt,name=chassis_id,json=chassisId,proto3" json:"chassis_id"`
	// CPU brand string
	ChassisSysname string `protobuf:"bytes,5,opt,name=chassis_sysname,json=chassisSysname,proto3" json:"chassis_sysname"`
	// Max number of CPU physical cores
	ChassisSysDescription int32 `protobuf:"varint,6,opt,name=chassis_sys_description,json=chassisSysDescription,proto3" json:"chassis_sys_description"`
	// Chassis bridge capability availability
	ChassisBridgeCapabilityAvailable int32 `protobuf:"varint,7,opt,name=chassis_bridge_capability_available,json=chassisBridgeCapabilityAvailable,proto3" json:"chassis_bridge_capability_available"`
	// Is chassis bridge capability enabled.
	ChassisBridgeCapabilityEnabled int32 `protobuf:"varint,8,opt,name=chassis_bridge_capability_enabled,json=chassisBridgeCapabilityEnabled,proto3" json:"chassis_bridge_capability_enabled"`
	// Chassis router capability availability
	ChassisRouterCapabilityAvailable int32 `protobuf:"varint,9,opt,name=chassis_router_capability_available,json=chassisRouterCapabilityAvailable,proto3" json:"chassis_router_capability_available"`
	// Chassis router capability enabled
	ChassisRouterCapabilityEnabled int32 `protobuf:"varint,10,opt,name=chassis_router_capability_enabled,json=chassisRouterCapabilityEnabled,proto3" json:"chassis_router_capability_enabled"`
	// Chassis repeater capability availability
	ChassisRepeaterCapabilityAvailable int32 `protobuf:"varint,11,opt,name=chassis_repeater_capability_available,json=chassisRepeaterCapabilityAvailable,proto3" json:"chassis_repeater_capability_available"`
	// Chassis repeater capability enabled
	ChassisRepeaterCapabilityEnabled int32 `protobuf:"varint,12,opt,name=chassis_repeater_capability_enabled,json=chassisRepeaterCapabilityEnabled,proto3" json:"chassis_repeater_capability_enabled"`
	// Chassis wlan capability availability
	ChassisWlanCapabilityAvailable int32 `protobuf:"varint,13,opt,name=chassis_wlan_capability_available,json=chassisWlanCapabilityAvailable,proto3" json:"chassis_wlan_capability_available"`
	// Chassis wlan capability enabled
	ChassisWlanCapabilityEnabled int32 `protobuf:"varint,14,opt,name=chassis_wlan_capability_enabled,json=chassisWlanCapabilityEnabled,proto3" json:"chassis_wlan_capability_enabled"`
	// Chassis telephone capability availability
	ChassisTelCapabilityAvailable int32 `protobuf:"varint,15,opt,name=chassis_tel_capability_available,json=chassisTelCapabilityAvailable,proto3" json:"chassis_tel_capability_available"`
	// Chassis telephone capability enabled
	ChassisTelCapabilityEnabled int32 `protobuf:"varint,16,opt,name=chassis_tel_capability_enabled,json=chassisTelCapabilityEnabled,proto3" json:"chassis_tel_capability_enabled"`
	// Chassis DOCSIS capability availability
	ChassisDocsisCapabilityAvailable int32 `protobuf:"varint,17,opt,name=chassis_docsis_capability_available,json=chassisDocsisCapabilityAvailable,proto3" json:"chassis_docsis_capability_available"`
	// Chassis DOCSIS capability enabled
	ChassisDocsisCapabilityEnabled int32 `protobuf:"varint,18,opt,name=chassis_docsis_capability_enabled,json=chassisDocsisCapabilityEnabled,proto3" json:"chassis_docsis_capability_enabled"`
	// Chassis station capability availability
	ChassisStationCapabilityAvailable int32 `protobuf:"varint,19,opt,name=chassis_station_capability_available,json=chassisStationCapabilityAvailable,proto3" json:"chassis_station_capability_available"`
	// Chassis station capability enabled
	ChassisStationCapabilityEnabled int32 `protobuf:"varint,20,opt,name=chassis_station_capability_enabled,json=chassisStationCapabilityEnabled,proto3" json:"chassis_station_capability_enabled"`
	// Chassis other capability availability
	ChassisOtherCapabilityAvailable int32 `protobuf:"varint,21,opt,name=chassis_other_capability_available,json=chassisOtherCapabilityAvailable,proto3" json:"chassis_other_capability_available"`
	// Chassis other capability enabled
	ChassisOtherCapabilityEnabled int32 `protobuf:"varint,22,opt,name=chassis_other_capability_enabled,json=chassisOtherCapabilityEnabled,proto3" json:"chassis_other_capability_enabled"`
	// Comma delimited list of chassis management IPS
	ChassisMgmtIps string `protobuf:"bytes,23,opt,name=chassis_mgmt_ips,json=chassisMgmtIps,proto3" json:"chassis_mgmt_ips"`
	// Port ID type
	PortIdType string `protobuf:"bytes,24,opt,name=port_id_type,json=portIdType,proto3" json:"port_id_type"`
	// Port ID value
	PortId string `protobuf:"bytes,25,opt,name=port_id,json=portId,proto3" json:"port_id"`
	// Port description
	PortDescription string `protobuf:"bytes,26,opt,name=port_description,json=portDescription,proto3" json:"port_description"`
	// Age of neighbor port
	PortTtl int64 `protobuf:"varint,27,opt,name=port_ttl,json=portTtl,proto3" json:"port_ttl"`
	// Port max frame size
	PortMfs int64 `protobuf:"varint,28,opt,name=port_mfs,json=portMfs,proto3" json:"port_mfs"`
	// Port aggregation ID
	PortAggregationId string `protobuf:"bytes,29,opt,name=port_aggregation_id,json=portAggregationId,proto3" json:"port_aggregation_id"`
	// Auto negotiation supported
	PortAutonegSupported int32 `protobuf:"varint,30,opt,name=port_autoneg_supported,json=portAutonegSupported,proto3" json:"port_autoneg_supported"`
	// Is auto negotiation enabled
	PortAutonegEnabled int32 `protobuf:"varint,31,opt,name=port_autoneg_enabled,json=portAutonegEnabled,proto3" json:"port_autoneg_enabled"`
	// MAU type
	PortMauType string `protobuf:"bytes,32,opt,name=port_mau_type,json=portMauType,proto3" json:"port_mau_type"`
	// 10Base-T HD auto negotiation enabled
	PortAutoneg_10BasetHdEnabled int32 `protobuf:"varint,33,opt,name=port_autoneg_10baset_hd_enabled,json=portAutoneg10basetHdEnabled,proto3" json:"port_autoneg_10baset_hd_enabled"`
	// 10Base-T FD auto negotiation enabled
	PortAutoneg_10BasetFdEnabled int32 `protobuf:"varint,34,opt,name=port_autoneg_10baset_fd_enabled,json=portAutoneg10basetFdEnabled,proto3" json:"port_autoneg_10baset_fd_enabled"`
	// 100Base-TX HD auto negotiation enabled
	PortAutoneg_100BasetxHdEnabled int32 `protobuf:"varint,35,opt,name=port_autoneg_100basetx_hd_enabled,json=portAutoneg100basetxHdEnabled,proto3" json:"port_autoneg_100basetx_hd_enabled"`
	// 100Base-TX FD auto negotiation enabled
	PortAutoneg_100BasetxFdEnabled int32 `protobuf:"varint,36,opt,name=port_autoneg_100basetx_fd_enabled,json=portAutoneg100basetxFdEnabled,proto3" json:"port_autoneg_100basetx_fd_enabled"`
	// 100Base-T2 HD auto negotiation enabled
	PortAutoneg_100Baset2HdEnabled int32 `protobuf:"varint,37,opt,name=port_autoneg_100baset2_hd_enabled,json=portAutoneg100baset2HdEnabled,proto3" json:"port_autoneg_100baset2_hd_enabled"`
	// 100Base-T2 FD auto negotiation enabled
	PortAutoneg_100Baset2FdEnabled int32 `protobuf:"varint,38,opt,name=port_autoneg_100baset2_fd_enabled,json=portAutoneg100baset2FdEnabled,proto3" json:"port_autoneg_100baset2_fd_enabled"`
	// 100Base-T4 HD auto negotiation enabled
	PortAutoneg_100Baset4HdEnabled int32 `protobuf:"varint,39,opt,name=port_autoneg_100baset4_hd_enabled,json=portAutoneg100baset4HdEnabled,proto3" json:"port_autoneg_100baset4_hd_enabled"`
	// 100Base-T4 FD auto negotiation enabled
	PortAutoneg_100Baset4FdEnabled int32 `protobuf:"varint,40,opt,name=port_autoneg_100baset4_fd_enabled,json=portAutoneg100baset4FdEnabled,proto3" json:"port_autoneg_100baset4_fd_enabled"`
	// 1000Base-X HD auto negotiation enabled
	PortAutoneg_1000BasexHdEnabled int32 `protobuf:"varint,41,opt,name=port_autoneg_1000basex_hd_enabled,json=portAutoneg1000basexHdEnabled,proto3" json:"port_autoneg_1000basex_hd_enabled"`
	// 1000Base-X FD auto negotiation enabled
	PortAutoneg_1000BasexFdEnabled int32 `protobuf:"varint,42,opt,name=port_autoneg_1000basex_fd_enabled,json=portAutoneg1000basexFdEnabled,proto3" json:"port_autoneg_1000basex_fd_enabled"`
	// 1000Base-T HD auto negotiation enabled
	PortAutoneg_1000BasetHdEnabled int32 `protobuf:"varint,43,opt,name=port_autoneg_1000baset_hd_enabled,json=portAutoneg1000basetHdEnabled,proto3" json:"port_autoneg_1000baset_hd_enabled"`
	// 1000Base-T FD auto negotiation enabled
	PortAutoneg_1000BasetFdEnabled int32 `protobuf:"varint,44,opt,name=port_autoneg_1000baset_fd_enabled,json=portAutoneg1000basetFdEnabled,proto3" json:"port_autoneg_1000baset_fd_enabled"`
	// Dot3 power device type
	PowerDeviceType string `protobuf:"bytes,45,opt,name=power_device_type,json=powerDeviceType,proto3" json:"power_device_type"`
	// MDI power supported
	PowerMdiSupported int32 `protobuf:"varint,46,opt,name=power_mdi_supported,json=powerMdiSupported,proto3" json:"power_mdi_supported"`
	// Is MDI power enabled
	PowerMdiEnabled int32 `protobuf:"varint,47,opt,name=power_mdi_enabled,json=powerMdiEnabled,proto3" json:"power_mdi_enabled"`
	// Is power pair control enabled
	PowerPaircontrolEnabled int32 `protobuf:"varint,48,opt,name=power_paircontrol_enabled,json=powerPaircontrolEnabled,proto3" json:"power_paircontrol_enabled"`
	// Dot3 power pairs
	PowerPairs string `protobuf:"bytes,49,opt,name=power_pairs,json=powerPairs,proto3" json:"power_pairs"`
	// Power class
	PowerClass string `protobuf:"bytes,50,opt,name=power_class,json=powerClass,proto3" json:"power_class"`
	// Is 802.3at enabled
	Power_8023AtEnabled int32 `protobuf:"varint,51,opt,name=power_8023at_enabled,json=power8023atEnabled,proto3" json:"power_8023at_enabled"`
	// 802.3at power type
	Power_8023AtPowerType string `protobuf:"bytes,52,opt,name=power_8023at_power_type,json=power8023atPowerType,proto3" json:"power_8023at_power_type"`
	// 802.3at power source
	Power_8023AtPowerSource string `protobuf:"bytes,53,opt,name=power_8023at_power_source,json=power8023atPowerSource,proto3" json:"power_8023at_power_source"`
	// 802.3at power priority
	Power_8023AtPowerPriority string `protobuf:"bytes,54,opt,name=power_8023at_power_priority,json=power8023atPowerPriority,proto3" json:"power_8023at_power_priority"`
	// 802.3at power allocated
	Power_8023AtPowerAllocated string `protobuf:"bytes,55,opt,name=power_8023at_power_allocated,json=power8023atPowerAllocated,proto3" json:"power_8023at_power_allocated"`
	// 802.3at power requested
	Power_8023AtPowerRequested string `protobuf:"bytes,56,opt,name=power_8023at_power_requested,json=power8023atPowerRequested,proto3" json:"power_8023at_power_requested"`
	// Chassis MED type
	MedDeviceType string `protobuf:"bytes,57,opt,name=med_device_type,json=medDeviceType,proto3" json:"med_device_type"`
	// Is MED capabilities enabled
	MedCapabilityCapabilities int32 `protobuf:"varint,58,opt,name=med_capability_capabilities,json=medCapabilityCapabilities,proto3" json:"med_capability_capabilities"`
	// Is MED policy capability enabled
	MedCapabilityPolicy int32 `protobuf:"varint,59,opt,name=med_capability_policy,json=medCapabilityPolicy,proto3" json:"med_capability_policy"`
	// Is MED location capability enabled
	MedCapabilityLocation int32 `protobuf:"varint,60,opt,name=med_capability_location,json=medCapabilityLocation,proto3" json:"med_capability_location"`
	// Is MED MDI PSE capability enabled
	MedCapabilityMdiPse int32 `protobuf:"varint,61,opt,name=med_capability_mdi_pse,json=medCapabilityMdiPse,proto3" json:"med_capability_mdi_pse"`
	// Is MED MDI PD capability enabled
	MedCapabilityMdiPd int32 `protobuf:"varint,62,opt,name=med_capability_mdi_pd,json=medCapabilityMdiPd,proto3" json:"med_capability_mdi_pd"`
	// Is MED inventory capability enabled
	MedCapabilityInventory int32 `protobuf:"varint,63,opt,name=med_capability_inventory,json=medCapabilityInventory,proto3" json:"med_capability_inventory"`
	// Comma delimited list of MED policies
	MedPolicies string `protobuf:"bytes,64,opt,name=med_policies,json=medPolicies,proto3" json:"med_policies"`
	// Comma delimited list of vlan ids
	Vlans string `protobuf:"bytes,65,opt,name=vlans,proto3" json:"vlans"`
	// Primary VLAN id
	Pvid string `protobuf:"bytes,66,opt,name=pvid,proto3" json:"pvid"`
	// Comma delimited list of supported PPVIDs
	PpvidsSupported string `protobuf:"bytes,67,opt,name=ppvids_supported,json=ppvidsSupported,proto3" json:"ppvids_supported"`
	// Comma delimited list of enabled PPVIDs
	PpvidsEnabled string `protobuf:"bytes,68,opt,name=ppvids_enabled,json=ppvidsEnabled,proto3" json:"ppvids_enabled"`
	// Comma delimited list of PIDs
	Pids                 string   `protobuf:"bytes,69,opt,name=pids,proto3" json:"pids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LldpNeighbor) Reset()         { *m = LldpNeighbor{} }
func (m *LldpNeighbor) String() string { return proto.CompactTextString(m) }
func (*LldpNeighbor) ProtoMessage()    {}
func (*LldpNeighbor) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b30bb613428dc00, []int{0}
}

func (m *LldpNeighbor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LldpNeighbor.Unmarshal(m, b)
}
func (m *LldpNeighbor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LldpNeighbor.Marshal(b, m, deterministic)
}
func (m *LldpNeighbor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LldpNeighbor.Merge(m, src)
}
func (m *LldpNeighbor) XXX_Size() int {
	return xxx_messageInfo_LldpNeighbor.Size(m)
}
func (m *LldpNeighbor) XXX_DiscardUnknown() {
	xxx_messageInfo_LldpNeighbor.DiscardUnknown(m)
}

var xxx_messageInfo_LldpNeighbor proto.InternalMessageInfo

func (m *LldpNeighbor) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *LldpNeighbor) GetRid() int32 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *LldpNeighbor) GetChassisIdType() string {
	if m != nil {
		return m.ChassisIdType
	}
	return ""
}

func (m *LldpNeighbor) GetChassisId() string {
	if m != nil {
		return m.ChassisId
	}
	return ""
}

func (m *LldpNeighbor) GetChassisSysname() string {
	if m != nil {
		return m.ChassisSysname
	}
	return ""
}

func (m *LldpNeighbor) GetChassisSysDescription() int32 {
	if m != nil {
		return m.ChassisSysDescription
	}
	return 0
}

func (m *LldpNeighbor) GetChassisBridgeCapabilityAvailable() int32 {
	if m != nil {
		return m.ChassisBridgeCapabilityAvailable
	}
	return 0
}

func (m *LldpNeighbor) GetChassisBridgeCapabilityEnabled() int32 {
	if m != nil {
		return m.ChassisBridgeCapabilityEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetChassisRouterCapabilityAvailable() int32 {
	if m != nil {
		return m.ChassisRouterCapabilityAvailable
	}
	return 0
}

func (m *LldpNeighbor) GetChassisRouterCapabilityEnabled() int32 {
	if m != nil {
		return m.ChassisRouterCapabilityEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetChassisRepeaterCapabilityAvailable() int32 {
	if m != nil {
		return m.ChassisRepeaterCapabilityAvailable
	}
	return 0
}

func (m *LldpNeighbor) GetChassisRepeaterCapabilityEnabled() int32 {
	if m != nil {
		return m.ChassisRepeaterCapabilityEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetChassisWlanCapabilityAvailable() int32 {
	if m != nil {
		return m.ChassisWlanCapabilityAvailable
	}
	return 0
}

func (m *LldpNeighbor) GetChassisWlanCapabilityEnabled() int32 {
	if m != nil {
		return m.ChassisWlanCapabilityEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetChassisTelCapabilityAvailable() int32 {
	if m != nil {
		return m.ChassisTelCapabilityAvailable
	}
	return 0
}

func (m *LldpNeighbor) GetChassisTelCapabilityEnabled() int32 {
	if m != nil {
		return m.ChassisTelCapabilityEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetChassisDocsisCapabilityAvailable() int32 {
	if m != nil {
		return m.ChassisDocsisCapabilityAvailable
	}
	return 0
}

func (m *LldpNeighbor) GetChassisDocsisCapabilityEnabled() int32 {
	if m != nil {
		return m.ChassisDocsisCapabilityEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetChassisStationCapabilityAvailable() int32 {
	if m != nil {
		return m.ChassisStationCapabilityAvailable
	}
	return 0
}

func (m *LldpNeighbor) GetChassisStationCapabilityEnabled() int32 {
	if m != nil {
		return m.ChassisStationCapabilityEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetChassisOtherCapabilityAvailable() int32 {
	if m != nil {
		return m.ChassisOtherCapabilityAvailable
	}
	return 0
}

func (m *LldpNeighbor) GetChassisOtherCapabilityEnabled() int32 {
	if m != nil {
		return m.ChassisOtherCapabilityEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetChassisMgmtIps() string {
	if m != nil {
		return m.ChassisMgmtIps
	}
	return ""
}

func (m *LldpNeighbor) GetPortIdType() string {
	if m != nil {
		return m.PortIdType
	}
	return ""
}

func (m *LldpNeighbor) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *LldpNeighbor) GetPortDescription() string {
	if m != nil {
		return m.PortDescription
	}
	return ""
}

func (m *LldpNeighbor) GetPortTtl() int64 {
	if m != nil {
		return m.PortTtl
	}
	return 0
}

func (m *LldpNeighbor) GetPortMfs() int64 {
	if m != nil {
		return m.PortMfs
	}
	return 0
}

func (m *LldpNeighbor) GetPortAggregationId() string {
	if m != nil {
		return m.PortAggregationId
	}
	return ""
}

func (m *LldpNeighbor) GetPortAutonegSupported() int32 {
	if m != nil {
		return m.PortAutonegSupported
	}
	return 0
}

func (m *LldpNeighbor) GetPortAutonegEnabled() int32 {
	if m != nil {
		return m.PortAutonegEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPortMauType() string {
	if m != nil {
		return m.PortMauType
	}
	return ""
}

func (m *LldpNeighbor) GetPortAutoneg_10BasetHdEnabled() int32 {
	if m != nil {
		return m.PortAutoneg_10BasetHdEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPortAutoneg_10BasetFdEnabled() int32 {
	if m != nil {
		return m.PortAutoneg_10BasetFdEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPortAutoneg_100BasetxHdEnabled() int32 {
	if m != nil {
		return m.PortAutoneg_100BasetxHdEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPortAutoneg_100BasetxFdEnabled() int32 {
	if m != nil {
		return m.PortAutoneg_100BasetxFdEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPortAutoneg_100Baset2HdEnabled() int32 {
	if m != nil {
		return m.PortAutoneg_100Baset2HdEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPortAutoneg_100Baset2FdEnabled() int32 {
	if m != nil {
		return m.PortAutoneg_100Baset2FdEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPortAutoneg_100Baset4HdEnabled() int32 {
	if m != nil {
		return m.PortAutoneg_100Baset4HdEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPortAutoneg_100Baset4FdEnabled() int32 {
	if m != nil {
		return m.PortAutoneg_100Baset4FdEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPortAutoneg_1000BasexHdEnabled() int32 {
	if m != nil {
		return m.PortAutoneg_1000BasexHdEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPortAutoneg_1000BasexFdEnabled() int32 {
	if m != nil {
		return m.PortAutoneg_1000BasexFdEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPortAutoneg_1000BasetHdEnabled() int32 {
	if m != nil {
		return m.PortAutoneg_1000BasetHdEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPortAutoneg_1000BasetFdEnabled() int32 {
	if m != nil {
		return m.PortAutoneg_1000BasetFdEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPowerDeviceType() string {
	if m != nil {
		return m.PowerDeviceType
	}
	return ""
}

func (m *LldpNeighbor) GetPowerMdiSupported() int32 {
	if m != nil {
		return m.PowerMdiSupported
	}
	return 0
}

func (m *LldpNeighbor) GetPowerMdiEnabled() int32 {
	if m != nil {
		return m.PowerMdiEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPowerPaircontrolEnabled() int32 {
	if m != nil {
		return m.PowerPaircontrolEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPowerPairs() string {
	if m != nil {
		return m.PowerPairs
	}
	return ""
}

func (m *LldpNeighbor) GetPowerClass() string {
	if m != nil {
		return m.PowerClass
	}
	return ""
}

func (m *LldpNeighbor) GetPower_8023AtEnabled() int32 {
	if m != nil {
		return m.Power_8023AtEnabled
	}
	return 0
}

func (m *LldpNeighbor) GetPower_8023AtPowerType() string {
	if m != nil {
		return m.Power_8023AtPowerType
	}
	return ""
}

func (m *LldpNeighbor) GetPower_8023AtPowerSource() string {
	if m != nil {
		return m.Power_8023AtPowerSource
	}
	return ""
}

func (m *LldpNeighbor) GetPower_8023AtPowerPriority() string {
	if m != nil {
		return m.Power_8023AtPowerPriority
	}
	return ""
}

func (m *LldpNeighbor) GetPower_8023AtPowerAllocated() string {
	if m != nil {
		return m.Power_8023AtPowerAllocated
	}
	return ""
}

func (m *LldpNeighbor) GetPower_8023AtPowerRequested() string {
	if m != nil {
		return m.Power_8023AtPowerRequested
	}
	return ""
}

func (m *LldpNeighbor) GetMedDeviceType() string {
	if m != nil {
		return m.MedDeviceType
	}
	return ""
}

func (m *LldpNeighbor) GetMedCapabilityCapabilities() int32 {
	if m != nil {
		return m.MedCapabilityCapabilities
	}
	return 0
}

func (m *LldpNeighbor) GetMedCapabilityPolicy() int32 {
	if m != nil {
		return m.MedCapabilityPolicy
	}
	return 0
}

func (m *LldpNeighbor) GetMedCapabilityLocation() int32 {
	if m != nil {
		return m.MedCapabilityLocation
	}
	return 0
}

func (m *LldpNeighbor) GetMedCapabilityMdiPse() int32 {
	if m != nil {
		return m.MedCapabilityMdiPse
	}
	return 0
}

func (m *LldpNeighbor) GetMedCapabilityMdiPd() int32 {
	if m != nil {
		return m.MedCapabilityMdiPd
	}
	return 0
}

func (m *LldpNeighbor) GetMedCapabilityInventory() int32 {
	if m != nil {
		return m.MedCapabilityInventory
	}
	return 0
}

func (m *LldpNeighbor) GetMedPolicies() string {
	if m != nil {
		return m.MedPolicies
	}
	return ""
}

func (m *LldpNeighbor) GetVlans() string {
	if m != nil {
		return m.Vlans
	}
	return ""
}

func (m *LldpNeighbor) GetPvid() string {
	if m != nil {
		return m.Pvid
	}
	return ""
}

func (m *LldpNeighbor) GetPpvidsSupported() string {
	if m != nil {
		return m.PpvidsSupported
	}
	return ""
}

func (m *LldpNeighbor) GetPpvidsEnabled() string {
	if m != nil {
		return m.PpvidsEnabled
	}
	return ""
}

func (m *LldpNeighbor) GetPids() string {
	if m != nil {
		return m.Pids
	}
	return ""
}

func init() {
	proto.RegisterType((*LldpNeighbor)(nil), "schemas.LldpNeighbor")
}

func init() { proto.RegisterFile("pb/lldp_neighbor.proto", fileDescriptor_6b30bb613428dc00) }

var fileDescriptor_6b30bb613428dc00 = []byte{
	// 1240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x97, 0x79, 0x53, 0xdc, 0x36,
	0x18, 0xc6, 0x87, 0xe6, 0x56, 0x38, 0x05, 0x2c, 0xa2, 0x5c, 0x0b, 0x09, 0x09, 0x49, 0x1b, 0x8e,
	0x85, 0x10, 0x92, 0x34, 0x49, 0xb9, 0xda, 0x65, 0x1a, 0x9a, 0x2d, 0x30, 0xd3, 0x99, 0xfe, 0xb3,
	0xe3, 0xb5, 0xc4, 0xae, 0x26, 0xbe, 0x62, 0x69, 0xa1, 0xfb, 0xad, 0xfa, 0x11, 0x3b, 0x7a, 0x65,
	0xd9, 0xf2, 0xae, 0x1d, 0xf8, 0x0b, 0xaf, 0xde, 0xe7, 0xf9, 0xe9, 0xb1, 0x2c, 0xbd, 0xc6, 0xa8,
	0x12, 0xb5, 0x36, 0x3c, 0x8f, 0x46, 0xcd, 0x80, 0xf1, 0x76, 0xa7, 0x15, 0xc6, 0xeb, 0x51, 0x1c,
	0xca, 0x10, 0x3f, 0x10, 0x6e, 0x87, 0xf9, 0x8e, 0x58, 0xf9, 0x6f, 0x11, 0x0d, 0x7f, 0xf6, 0x68,
	0xf4, 0x67, 0x52, 0xc7, 0xf3, 0xe8, 0x11, 0x0f, 0x24, 0x8b, 0x2f, 0x1d, 0x97, 0x91, 0xa1, 0xea,
	0xd0, 0xda, 0xa3, 0xb3, 0x6c, 0x00, 0x8f, 0xa3, 0x3b, 0x31, 0xa7, 0xe4, 0x87, 0xea, 0xd0, 0xda,
	0xbd, 0x33, 0x75, 0x89, 0x9f, 0xa1, 0x31, 0xb7, 0xe3, 0x08, 0xc1, 0x45, 0x93, 0xd3, 0xa6, 0xec,
	0x45, 0x8c, 0xdc, 0x01, 0xd7, 0x48, 0x32, 0x7c, 0x42, 0x2f, 0x7a, 0x11, 0xc3, 0x0b, 0x08, 0x65,
	0x3a, 0x72, 0x57, 0x83, 0x53, 0x09, 0x7e, 0x9e, 0x61, 0x44, 0x4f, 0x04, 0x8e, 0xcf, 0xc8, 0x3d,
	0xd0, 0x8c, 0x26, 0xc3, 0xe7, 0x7a, 0x14, 0xef, 0xa2, 0x19, 0x4b, 0xd8, 0xa4, 0x4c, 0xb8, 0x31,
	0x8f, 0x24, 0x0f, 0x03, 0x72, 0x1f, 0x52, 0x4d, 0x67, 0x86, 0xa3, 0xac, 0x88, 0x4f, 0xd1, 0x13,
	0xe3, 0x6b, 0xc5, 0x9c, 0xb6, 0x59, 0xd3, 0x75, 0x22, 0xa7, 0xc5, 0x3d, 0x2e, 0x7b, 0x4d, 0xe7,
	0xca, 0xe1, 0x9e, 0xd3, 0xf2, 0x18, 0x79, 0x00, 0x8c, 0x6a, 0x22, 0x3d, 0x00, 0xe5, 0x61, 0x2a,
	0xdc, 0x37, 0x3a, 0x7c, 0x82, 0x96, 0xcb, 0x71, 0x2c, 0x50, 0x1a, 0x4a, 0x1e, 0x02, 0x6c, 0xb1,
	0x04, 0x76, 0xac, 0x55, 0x76, 0xb2, 0x38, 0xec, 0x4a, 0x16, 0x17, 0x27, 0x7b, 0x94, 0x4b, 0x76,
	0x06, 0xca, 0x1b, 0x92, 0x0d, 0xe2, 0x4c, 0x32, 0x94, 0x4b, 0xd6, 0x0f, 0x33, 0xc9, 0xfe, 0x42,
	0xab, 0x29, 0x8a, 0x45, 0xcc, 0x29, 0xcd, 0xf6, 0x18, 0x70, 0x2b, 0x06, 0x97, 0x68, 0x8b, 0xd2,
	0xd9, 0x37, 0x5b, 0x80, 0x34, 0xf9, 0x86, 0xf3, 0x37, 0x3b, 0x00, 0x34, 0x09, 0xad, 0x9b, 0xbd,
	0xf6, 0x9c, 0xa0, 0x38, 0xdd, 0x48, 0xee, 0x66, 0xff, 0xf6, 0x9c, 0xa0, 0x28, 0xd9, 0x31, 0x5a,
	0x2a, 0x43, 0x99, 0x54, 0xa3, 0x00, 0x9a, 0x2f, 0x04, 0x99, 0x44, 0xbf, 0x23, 0x93, 0xba, 0x29,
	0x99, 0x57, 0x1c, 0x68, 0x0c, 0x38, 0x0b, 0x89, 0xee, 0x82, 0x79, 0x45, 0x79, 0x0e, 0xd1, 0x62,
	0x09, 0xc8, 0xc4, 0x19, 0x07, 0xcc, 0x5c, 0x11, 0xa6, 0x60, 0x6f, 0xd1, 0xd0, 0x55, 0x7f, 0x0a,
	0x03, 0x4d, 0xe4, 0x96, 0xfb, 0x08, 0x94, 0x37, 0xec, 0xad, 0x41, 0x9c, 0x89, 0x85, 0x73, 0xcb,
	0xdd, 0x0f, 0x33, 0xc9, 0xbe, 0xa0, 0xa7, 0xe9, 0x39, 0x96, 0x8e, 0x3a, 0xa2, 0xc5, 0xd1, 0x26,
	0x81, 0x66, 0xa6, 0x3d, 0xd7, 0xd2, 0xa2, 0x6c, 0x7f, 0xa0, 0x95, 0xef, 0x00, 0x4d, 0xb8, 0x29,
	0xc0, 0x2d, 0x95, 0xe1, 0x4c, 0x3a, 0x0b, 0x16, 0xca, 0x4e, 0xd9, 0xb6, 0x9f, 0xce, 0xc1, 0xbe,
	0x28, 0x61, 0x51, 0x32, 0x6b, 0x4b, 0x0c, 0xc0, 0x4c, 0xae, 0x4a, 0x6e, 0x4b, 0xf4, 0xa1, 0x4c,
	0xaa, 0x35, 0x34, 0x6e, 0x40, 0x7e, 0xdb, 0x97, 0x4d, 0x1e, 0x09, 0x32, 0x93, 0xeb, 0x92, 0xa7,
	0x6d, 0x5f, 0x9e, 0x44, 0x02, 0x57, 0xd1, 0x70, 0x14, 0xc6, 0x32, 0x6d, 0xc9, 0x04, 0x54, 0x48,
	0x8d, 0x25, 0xfd, 0x78, 0x06, 0x3d, 0x48, 0x14, 0x64, 0x16, 0x8a, 0xf7, 0x75, 0x11, 0xbf, 0x40,
	0xe3, 0x50, 0xb0, 0x3b, 0xeb, 0x8f, 0xa0, 0x18, 0x53, 0xe3, 0x76, 0x4f, 0x9d, 0x45, 0x0f, 0x41,
	0x2a, 0xa5, 0x47, 0xe6, 0xaa, 0x43, 0x6b, 0x77, 0xce, 0x80, 0x79, 0x21, 0xbd, 0xb4, 0xe4, 0x5f,
	0x0a, 0x32, 0x9f, 0x95, 0x4e, 0x2f, 0x05, 0x5e, 0x47, 0x93, 0x50, 0x72, 0xda, 0xed, 0x98, 0xb5,
	0xf5, 0x93, 0xe2, 0x94, 0x2c, 0xc0, 0x1c, 0x13, 0xaa, 0xb4, 0x9f, 0x55, 0x4e, 0x28, 0xde, 0x41,
	0x15, 0xad, 0xef, 0xca, 0x30, 0x60, 0xed, 0xa6, 0xe8, 0x46, 0xea, 0x37, 0xa3, 0x64, 0x11, 0x16,
	0x6d, 0x0a, 0x2c, 0xba, 0x78, 0x6e, 0x6a, 0x78, 0x13, 0x4d, 0xe5, 0x5c, 0x66, 0xa1, 0x97, 0xc0,
	0x83, 0x2d, 0x8f, 0x59, 0xdd, 0x15, 0x34, 0xa2, 0x23, 0x3b, 0x5d, 0xbd, 0x68, 0x55, 0x48, 0xf4,
	0x18, 0x72, 0x3b, 0x5d, 0x58, 0xb5, 0x23, 0xb4, 0x94, 0xa3, 0x6e, 0x6d, 0xb6, 0x1c, 0xc1, 0x64,
	0xb3, 0x43, 0xd3, 0x09, 0x96, 0xf5, 0xa9, 0xb4, 0x26, 0x48, 0x44, 0x75, 0x6a, 0x66, 0x2a, 0xa3,
	0x5c, 0x66, 0x94, 0x95, 0x32, 0xca, 0x6f, 0x29, 0xa5, 0x8e, 0x96, 0xfb, 0x28, 0x5a, 0xf1, 0xaf,
	0x9d, 0xe6, 0x89, 0xde, 0x57, 0x39, 0x4e, 0x22, 0xab, 0xdf, 0x82, 0x64, 0x25, 0x7a, 0x5a, 0x4e,
	0xba, 0x39, 0x53, 0xcd, 0xce, 0xb4, 0x5a, 0x4a, 0xaa, 0xd5, 0x6f, 0x41, 0xb2, 0x32, 0x3d, 0x2b,
	0x27, 0xdd, 0x9c, 0x69, 0xc7, 0xce, 0xf4, 0xbc, 0x94, 0xb4, 0x53, 0xbf, 0x05, 0xc9, 0xca, 0xb4,
	0x56, 0x4e, 0xfa, 0x6e, 0x26, 0xd0, 0xe4, 0x9e, 0xdd, 0x8b, 0x22, 0x92, 0x96, 0xd5, 0x6f, 0x41,
	0xb2, 0x32, 0xbd, 0x2c, 0x27, 0xdd, 0x9c, 0x29, 0xb7, 0xbb, 0x7f, 0x2a, 0x25, 0xc9, 0xfa, 0x2d,
	0x48, 0x56, 0xa6, 0x9f, 0xcb, 0x49, 0x59, 0xa6, 0x97, 0x68, 0x22, 0x0a, 0xaf, 0x59, 0xdc, 0xa4,
	0xec, 0x8a, 0xbb, 0x4c, 0x9f, 0xcb, 0x57, 0xa6, 0x1b, 0x5d, 0xb3, 0xf8, 0x08, 0xc6, 0xe1, 0x6c,
	0x42, 0x5f, 0x51, 0x5a, 0x9f, 0x72, 0xab, 0x49, 0xac, 0xc3, 0x3c, 0x1a, 0x73, 0x4a, 0x79, 0xd6,
	0x21, 0x52, 0xb6, 0xd2, 0x9b, 0x54, 0x1b, 0xa0, 0x1e, 0x33, 0x6a, 0x93, 0xe3, 0x1d, 0x9a, 0xd5,
	0xda, 0xc8, 0xe1, 0xb1, 0x1b, 0x06, 0x32, 0x0e, 0xbd, 0xd4, 0xb3, 0x09, 0x9e, 0x19, 0x10, 0x34,
	0xb2, 0xba, 0xf1, 0x2e, 0xa1, 0xc7, 0x99, 0x57, 0x90, 0x2d, 0xd3, 0x8a, 0x13, 0xb5, 0xc8, 0x04,
	0xae, 0xe7, 0x08, 0x41, 0x6a, 0x96, 0xe0, 0x50, 0x8d, 0xe8, 0x5e, 0xa6, 0x04, 0x7b, 0x9b, 0xb5,
	0x6d, 0x47, 0xa6, 0x13, 0x6f, 0x9b, 0x5e, 0x76, 0xcd, 0x62, 0x5d, 0x32, 0x73, 0xbe, 0x46, 0x33,
	0x39, 0x87, 0xfe, 0x01, 0xab, 0xb7, 0x03, 0xf8, 0x29, 0xcb, 0xd4, 0x50, 0x97, 0xb0, 0x84, 0x6f,
	0xcd, 0x6d, 0xe6, 0x6c, 0x22, 0xec, 0xc6, 0x2e, 0x23, 0xaf, 0xc1, 0x58, 0xe9, 0x37, 0x9e, 0x43,
	0x15, 0x7f, 0x40, 0x73, 0x05, 0xd6, 0x28, 0xe6, 0x61, 0xcc, 0x65, 0x8f, 0xec, 0x82, 0x99, 0xf4,
	0x9b, 0x1b, 0x49, 0x1d, 0x7f, 0x42, 0xf3, 0x05, 0x76, 0xc7, 0xf3, 0x42, 0xd7, 0x51, 0x4f, 0xf1,
	0x0d, 0xf8, 0x67, 0xfb, 0xfd, 0xfb, 0x46, 0x50, 0x02, 0x88, 0xd9, 0xb7, 0x2e, 0x13, 0x0a, 0xb0,
	0x57, 0x0c, 0x38, 0x33, 0x02, 0xf5, 0x21, 0xe3, 0x33, 0x9a, 0xdb, 0x68, 0x6f, 0xf5, 0x87, 0x8c,
	0xcf, 0xa8, 0xb5, 0xcd, 0x3e, 0xa2, 0x39, 0xa5, 0xb3, 0xde, 0xe1, 0xe9, 0x25, 0x67, 0x82, 0xbc,
	0x83, 0x67, 0x32, 0xeb, 0x33, 0x9a, 0xbd, 0xbf, 0x0f, 0x2d, 0x01, 0xae, 0xa1, 0xe9, 0x3e, 0x7f,
	0x14, 0x7a, 0xdc, 0xed, 0x91, 0xf7, 0xe0, 0x9c, 0xcc, 0x39, 0x1b, 0x50, 0x52, 0x1f, 0x3d, 0x7d,
	0x1e, 0xb8, 0x6d, 0xf5, 0x6a, 0xfe, 0x45, 0x7f, 0xf4, 0xe4, 0x5c, 0x9f, 0x93, 0x22, 0xde, 0x46,
	0x95, 0x3e, 0x9f, 0xda, 0xeb, 0x91, 0x60, 0xe4, 0x43, 0xc1, 0x64, 0xa7, 0x94, 0x37, 0x04, 0xc3,
	0x5b, 0x03, 0x01, 0xc1, 0x44, 0xc9, 0x47, 0xbd, 0xdd, 0x06, 0x3c, 0x14, 0xef, 0x21, 0xd2, 0x67,
	0xe1, 0xc1, 0x15, 0x0b, 0x64, 0x18, 0xf7, 0xc8, 0x27, 0x70, 0x55, 0x72, 0xae, 0x13, 0x53, 0xc5,
	0xcb, 0x68, 0x58, 0x39, 0x61, 0x09, 0xd4, 0xf2, 0xfd, 0xaa, 0xdf, 0xb9, 0x3e, 0xa3, 0x8d, 0x64,
	0x08, 0x4f, 0xa1, 0x7b, 0x57, 0x9e, 0x13, 0x08, 0xb2, 0x0f, 0x35, 0xfd, 0x03, 0x63, 0x74, 0x37,
	0xba, 0xe2, 0x94, 0x1c, 0xc0, 0x20, 0x5c, 0xc3, 0xbf, 0x2e, 0xea, 0x42, 0x58, 0xc7, 0xff, 0x30,
	0x69, 0x16, 0x30, 0x9e, 0x1d, 0xfe, 0x55, 0x34, 0x9a, 0x48, 0xcd, 0x61, 0x3a, 0xd2, 0x0f, 0x5b,
	0x8f, 0x9a, 0x73, 0xa4, 0x66, 0xe1, 0x54, 0x90, 0xe3, 0x64, 0x16, 0x4e, 0xc5, 0x41, 0xed, 0x9f,
	0xcd, 0x36, 0x97, 0x9d, 0x6e, 0x6b, 0xdd, 0x0d, 0xfd, 0x0d, 0x9f, 0xbb, 0x5f, 0x59, 0xf4, 0x66,
	0x77, 0x23, 0x14, 0xdf, 0xba, 0x2c, 0xee, 0xbd, 0x82, 0x0f, 0xec, 0x56, 0xf7, 0x72, 0x23, 0xfa,
	0xda, 0x7e, 0x9f, 0x7c, 0x66, 0xb7, 0xee, 0xc3, 0xe8, 0xf6, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x91, 0xbe, 0xa0, 0x01, 0x90, 0x0f, 0x00, 0x00,
}
