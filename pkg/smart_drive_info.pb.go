// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/smart_drive_info.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Drive information read by SMART controller utilizing autodetect.
type SmartDriveInfo struct {
	// Name of block device
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name"`
	// Drive model family
	ModelFamily string `protobuf:"bytes,2,opt,name=model_family,json=modelFamily,proto3" json:"model_family"`
	// Device Model
	DeviceModel string `protobuf:"bytes,3,opt,name=device_model,json=deviceModel,proto3" json:"device_model"`
	// Device serial number
	SerialNumber string `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number"`
	// Device Identifier
	LuWwnDeviceId string `protobuf:"bytes,5,opt,name=lu_wwn_device_id,json=luWwnDeviceId,proto3" json:"lu_wwn_device_id"`
	// Drive firmware version
	FirmwareVersion string `protobuf:"bytes,6,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version"`
	// Bytes of drive capacity
	UserCapacity string `protobuf:"bytes,7,opt,name=user_capacity,json=userCapacity,proto3" json:"user_capacity"`
	// Bytes of drive sector sizes
	SectorSizes string `protobuf:"bytes,8,opt,name=sector_sizes,json=sectorSizes,proto3" json:"sector_sizes"`
	// Drive RPM
	RotationRate string `protobuf:"bytes,9,opt,name=rotation_rate,json=rotationRate,proto3" json:"rotation_rate"`
	// Form factor if reported
	FormFactor string `protobuf:"bytes,10,opt,name=form_factor,json=formFactor,proto3" json:"form_factor"`
	// ATA version of drive
	AtaVersion string `protobuf:"bytes,11,opt,name=ata_version,json=ataVersion,proto3" json:"ata_version"`
	// Drive transport type
	TransportType string `protobuf:"bytes,12,opt,name=transport_type,json=transportType,proto3" json:"transport_type"`
	// SATA version
	SataVersion string `protobuf:"bytes,13,opt,name=sata_version,json=sataVersion,proto3" json:"sata_version"`
	// SMART support status
	SmartSupported string `protobuf:"bytes,14,opt,name=smart_supported,json=smartSupported,proto3" json:"smart_supported"`
	// SMART enabled status
	SmartEnabled string `protobuf:"bytes,15,opt,name=smart_enabled,json=smartEnabled,proto3" json:"smart_enabled"`
	// Packet device type
	PacketDeviceType string `protobuf:"bytes,16,opt,name=packet_device_type,json=packetDeviceType,proto3" json:"packet_device_type"`
	// Device power mode
	PowerMode string `protobuf:"bytes,17,opt,name=power_mode,json=powerMode,proto3" json:"power_mode"`
	// Warning messages from SMART controller
	Warnings             string   `protobuf:"bytes,18,opt,name=warnings,proto3" json:"warnings"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SmartDriveInfo) Reset()         { *m = SmartDriveInfo{} }
func (m *SmartDriveInfo) String() string { return proto.CompactTextString(m) }
func (*SmartDriveInfo) ProtoMessage()    {}
func (*SmartDriveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e93632d9c684fe0, []int{0}
}

func (m *SmartDriveInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SmartDriveInfo.Unmarshal(m, b)
}
func (m *SmartDriveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SmartDriveInfo.Marshal(b, m, deterministic)
}
func (m *SmartDriveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartDriveInfo.Merge(m, src)
}
func (m *SmartDriveInfo) XXX_Size() int {
	return xxx_messageInfo_SmartDriveInfo.Size(m)
}
func (m *SmartDriveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartDriveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SmartDriveInfo proto.InternalMessageInfo

func (m *SmartDriveInfo) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *SmartDriveInfo) GetModelFamily() string {
	if m != nil {
		return m.ModelFamily
	}
	return ""
}

func (m *SmartDriveInfo) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *SmartDriveInfo) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *SmartDriveInfo) GetLuWwnDeviceId() string {
	if m != nil {
		return m.LuWwnDeviceId
	}
	return ""
}

func (m *SmartDriveInfo) GetFirmwareVersion() string {
	if m != nil {
		return m.FirmwareVersion
	}
	return ""
}

func (m *SmartDriveInfo) GetUserCapacity() string {
	if m != nil {
		return m.UserCapacity
	}
	return ""
}

func (m *SmartDriveInfo) GetSectorSizes() string {
	if m != nil {
		return m.SectorSizes
	}
	return ""
}

func (m *SmartDriveInfo) GetRotationRate() string {
	if m != nil {
		return m.RotationRate
	}
	return ""
}

func (m *SmartDriveInfo) GetFormFactor() string {
	if m != nil {
		return m.FormFactor
	}
	return ""
}

func (m *SmartDriveInfo) GetAtaVersion() string {
	if m != nil {
		return m.AtaVersion
	}
	return ""
}

func (m *SmartDriveInfo) GetTransportType() string {
	if m != nil {
		return m.TransportType
	}
	return ""
}

func (m *SmartDriveInfo) GetSataVersion() string {
	if m != nil {
		return m.SataVersion
	}
	return ""
}

func (m *SmartDriveInfo) GetSmartSupported() string {
	if m != nil {
		return m.SmartSupported
	}
	return ""
}

func (m *SmartDriveInfo) GetSmartEnabled() string {
	if m != nil {
		return m.SmartEnabled
	}
	return ""
}

func (m *SmartDriveInfo) GetPacketDeviceType() string {
	if m != nil {
		return m.PacketDeviceType
	}
	return ""
}

func (m *SmartDriveInfo) GetPowerMode() string {
	if m != nil {
		return m.PowerMode
	}
	return ""
}

func (m *SmartDriveInfo) GetWarnings() string {
	if m != nil {
		return m.Warnings
	}
	return ""
}

func init() {
	proto.RegisterType((*SmartDriveInfo)(nil), "schemas.SmartDriveInfo")
}

func init() { proto.RegisterFile("pb/smart_drive_info.proto", fileDescriptor_1e93632d9c684fe0) }

var fileDescriptor_1e93632d9c684fe0 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0x4b, 0x6f, 0xd4, 0x30,
	0x10, 0xc7, 0x55, 0xa0, 0x8f, 0xf5, 0x3e, 0xf1, 0xc9, 0x20, 0x21, 0x5e, 0x42, 0x05, 0x09, 0xba,
	0x08, 0x24, 0x38, 0x70, 0x83, 0x52, 0xa9, 0x07, 0x7a, 0xe8, 0x22, 0x90, 0xb8, 0x58, 0x93, 0x64,
	0xb2, 0xb5, 0x36, 0x7e, 0x60, 0x3b, 0x1b, 0x2d, 0x9f, 0x86, 0x8f, 0x5a, 0x79, 0x9c, 0xac, 0x7a,
	0xcc, 0x2f, 0x3f, 0xff, 0x3d, 0x9e, 0x19, 0xf6, 0xc8, 0x15, 0xcb, 0xa0, 0xc1, 0x47, 0x59, 0x79,
	0xb5, 0x45, 0xa9, 0x4c, 0x6d, 0xcf, 0x9c, 0xb7, 0xd1, 0xf2, 0xe3, 0x50, 0xde, 0xa0, 0x86, 0xf0,
	0xe2, 0xff, 0x21, 0x9b, 0xad, 0x92, 0x73, 0x9e, 0x94, 0x4b, 0x53, 0x5b, 0xfe, 0x94, 0x8d, 0x2b,
	0xdc, 0xaa, 0x12, 0xa5, 0x01, 0x8d, 0xe2, 0xe0, 0xd9, 0xc1, 0xeb, 0xd1, 0x35, 0xcb, 0xe8, 0x0a,
	0x34, 0xf2, 0xe7, 0x6c, 0xa2, 0x6d, 0x85, 0x8d, 0xac, 0x41, 0xab, 0x66, 0x27, 0xee, 0x91, 0x31,
	0x26, 0x76, 0x41, 0x28, 0x29, 0x7d, 0x06, 0x51, 0x71, 0x3f, 0x2b, 0x99, 0xfd, 0x48, 0x88, 0xbf,
	0x64, 0xd3, 0x80, 0x5e, 0x41, 0x23, 0x4d, 0xab, 0x0b, 0xf4, 0xe2, 0x01, 0x39, 0x93, 0x0c, 0xaf,
	0x88, 0xf1, 0x53, 0xb6, 0x68, 0x5a, 0xd9, 0x75, 0x46, 0xf6, 0x71, 0xaa, 0x12, 0x87, 0xe4, 0x4d,
	0x9b, 0xf6, 0x77, 0x67, 0xce, 0x89, 0x5e, 0x56, 0xfc, 0x0d, 0x5b, 0xd4, 0xca, 0xeb, 0x0e, 0x3c,
	0xca, 0x2d, 0xfa, 0xa0, 0xac, 0x11, 0x47, 0x24, 0xce, 0x07, 0xfe, 0x2b, 0xe3, 0x74, 0x71, 0x1b,
	0xd0, 0xcb, 0x12, 0x1c, 0x94, 0x2a, 0xee, 0xc4, 0x71, 0xbe, 0x38, 0xc1, 0x6f, 0x3d, 0x4b, 0x0f,
	0x08, 0x58, 0x46, 0xeb, 0x65, 0x50, 0xff, 0x30, 0x88, 0x93, 0xfc, 0x80, 0xcc, 0x56, 0x09, 0xa5,
	0x1c, 0x6f, 0x23, 0x44, 0x65, 0x8d, 0xf4, 0x10, 0x51, 0x8c, 0x72, 0xce, 0x00, 0xaf, 0x21, 0x62,
	0x6a, 0x66, 0x6d, 0xbd, 0x96, 0x35, 0xa4, 0x83, 0x82, 0xe5, 0x66, 0x26, 0x74, 0x41, 0x24, 0x09,
	0x10, 0x61, 0x5f, 0xf3, 0x38, 0x0b, 0x10, 0x61, 0x28, 0xf7, 0x15, 0x9b, 0x45, 0x0f, 0x26, 0x38,
	0xeb, 0xa3, 0x8c, 0x3b, 0x87, 0x62, 0x92, 0x1b, 0xb0, 0xa7, 0x3f, 0x77, 0x8e, 0x86, 0x12, 0xee,
	0x06, 0x4d, 0xfb, 0x82, 0xef, 0x24, 0x9d, 0xb2, 0x79, 0x5e, 0x87, 0xd0, 0xba, 0x74, 0x0e, 0x2b,
	0x31, 0x23, 0x6b, 0x46, 0x78, 0x35, 0x50, 0x1a, 0x0d, 0x89, 0x68, 0xa0, 0x68, 0xb0, 0x12, 0xf3,
	0x7e, 0x34, 0x09, 0x7e, 0xcf, 0x8c, 0xbf, 0x65, 0xdc, 0x41, 0xb9, 0xc1, 0x38, 0x8c, 0x86, 0x6a,
	0x5b, 0x90, 0xb9, 0xc8, 0x7f, 0xf2, 0x74, 0xa8, 0xbc, 0x27, 0x8c, 0x39, 0xdb, 0xa1, 0xa7, 0x7d,
	0x10, 0x0f, 0xc9, 0x1a, 0x11, 0x49, 0xdb, 0xc0, 0x1f, 0xb3, 0x93, 0x0e, 0xbc, 0x51, 0x66, 0x1d,
	0x04, 0xa7, 0x9f, 0xfb, 0xef, 0xaf, 0x1f, 0xfe, 0xbc, 0x5f, 0xab, 0x78, 0xd3, 0x16, 0x67, 0xa5,
	0xd5, 0x4b, 0xad, 0xca, 0x0d, 0xba, 0xcf, 0x9f, 0x96, 0x36, 0xfc, 0x6d, 0xd1, 0xef, 0xde, 0xd1,
	0x42, 0x17, 0x6d, 0xbd, 0x74, 0x9b, 0xf5, 0x97, 0x7e, 0xad, 0x8b, 0x23, 0xa2, 0x1f, 0x6f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x8d, 0x1f, 0x5d, 0xfb, 0x03, 0x03, 0x00, 0x00,
}
