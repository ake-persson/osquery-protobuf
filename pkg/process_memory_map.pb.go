// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/process_memory_map.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Process memory mapped files and pseudo device/regions.
type ProcessMemoryMap struct {
	// Process (or thread) ID
	Pid int32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid"`
	// Virtual start address (hex)
	Start string `protobuf:"bytes,2,opt,name=start,proto3" json:"start"`
	// Virtual end address (hex)
	End string `protobuf:"bytes,3,opt,name=end,proto3" json:"end"`
	// r=read
	Permissions string `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions"`
	// Offset into mapped path
	Offset int64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset"`
	// MA:MI Major/minor device ID
	Device string `protobuf:"bytes,6,opt,name=device,proto3" json:"device"`
	// Mapped path inode
	Inode int32 `protobuf:"varint,7,opt,name=inode,proto3" json:"inode"`
	// Path to mapped file or mapped type
	Path string `protobuf:"bytes,8,opt,name=path,proto3" json:"path"`
	// 1 If path is a pseudo path
	Pseudo               int32    `protobuf:"varint,9,opt,name=pseudo,proto3" json:"pseudo"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessMemoryMap) Reset()         { *m = ProcessMemoryMap{} }
func (m *ProcessMemoryMap) String() string { return proto.CompactTextString(m) }
func (*ProcessMemoryMap) ProtoMessage()    {}
func (*ProcessMemoryMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6b85d80cb1e8318, []int{0}
}

func (m *ProcessMemoryMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessMemoryMap.Unmarshal(m, b)
}
func (m *ProcessMemoryMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessMemoryMap.Marshal(b, m, deterministic)
}
func (m *ProcessMemoryMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessMemoryMap.Merge(m, src)
}
func (m *ProcessMemoryMap) XXX_Size() int {
	return xxx_messageInfo_ProcessMemoryMap.Size(m)
}
func (m *ProcessMemoryMap) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessMemoryMap.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessMemoryMap proto.InternalMessageInfo

func (m *ProcessMemoryMap) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcessMemoryMap) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *ProcessMemoryMap) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *ProcessMemoryMap) GetPermissions() string {
	if m != nil {
		return m.Permissions
	}
	return ""
}

func (m *ProcessMemoryMap) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ProcessMemoryMap) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ProcessMemoryMap) GetInode() int32 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *ProcessMemoryMap) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ProcessMemoryMap) GetPseudo() int32 {
	if m != nil {
		return m.Pseudo
	}
	return 0
}

func init() {
	proto.RegisterType((*ProcessMemoryMap)(nil), "schemas.ProcessMemoryMap")
}

func init() { proto.RegisterFile("pb/process_memory_map.proto", fileDescriptor_d6b85d80cb1e8318) }

var fileDescriptor_d6b85d80cb1e8318 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x86, 0x15, 0xda, 0xa4, 0xd4, 0x2c, 0x95, 0x85, 0x90, 0x25, 0x96, 0x88, 0x29, 0x0b, 0x0d,
	0x02, 0x09, 0x06, 0x36, 0xf6, 0x4a, 0x28, 0x23, 0x4b, 0x95, 0x8f, 0x4b, 0x63, 0x55, 0xce, 0x1d,
	0x3e, 0x07, 0xa9, 0xff, 0x96, 0x9f, 0x82, 0x7c, 0xc9, 0xc0, 0xf6, 0x3e, 0xaf, 0x1f, 0xdb, 0xa7,
	0x53, 0xf7, 0xd4, 0x94, 0xe4, 0xb1, 0x05, 0xe6, 0xa3, 0x03, 0x87, 0xfe, 0x72, 0x74, 0x35, 0xed,
	0xc9, 0x63, 0x40, 0xbd, 0xe1, 0x76, 0x00, 0x57, 0xf3, 0xc3, 0x6f, 0xa2, 0x76, 0x9f, 0xb3, 0x75,
	0x10, 0xe9, 0x50, 0x93, 0xde, 0xa9, 0x15, 0xd9, 0xce, 0x24, 0x79, 0x52, 0xa4, 0x55, 0x8c, 0xfa,
	0x56, 0xa5, 0x1c, 0x6a, 0x1f, 0xcc, 0x55, 0x9e, 0x14, 0xdb, 0x6a, 0x86, 0xe8, 0xc1, 0xd8, 0x99,
	0x95, 0x74, 0x31, 0xea, 0x5c, 0xdd, 0x10, 0x78, 0x67, 0x99, 0x2d, 0x8e, 0x6c, 0xd6, 0x72, 0xf2,
	0xbf, 0xd2, 0x77, 0x2a, 0xc3, 0xbe, 0x67, 0x08, 0x26, 0xcd, 0x93, 0x62, 0x55, 0x2d, 0x14, 0xfb,
	0x0e, 0x7e, 0x6c, 0x0b, 0x26, 0x93, 0x4b, 0x0b, 0xc5, 0x9f, 0xed, 0x88, 0x1d, 0x98, 0x8d, 0x4c,
	0x33, 0x83, 0xd6, 0x6a, 0x4d, 0x75, 0x18, 0xcc, 0xb5, 0xb8, 0x92, 0xe3, 0x0b, 0xc4, 0x30, 0x75,
	0x68, 0xb6, 0xa2, 0x2e, 0xf4, 0xf1, 0xfc, 0xf5, 0x74, 0xb2, 0x61, 0x98, 0x9a, 0x7d, 0x8b, 0xae,
	0x74, 0xb6, 0x3d, 0x03, 0xbd, 0xbd, 0x96, 0xc8, 0xdf, 0x13, 0xf8, 0xcb, 0xa3, 0x2c, 0xa4, 0x99,
	0xfa, 0x92, 0xce, 0xa7, 0xf7, 0x65, 0x2d, 0x4d, 0x26, 0xed, 0xcb, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x90, 0x7f, 0xd2, 0xe0, 0x45, 0x01, 0x00, 0x00,
}
