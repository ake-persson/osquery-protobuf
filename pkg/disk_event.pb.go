// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/disk_event.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Track DMG disk image events (appearance/disappearance) when opened.
type DiskEvent struct {
	// Appear or disappear
	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action"`
	// Path of the DMG file accessed
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path"`
	// Disk event name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	// UUID of the volume inside DMG if available
	Uuid string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid"`
	// Size of partition in bytes
	Size int64 `protobuf:"varint,5,opt,name=size,proto3" json:"size"`
	// 1 if ejectable
	Ejectable int32 `protobuf:"varint,6,opt,name=ejectable,proto3" json:"ejectable"`
	// 1 if mountable
	Mountable int32 `protobuf:"varint,7,opt,name=mountable,proto3" json:"mountable"`
	// 1 if writable
	Writable int32 `protobuf:"varint,8,opt,name=writable,proto3" json:"writable"`
	// Disk event content
	Content string `protobuf:"bytes,9,opt,name=content,proto3" json:"content"`
	// Disk event media name string
	MediaName string `protobuf:"bytes,10,opt,name=media_name,json=mediaName,proto3" json:"media_name"`
	// Disk event vendor string
	Vendor string `protobuf:"bytes,11,opt,name=vendor,proto3" json:"vendor"`
	// Filesystem if available
	Filesystem string `protobuf:"bytes,12,opt,name=filesystem,proto3" json:"filesystem"`
	// UDIF Master checksum if available (CRC32)
	Checksum string `protobuf:"bytes,13,opt,name=checksum,proto3" json:"checksum"`
	// Time of appearance/disappearance in UNIX time
	Time int64 `protobuf:"varint,14,opt,name=time,proto3" json:"time"`
	// Event ID
	Eid                  string   `protobuf:"bytes,15,opt,name=eid,proto3" json:"eid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiskEvent) Reset()         { *m = DiskEvent{} }
func (m *DiskEvent) String() string { return proto.CompactTextString(m) }
func (*DiskEvent) ProtoMessage()    {}
func (*DiskEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0a30fb8027730a0, []int{0}
}

func (m *DiskEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiskEvent.Unmarshal(m, b)
}
func (m *DiskEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiskEvent.Marshal(b, m, deterministic)
}
func (m *DiskEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiskEvent.Merge(m, src)
}
func (m *DiskEvent) XXX_Size() int {
	return xxx_messageInfo_DiskEvent.Size(m)
}
func (m *DiskEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DiskEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DiskEvent proto.InternalMessageInfo

func (m *DiskEvent) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *DiskEvent) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DiskEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DiskEvent) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *DiskEvent) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *DiskEvent) GetEjectable() int32 {
	if m != nil {
		return m.Ejectable
	}
	return 0
}

func (m *DiskEvent) GetMountable() int32 {
	if m != nil {
		return m.Mountable
	}
	return 0
}

func (m *DiskEvent) GetWritable() int32 {
	if m != nil {
		return m.Writable
	}
	return 0
}

func (m *DiskEvent) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *DiskEvent) GetMediaName() string {
	if m != nil {
		return m.MediaName
	}
	return ""
}

func (m *DiskEvent) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *DiskEvent) GetFilesystem() string {
	if m != nil {
		return m.Filesystem
	}
	return ""
}

func (m *DiskEvent) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *DiskEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *DiskEvent) GetEid() string {
	if m != nil {
		return m.Eid
	}
	return ""
}

func init() {
	proto.RegisterType((*DiskEvent)(nil), "schemas.DiskEvent")
}

func init() { proto.RegisterFile("pb/disk_event.proto", fileDescriptor_d0a30fb8027730a0) }

var fileDescriptor_d0a30fb8027730a0 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xbb, 0x4f, 0xfb, 0x30,
	0x14, 0x85, 0x95, 0x3e, 0xd2, 0xe6, 0xfe, 0x9e, 0x32, 0x52, 0x65, 0x21, 0x40, 0x15, 0x53, 0x17,
	0x1a, 0x04, 0x12, 0x0c, 0x6c, 0x08, 0x56, 0x86, 0x8e, 0x2c, 0x55, 0xe2, 0xdc, 0x36, 0x26, 0xb5,
	0x1d, 0x62, 0xbb, 0xa8, 0xfc, 0xf1, 0x08, 0xf9, 0xba, 0x14, 0xb6, 0x73, 0xbe, 0xcf, 0xc3, 0xb9,
	0x32, 0x1c, 0xb5, 0x65, 0x5e, 0x49, 0xdb, 0x2c, 0x71, 0x8b, 0xda, 0xcd, 0xdb, 0xce, 0x38, 0xc3,
	0x46, 0x56, 0xd4, 0xa8, 0x0a, 0x7b, 0xfe, 0xd1, 0x83, 0xec, 0x41, 0xda, 0xe6, 0x31, 0x48, 0x36,
	0x81, 0xb4, 0x10, 0x4e, 0x1a, 0xcd, 0x93, 0x69, 0x32, 0xcb, 0x16, 0xfb, 0xc6, 0x18, 0x0c, 0xda,
	0xc2, 0xd5, 0xbc, 0x47, 0x94, 0x72, 0x60, 0xba, 0x50, 0xc8, 0xfb, 0x91, 0x85, 0x1c, 0x98, 0xf7,
	0xb2, 0xe2, 0x83, 0xc8, 0x42, 0x0e, 0xcc, 0xca, 0x77, 0xe4, 0xc3, 0x69, 0x32, 0xeb, 0x2f, 0x28,
	0xb3, 0x13, 0xc8, 0xf0, 0x05, 0x85, 0x2b, 0xca, 0x0d, 0xf2, 0x74, 0x9a, 0xcc, 0x86, 0x8b, 0x6f,
	0x10, 0xac, 0x32, 0x5e, 0x47, 0x3b, 0x8a, 0xf6, 0x00, 0xd8, 0x31, 0x8c, 0xdf, 0x3a, 0x19, 0xe5,
	0x98, 0xe4, 0xa1, 0x33, 0x0e, 0x23, 0x61, 0xb4, 0x43, 0xed, 0x78, 0x46, 0x13, 0xbe, 0x2a, 0x3b,
	0x05, 0x50, 0x58, 0xc9, 0x62, 0x49, 0x9b, 0x81, 0x64, 0x46, 0xe4, 0x29, 0x0c, 0x9f, 0x40, 0xba,
	0x45, 0x5d, 0x99, 0x8e, 0xff, 0x8a, 0x87, 0xc7, 0xc6, 0xce, 0x00, 0x56, 0x72, 0x83, 0x76, 0x67,
	0x1d, 0x2a, 0xfe, 0x9b, 0xdc, 0x0f, 0x12, 0xc6, 0x88, 0x1a, 0x45, 0x63, 0xbd, 0xe2, 0x7f, 0xc8,
	0x1e, 0x7a, 0x38, 0xdc, 0x49, 0x85, 0xfc, 0x6f, 0x3c, 0x3c, 0x64, 0xf6, 0x1f, 0xfa, 0x28, 0x2b,
	0xfe, 0x8f, 0x9e, 0x86, 0x78, 0x7f, 0xf5, 0x7c, 0xb9, 0x96, 0xae, 0xf6, 0xe5, 0x5c, 0x18, 0x95,
	0x2b, 0x29, 0x1a, 0x6c, 0x6f, 0x6f, 0x72, 0x63, 0x5f, 0x3d, 0x76, 0xbb, 0x0b, 0xfa, 0xae, 0xd2,
	0xaf, 0xf2, 0xb6, 0x59, 0xdf, 0xed, 0x3f, 0xad, 0x4c, 0x89, 0x5e, 0x7f, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x67, 0x3f, 0xdc, 0x5c, 0xdb, 0x01, 0x00, 0x00,
}
