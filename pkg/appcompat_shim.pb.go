// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/appcompat_shim.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Application Compatibility shims are a way to persist malware. This table presents the AppCompat Shim information from the registry in a nice format. See http://files.brucon.org/2015/Tomczak_and_Ballenthin_Shims_for_the_Win.pdf for more details.
type AppcompatShim struct {
	// Name of the executable that is being shimmed. This is pulled from the registry.
	Executable string `protobuf:"bytes,1,opt,name=executable,proto3" json:"executable"`
	// This is the path to the SDB database.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path"`
	// Description of the SDB.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description"`
	// Install time of the SDB
	InstallTime int32 `protobuf:"varint,4,opt,name=install_time,json=installTime,proto3" json:"install_time"`
	// Type of the SDB database.
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type"`
	// Unique GUID of the SDB.
	SdbId                string   `protobuf:"bytes,6,opt,name=sdb_id,json=sdbId,proto3" json:"sdb_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppcompatShim) Reset()         { *m = AppcompatShim{} }
func (m *AppcompatShim) String() string { return proto.CompactTextString(m) }
func (*AppcompatShim) ProtoMessage()    {}
func (*AppcompatShim) Descriptor() ([]byte, []int) {
	return fileDescriptor_c914138999893753, []int{0}
}

func (m *AppcompatShim) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppcompatShim.Unmarshal(m, b)
}
func (m *AppcompatShim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppcompatShim.Marshal(b, m, deterministic)
}
func (m *AppcompatShim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppcompatShim.Merge(m, src)
}
func (m *AppcompatShim) XXX_Size() int {
	return xxx_messageInfo_AppcompatShim.Size(m)
}
func (m *AppcompatShim) XXX_DiscardUnknown() {
	xxx_messageInfo_AppcompatShim.DiscardUnknown(m)
}

var xxx_messageInfo_AppcompatShim proto.InternalMessageInfo

func (m *AppcompatShim) GetExecutable() string {
	if m != nil {
		return m.Executable
	}
	return ""
}

func (m *AppcompatShim) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *AppcompatShim) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AppcompatShim) GetInstallTime() int32 {
	if m != nil {
		return m.InstallTime
	}
	return 0
}

func (m *AppcompatShim) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AppcompatShim) GetSdbId() string {
	if m != nil {
		return m.SdbId
	}
	return ""
}

func init() {
	proto.RegisterType((*AppcompatShim)(nil), "schemas.AppcompatShim")
}

func init() { proto.RegisterFile("pb/appcompat_shim.proto", fileDescriptor_c914138999893753) }

var fileDescriptor_c914138999893753 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcf, 0x3f, 0x4b, 0x03, 0x41,
	0x10, 0x05, 0x70, 0x4e, 0x73, 0x27, 0x6e, 0xb4, 0x59, 0x10, 0xb7, 0x92, 0xd3, 0x2a, 0x8d, 0x39,
	0x51, 0xd0, 0xc2, 0x4a, 0x3b, 0xdb, 0x68, 0x65, 0x73, 0xec, 0x9f, 0x31, 0x3b, 0xe4, 0x36, 0x3b,
	0xde, 0xce, 0x82, 0xf9, 0x5c, 0x7e, 0x41, 0x71, 0x8d, 0x70, 0xdd, 0xf0, 0x7b, 0xc3, 0x83, 0x27,
	0xce, 0xc9, 0x74, 0x9a, 0xc8, 0xc6, 0x40, 0x9a, 0xfb, 0xe4, 0x31, 0x2c, 0x69, 0x8c, 0x1c, 0xe5,
	0x51, 0xb2, 0x1e, 0x82, 0x4e, 0x57, 0xdf, 0x95, 0x38, 0x7d, 0xfa, 0xff, 0x78, 0xf5, 0x18, 0xe4,
	0x85, 0x10, 0xf0, 0x05, 0x36, 0xb3, 0x36, 0x03, 0xa8, 0xaa, 0xad, 0x16, 0xc7, 0xab, 0x89, 0x48,
	0x29, 0x66, 0xa4, 0xd9, 0xab, 0x83, 0x92, 0x94, 0x5b, 0xb6, 0x62, 0xee, 0x20, 0xd9, 0x11, 0x89,
	0x31, 0x6e, 0xd5, 0x61, 0x89, 0xa6, 0x24, 0x2f, 0xc5, 0x09, 0x6e, 0x13, 0xeb, 0x61, 0xe8, 0x19,
	0x03, 0xa8, 0x59, 0x5b, 0x2d, 0xea, 0xd5, 0x7c, 0x6f, 0x6f, 0x18, 0x4a, 0x31, 0xef, 0x08, 0x54,
	0xfd, 0x57, 0xfc, 0x7b, 0xcb, 0x33, 0xd1, 0x24, 0x67, 0x7a, 0x74, 0xaa, 0x29, 0x5a, 0x27, 0x67,
	0x5e, 0xdc, 0xf3, 0xed, 0xfb, 0xcd, 0x1a, 0xd9, 0x67, 0xb3, 0xb4, 0x31, 0x74, 0x01, 0xed, 0x06,
	0xe8, 0xe1, 0xbe, 0x8b, 0xe9, 0x33, 0xc3, 0xb8, 0xbb, 0x2e, 0x1b, 0x4d, 0xfe, 0xe8, 0x68, 0xb3,
	0x7e, 0xdc, 0x2f, 0x35, 0x4d, 0xd1, 0xbb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x91, 0x34, 0xbc,
	0x19, 0x14, 0x01, 0x00, 0x00,
}
