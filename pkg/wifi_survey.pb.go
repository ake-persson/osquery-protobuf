// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/wifi_survey.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Scan for nearby WiFi networks.
type WifiSurvey struct {
	// Name of the interface
	Interface string `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface"`
	// SSID octets of the network
	Ssid string `protobuf:"bytes,2,opt,name=ssid,proto3" json:"ssid"`
	// The current basic service set identifier
	Bssid string `protobuf:"bytes,3,opt,name=bssid,proto3" json:"bssid"`
	// Name of the network
	NetworkName string `protobuf:"bytes,4,opt,name=network_name,json=networkName,proto3" json:"network_name"`
	// The country code (ISO/IEC 3166-1:1997) for the network
	CountryCode string `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code"`
	// The current received signal strength indication (dbm)
	Rssi int32 `protobuf:"varint,6,opt,name=rssi,proto3" json:"rssi"`
	// The current noise measurement (dBm)
	Noise int32 `protobuf:"varint,7,opt,name=noise,proto3" json:"noise"`
	// Channel number
	Channel int32 `protobuf:"varint,8,opt,name=channel,proto3" json:"channel"`
	// Channel width
	ChannelWidth int32 `protobuf:"varint,9,opt,name=channel_width,json=channelWidth,proto3" json:"channel_width"`
	// Channel band
	ChannelBand          int32    `protobuf:"varint,10,opt,name=channel_band,json=channelBand,proto3" json:"channel_band"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WifiSurvey) Reset()         { *m = WifiSurvey{} }
func (m *WifiSurvey) String() string { return proto.CompactTextString(m) }
func (*WifiSurvey) ProtoMessage()    {}
func (*WifiSurvey) Descriptor() ([]byte, []int) {
	return fileDescriptor_eda3b67e90254d4a, []int{0}
}

func (m *WifiSurvey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WifiSurvey.Unmarshal(m, b)
}
func (m *WifiSurvey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WifiSurvey.Marshal(b, m, deterministic)
}
func (m *WifiSurvey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WifiSurvey.Merge(m, src)
}
func (m *WifiSurvey) XXX_Size() int {
	return xxx_messageInfo_WifiSurvey.Size(m)
}
func (m *WifiSurvey) XXX_DiscardUnknown() {
	xxx_messageInfo_WifiSurvey.DiscardUnknown(m)
}

var xxx_messageInfo_WifiSurvey proto.InternalMessageInfo

func (m *WifiSurvey) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *WifiSurvey) GetSsid() string {
	if m != nil {
		return m.Ssid
	}
	return ""
}

func (m *WifiSurvey) GetBssid() string {
	if m != nil {
		return m.Bssid
	}
	return ""
}

func (m *WifiSurvey) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *WifiSurvey) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *WifiSurvey) GetRssi() int32 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func (m *WifiSurvey) GetNoise() int32 {
	if m != nil {
		return m.Noise
	}
	return 0
}

func (m *WifiSurvey) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *WifiSurvey) GetChannelWidth() int32 {
	if m != nil {
		return m.ChannelWidth
	}
	return 0
}

func (m *WifiSurvey) GetChannelBand() int32 {
	if m != nil {
		return m.ChannelBand
	}
	return 0
}

func init() {
	proto.RegisterType((*WifiSurvey)(nil), "schemas.WifiSurvey")
}

func init() { proto.RegisterFile("pb/wifi_survey.proto", fileDescriptor_eda3b67e90254d4a) }

var fileDescriptor_eda3b67e90254d4a = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0xd0, 0x3f, 0x4f, 0xf3, 0x30,
	0x10, 0x06, 0x70, 0xb5, 0x6f, 0xd3, 0xbc, 0x71, 0xcb, 0x62, 0x75, 0xf0, 0xc0, 0x50, 0x60, 0xe9,
	0x42, 0x83, 0x40, 0x82, 0x81, 0xad, 0xec, 0x0c, 0x65, 0xa8, 0xc4, 0x12, 0xf9, 0xcf, 0xa5, 0xb1,
	0x42, 0xec, 0x60, 0x3b, 0x44, 0xf9, 0x42, 0x7c, 0x4e, 0x94, 0x8b, 0x11, 0xdb, 0xdd, 0xef, 0x79,
	0x24, 0x5b, 0x47, 0x36, 0xad, 0xc8, 0x7b, 0x5d, 0xea, 0xc2, 0x77, 0xee, 0x0b, 0x86, 0x7d, 0xeb,
	0x6c, 0xb0, 0x34, 0xf5, 0xb2, 0x82, 0x86, 0xfb, 0xeb, 0xef, 0x39, 0x21, 0x27, 0x5d, 0xea, 0x37,
	0x4c, 0xe9, 0x25, 0xc9, 0xb4, 0x09, 0xe0, 0x4a, 0x2e, 0x81, 0xcd, 0xb6, 0xb3, 0x5d, 0x76, 0xfc,
	0x03, 0x4a, 0xc9, 0xc2, 0x7b, 0xad, 0xd8, 0x1c, 0x03, 0x9c, 0xe9, 0x86, 0x24, 0x02, 0xf1, 0x1f,
	0xe2, 0xb4, 0xd0, 0x2b, 0xb2, 0x36, 0x10, 0x7a, 0xeb, 0xea, 0xc2, 0xf0, 0x06, 0xd8, 0x02, 0xc3,
	0x55, 0xb4, 0x57, 0xde, 0xc0, 0x58, 0x91, 0xb6, 0x33, 0xc1, 0x0d, 0x85, 0xb4, 0x0a, 0x58, 0x32,
	0x55, 0xa2, 0xbd, 0x58, 0x85, 0xef, 0x39, 0xef, 0x35, 0x5b, 0x6e, 0x67, 0xbb, 0xe4, 0x88, 0xf3,
	0xf8, 0x9e, 0xb1, 0xda, 0x03, 0x4b, 0x11, 0xa7, 0x85, 0x32, 0x92, 0xca, 0x8a, 0x1b, 0x03, 0x1f,
	0xec, 0x3f, 0xfa, 0xef, 0x4a, 0x6f, 0xc8, 0x45, 0x1c, 0x8b, 0x5e, 0xab, 0x50, 0xb1, 0x0c, 0xf3,
	0x75, 0xc4, 0xd3, 0x68, 0xf8, 0x97, 0x58, 0x12, 0xdc, 0x28, 0x46, 0xb0, 0xb3, 0x8a, 0x76, 0xe0,
	0x46, 0x1d, 0xee, 0xdf, 0xef, 0xce, 0x3a, 0x54, 0x9d, 0xd8, 0x4b, 0xdb, 0xe4, 0x8d, 0x96, 0x35,
	0xb4, 0x4f, 0x8f, 0xb9, 0xf5, 0x9f, 0x1d, 0xb8, 0xe1, 0x16, 0xcf, 0x2a, 0xba, 0x32, 0x6f, 0xeb,
	0xf3, 0x73, 0x3c, 0xae, 0x58, 0xa2, 0x3e, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xaf, 0xc9,
	0x8e, 0x84, 0x01, 0x00, 0x00,
}
