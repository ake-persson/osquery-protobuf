// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/docker_info.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Docker system information.
type DockerInfo struct {
	// Docker system ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	// Total number of containers
	Containers int32 `protobuf:"varint,2,opt,name=containers,proto3" json:"containers"`
	// Number of containers currently running
	ContainersRunning int32 `protobuf:"varint,3,opt,name=containers_running,json=containersRunning,proto3" json:"containers_running"`
	// Number of containers in paused state
	ContainersPaused int32 `protobuf:"varint,4,opt,name=containers_paused,json=containersPaused,proto3" json:"containers_paused"`
	// Number of containers in stopped state
	ContainersStopped int32 `protobuf:"varint,5,opt,name=containers_stopped,json=containersStopped,proto3" json:"containers_stopped"`
	// Number of images
	Images int32 `protobuf:"varint,6,opt,name=images,proto3" json:"images"`
	// Storage driver
	StorageDriver string `protobuf:"bytes,7,opt,name=storage_driver,json=storageDriver,proto3" json:"storage_driver"`
	// 1 if memory limit support is enabled. 0 otherwise
	MemoryLimit int32 `protobuf:"varint,8,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit"`
	// 1 if swap limit support is enabled. 0 otherwise
	SwapLimit int32 `protobuf:"varint,9,opt,name=swap_limit,json=swapLimit,proto3" json:"swap_limit"`
	// 1 if kernel memory limit support is enabled. 0 otherwise
	KernelMemory int32 `protobuf:"varint,10,opt,name=kernel_memory,json=kernelMemory,proto3" json:"kernel_memory"`
	// 1 if CPU Completely Fair Scheduler (CFS) period support is enabled. 0 otherwise
	CpuCfsPeriod int32 `protobuf:"varint,11,opt,name=cpu_cfs_period,json=cpuCfsPeriod,proto3" json:"cpu_cfs_period"`
	// 1 if CPU Completely Fair Scheduler (CFS) quota support is enabled. 0 otherwise
	CpuCfsQuota int32 `protobuf:"varint,12,opt,name=cpu_cfs_quota,json=cpuCfsQuota,proto3" json:"cpu_cfs_quota"`
	// 1 if CPU share weighting support is enabled. 0 otherwise
	CpuShares int32 `protobuf:"varint,13,opt,name=cpu_shares,json=cpuShares,proto3" json:"cpu_shares"`
	// 1 if CPU set selection support is enabled. 0 otherwise
	CpuSet int32 `protobuf:"varint,14,opt,name=cpu_set,json=cpuSet,proto3" json:"cpu_set"`
	// 1 if IPv4 forwarding is enabled. 0 otherwise
	Ipv4Forwarding int32 `protobuf:"varint,15,opt,name=ipv4_forwarding,json=ipv4Forwarding,proto3" json:"ipv4_forwarding"`
	// 1 if bridge netfilter iptables is enabled. 0 otherwise
	BridgeNfIptables int32 `protobuf:"varint,16,opt,name=bridge_nf_iptables,json=bridgeNfIptables,proto3" json:"bridge_nf_iptables"`
	// 1 if bridge netfilter ip6tables is enabled. 0 otherwise
	BridgeNfIp6Tables int32 `protobuf:"varint,17,opt,name=bridge_nf_ip6tables,json=bridgeNfIp6tables,proto3" json:"bridge_nf_ip6tables"`
	// 1 if Out-of-memory kill is disabled. 0 otherwise
	OomKillDisable int32 `protobuf:"varint,18,opt,name=oom_kill_disable,json=oomKillDisable,proto3" json:"oom_kill_disable"`
	// Logging driver
	LoggingDriver string `protobuf:"bytes,19,opt,name=logging_driver,json=loggingDriver,proto3" json:"logging_driver"`
	// Control groups driver
	CgroupDriver string `protobuf:"bytes,20,opt,name=cgroup_driver,json=cgroupDriver,proto3" json:"cgroup_driver"`
	// Kernel version
	KernelVersion string `protobuf:"bytes,21,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version"`
	// Operating system
	Os string `protobuf:"bytes,22,opt,name=os,proto3" json:"os"`
	// Operating system type
	OsType string `protobuf:"bytes,23,opt,name=os_type,json=osType,proto3" json:"os_type"`
	// Hardware architecture
	Architecture string `protobuf:"bytes,24,opt,name=architecture,proto3" json:"architecture"`
	// Number of CPUs
	Cpus int32 `protobuf:"varint,25,opt,name=cpus,proto3" json:"cpus"`
	// Total memory
	Memory int64 `protobuf:"varint,26,opt,name=memory,proto3" json:"memory"`
	// HTTP proxy
	HttpProxy string `protobuf:"bytes,27,opt,name=http_proxy,json=httpProxy,proto3" json:"http_proxy"`
	// HTTPS proxy
	HttpsProxy string `protobuf:"bytes,28,opt,name=https_proxy,json=httpsProxy,proto3" json:"https_proxy"`
	// Comma-separated list of domain extensions proxy should not be used for
	NoProxy string `protobuf:"bytes,29,opt,name=no_proxy,json=noProxy,proto3" json:"no_proxy"`
	// Name of the docker host
	Name string `protobuf:"bytes,30,opt,name=name,proto3" json:"name"`
	// Server version
	ServerVersion string `protobuf:"bytes,31,opt,name=server_version,json=serverVersion,proto3" json:"server_version"`
	// Docker root directory
	RootDir              string   `protobuf:"bytes,32,opt,name=root_dir,json=rootDir,proto3" json:"root_dir"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DockerInfo) Reset()         { *m = DockerInfo{} }
func (m *DockerInfo) String() string { return proto.CompactTextString(m) }
func (*DockerInfo) ProtoMessage()    {}
func (*DockerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_abf8d363fbbaa3d0, []int{0}
}

func (m *DockerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DockerInfo.Unmarshal(m, b)
}
func (m *DockerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DockerInfo.Marshal(b, m, deterministic)
}
func (m *DockerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerInfo.Merge(m, src)
}
func (m *DockerInfo) XXX_Size() int {
	return xxx_messageInfo_DockerInfo.Size(m)
}
func (m *DockerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DockerInfo proto.InternalMessageInfo

func (m *DockerInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DockerInfo) GetContainers() int32 {
	if m != nil {
		return m.Containers
	}
	return 0
}

func (m *DockerInfo) GetContainersRunning() int32 {
	if m != nil {
		return m.ContainersRunning
	}
	return 0
}

func (m *DockerInfo) GetContainersPaused() int32 {
	if m != nil {
		return m.ContainersPaused
	}
	return 0
}

func (m *DockerInfo) GetContainersStopped() int32 {
	if m != nil {
		return m.ContainersStopped
	}
	return 0
}

func (m *DockerInfo) GetImages() int32 {
	if m != nil {
		return m.Images
	}
	return 0
}

func (m *DockerInfo) GetStorageDriver() string {
	if m != nil {
		return m.StorageDriver
	}
	return ""
}

func (m *DockerInfo) GetMemoryLimit() int32 {
	if m != nil {
		return m.MemoryLimit
	}
	return 0
}

func (m *DockerInfo) GetSwapLimit() int32 {
	if m != nil {
		return m.SwapLimit
	}
	return 0
}

func (m *DockerInfo) GetKernelMemory() int32 {
	if m != nil {
		return m.KernelMemory
	}
	return 0
}

func (m *DockerInfo) GetCpuCfsPeriod() int32 {
	if m != nil {
		return m.CpuCfsPeriod
	}
	return 0
}

func (m *DockerInfo) GetCpuCfsQuota() int32 {
	if m != nil {
		return m.CpuCfsQuota
	}
	return 0
}

func (m *DockerInfo) GetCpuShares() int32 {
	if m != nil {
		return m.CpuShares
	}
	return 0
}

func (m *DockerInfo) GetCpuSet() int32 {
	if m != nil {
		return m.CpuSet
	}
	return 0
}

func (m *DockerInfo) GetIpv4Forwarding() int32 {
	if m != nil {
		return m.Ipv4Forwarding
	}
	return 0
}

func (m *DockerInfo) GetBridgeNfIptables() int32 {
	if m != nil {
		return m.BridgeNfIptables
	}
	return 0
}

func (m *DockerInfo) GetBridgeNfIp6Tables() int32 {
	if m != nil {
		return m.BridgeNfIp6Tables
	}
	return 0
}

func (m *DockerInfo) GetOomKillDisable() int32 {
	if m != nil {
		return m.OomKillDisable
	}
	return 0
}

func (m *DockerInfo) GetLoggingDriver() string {
	if m != nil {
		return m.LoggingDriver
	}
	return ""
}

func (m *DockerInfo) GetCgroupDriver() string {
	if m != nil {
		return m.CgroupDriver
	}
	return ""
}

func (m *DockerInfo) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *DockerInfo) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *DockerInfo) GetOsType() string {
	if m != nil {
		return m.OsType
	}
	return ""
}

func (m *DockerInfo) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

func (m *DockerInfo) GetCpus() int32 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *DockerInfo) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *DockerInfo) GetHttpProxy() string {
	if m != nil {
		return m.HttpProxy
	}
	return ""
}

func (m *DockerInfo) GetHttpsProxy() string {
	if m != nil {
		return m.HttpsProxy
	}
	return ""
}

func (m *DockerInfo) GetNoProxy() string {
	if m != nil {
		return m.NoProxy
	}
	return ""
}

func (m *DockerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DockerInfo) GetServerVersion() string {
	if m != nil {
		return m.ServerVersion
	}
	return ""
}

func (m *DockerInfo) GetRootDir() string {
	if m != nil {
		return m.RootDir
	}
	return ""
}

func init() {
	proto.RegisterType((*DockerInfo)(nil), "schemas.DockerInfo")
}

func init() { proto.RegisterFile("pb/docker_info.proto", fileDescriptor_abf8d363fbbaa3d0) }

var fileDescriptor_abf8d363fbbaa3d0 = []byte{
	// 654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x94, 0xdf, 0x4f, 0xdb, 0x3a,
	0x14, 0xc7, 0x55, 0x7e, 0xf4, 0x87, 0x69, 0x0b, 0x18, 0x2e, 0x98, 0x7b, 0x2f, 0xd0, 0x0b, 0x17,
	0xad, 0xd2, 0x06, 0x9d, 0xb6, 0x89, 0x3d, 0xec, 0x6d, 0xab, 0x26, 0xa1, 0xfd, 0x10, 0x2b, 0xd3,
	0x1e, 0xf6, 0x62, 0xa5, 0x89, 0x93, 0x5a, 0x4d, 0x72, 0x8c, 0xed, 0x94, 0xf5, 0x8f, 0xdb, 0xff,
	0x36, 0xf9, 0xd8, 0xa5, 0x15, 0x6f, 0x39, 0x9f, 0xef, 0x27, 0x27, 0x8e, 0x4f, 0x1c, 0xb2, 0xaf,
	0xc6, 0x83, 0x04, 0xe2, 0xa9, 0xd0, 0x5c, 0x96, 0x29, 0x5c, 0x29, 0x0d, 0x16, 0x68, 0xc3, 0xc4,
	0x13, 0x51, 0x44, 0xe6, 0xec, 0x77, 0x93, 0x90, 0x21, 0xc6, 0x37, 0x65, 0x0a, 0xb4, 0x4b, 0xd6,
	0x64, 0xc2, 0x6a, 0xbd, 0x5a, 0xbf, 0x35, 0x5a, 0x93, 0x09, 0x3d, 0x21, 0x24, 0x86, 0xd2, 0x46,
	0xb2, 0x14, 0xda, 0xb0, 0xb5, 0x5e, 0xad, 0xbf, 0x39, 0x5a, 0x21, 0xf4, 0x92, 0xd0, 0x65, 0xc5,
	0x75, 0x55, 0x96, 0xb2, 0xcc, 0xd8, 0x3a, 0x7a, 0xbb, 0xcb, 0x64, 0xe4, 0x03, 0xfa, 0x9c, 0xac,
	0x40, 0xae, 0xa2, 0xca, 0x88, 0x84, 0x6d, 0xa0, 0xbd, 0xb3, 0x0c, 0x6e, 0x91, 0x3f, 0xe9, 0x6d,
	0x2c, 0x28, 0x25, 0x12, 0xb6, 0xf9, 0xb4, 0xf7, 0x9d, 0x0f, 0xe8, 0x01, 0xa9, 0xcb, 0x22, 0xca,
	0x84, 0x61, 0x75, 0x54, 0x42, 0x45, 0x2f, 0x48, 0xd7, 0x58, 0xd0, 0x51, 0x26, 0x78, 0xa2, 0xe5,
	0x4c, 0x68, 0xd6, 0xc0, 0xd7, 0xeb, 0x04, 0x3a, 0x44, 0x48, 0xff, 0x23, 0xed, 0x42, 0x14, 0xa0,
	0xe7, 0x3c, 0x97, 0x85, 0xb4, 0xac, 0x89, 0x4d, 0xb6, 0x3c, 0xfb, 0xec, 0x10, 0x3d, 0x26, 0xc4,
	0x3c, 0x44, 0x2a, 0x08, 0x2d, 0x14, 0x5a, 0x8e, 0xf8, 0xf8, 0x9c, 0x74, 0xa6, 0x42, 0x97, 0x22,
	0xe7, 0xfe, 0x26, 0x46, 0xd0, 0x68, 0x7b, 0xf8, 0x05, 0x19, 0xfd, 0x9f, 0x74, 0x63, 0x55, 0xf1,
	0x38, 0x35, 0x5c, 0x09, 0x2d, 0x21, 0x61, 0x5b, 0xde, 0x8a, 0x55, 0xf5, 0x21, 0x35, 0xb7, 0xc8,
	0xe8, 0x19, 0xe9, 0x2c, 0xac, 0xfb, 0x0a, 0x6c, 0xc4, 0xda, 0x7e, 0x35, 0x5e, 0xfa, 0xe6, 0x90,
	0x5b, 0x8d, 0x73, 0xcc, 0x24, 0xd2, 0xc2, 0xb0, 0x8e, 0x5f, 0x4d, 0xac, 0xaa, 0x3b, 0x04, 0xf4,
	0x90, 0x34, 0x30, 0x16, 0x96, 0x75, 0xfd, 0x7e, 0xb8, 0x4c, 0x58, 0xfa, 0x8c, 0x6c, 0x4b, 0x35,
	0x7b, 0xc3, 0x53, 0xd0, 0x0f, 0x91, 0x4e, 0xdc, 0xbc, 0xb6, 0x51, 0xe8, 0x3a, 0xfc, 0xf1, 0x91,
	0xd2, 0x17, 0x84, 0x8e, 0xb5, 0x4c, 0x32, 0xc1, 0xcb, 0x94, 0x4b, 0x65, 0xa3, 0x71, 0x2e, 0x0c,
	0xdb, 0xf1, 0xd3, 0xf2, 0xc9, 0xd7, 0xf4, 0x26, 0x70, 0x7a, 0x45, 0xf6, 0x56, 0xed, 0xeb, 0xa0,
	0xef, 0xfa, 0x71, 0x2d, 0xf5, 0x10, 0xd0, 0x3e, 0xd9, 0x01, 0x28, 0xf8, 0x54, 0xe6, 0x39, 0x4f,
	0xa4, 0x71, 0x90, 0x51, 0xbf, 0x0e, 0x80, 0xe2, 0x93, 0xcc, 0xf3, 0xa1, 0xa7, 0x6e, 0x80, 0x39,
	0x64, 0x99, 0x2c, 0xb3, 0xc5, 0x00, 0xf7, 0xfc, 0x00, 0x03, 0x0d, 0x03, 0x3c, 0x27, 0x9d, 0x38,
	0xd3, 0x50, 0xa9, 0x85, 0xb5, 0x8f, 0x56, 0xdb, 0xc3, 0x20, 0x5d, 0x90, 0x6e, 0x98, 0xd1, 0x4c,
	0x68, 0x23, 0xa1, 0x64, 0x7f, 0xf9, 0x5e, 0x9e, 0xfe, 0xf0, 0xd0, 0x1d, 0x03, 0x30, 0xec, 0xc0,
	0x1f, 0x03, 0xc0, 0xcd, 0x04, 0xc3, 0xed, 0x5c, 0x09, 0x76, 0x88, 0xb0, 0x0e, 0xe6, 0xfb, 0x5c,
	0x09, 0x7a, 0x46, 0xda, 0x91, 0x8e, 0x27, 0xd2, 0x8a, 0xd8, 0x56, 0x5a, 0x30, 0xe6, 0x9f, 0xb9,
	0xca, 0x28, 0x25, 0x1b, 0xb1, 0xaa, 0x0c, 0x3b, 0xc2, 0xb7, 0xc3, 0x6b, 0xf7, 0xb1, 0x86, 0x8f,
	0xe4, 0xef, 0x5e, 0xad, 0xbf, 0x3e, 0x0a, 0x95, 0x1b, 0xea, 0xc4, 0x5a, 0xc5, 0x95, 0x86, 0x5f,
	0x73, 0xf6, 0x0f, 0x76, 0x6b, 0x39, 0x72, 0xeb, 0x00, 0x3d, 0x25, 0x5b, 0xae, 0x30, 0x21, 0xff,
	0x17, 0x73, 0xbc, 0xc3, 0x78, 0xe1, 0x88, 0x34, 0x4b, 0x08, 0xe9, 0x31, 0xa6, 0x8d, 0x12, 0x7c,
	0x44, 0xc9, 0x46, 0x19, 0x15, 0x82, 0x9d, 0x20, 0xc6, 0x6b, 0x3c, 0x1b, 0x42, 0xcf, 0x84, 0x7e,
	0xdc, 0x8e, 0xd3, 0x70, 0x36, 0x90, 0x2e, 0xb6, 0xe3, 0x88, 0x34, 0x35, 0x80, 0xe5, 0x89, 0xd4,
	0xac, 0xe7, 0xbb, 0xba, 0x7a, 0x28, 0xf5, 0xfb, 0x57, 0x3f, 0x5f, 0x66, 0xd2, 0x4e, 0xaa, 0xf1,
	0x55, 0x0c, 0xc5, 0xa0, 0x90, 0xf1, 0x54, 0xa8, 0xb7, 0xd7, 0x03, 0x30, 0xf7, 0x95, 0xd0, 0xf3,
	0x4b, 0xfc, 0xdb, 0x8c, 0xab, 0x74, 0xa0, 0xa6, 0xd9, 0xbb, 0xf0, 0xcf, 0x19, 0xd7, 0x91, 0xbe,
	0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xe7, 0x67, 0x74, 0x9b, 0x04, 0x00, 0x00,
}
