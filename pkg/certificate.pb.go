// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/certificate.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Certificate Authorities installed in Keychains/ca-bundles.
type Certificate struct {
	// Certificate CommonName
	CommonName string `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name"`
	// Certificate distinguished name
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject"`
	// Certificate issuer distinguished name
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer"`
	// 1 if CA: true (certificate is an authority) else 0
	Ca int32 `protobuf:"varint,4,opt,name=ca,proto3" json:"ca"`
	// 1 if self-signed
	SelfSigned int32 `protobuf:"varint,5,opt,name=self_signed,json=selfSigned,proto3" json:"self_signed"`
	// Lower bound of valid date
	NotValidBefore *timestamp.Timestamp `protobuf:"bytes,6,opt,name=not_valid_before,json=notValidBefore,proto3" json:"not_valid_before"`
	// Certificate expiration data
	NotValidAfter *timestamp.Timestamp `protobuf:"bytes,7,opt,name=not_valid_after,json=notValidAfter,proto3" json:"not_valid_after"`
	// Signing algorithm used
	SigningAlgorithm string `protobuf:"bytes,8,opt,name=signing_algorithm,json=signingAlgorithm,proto3" json:"signing_algorithm"`
	// Key algorithm used
	KeyAlgorithm string `protobuf:"bytes,9,opt,name=key_algorithm,json=keyAlgorithm,proto3" json:"key_algorithm"`
	// Key size used for RSA/DSA
	KeyStrength string `protobuf:"bytes,10,opt,name=key_strength,json=keyStrength,proto3" json:"key_strength"`
	// Certificate key usage and extended key usage
	KeyUsage string `protobuf:"bytes,11,opt,name=key_usage,json=keyUsage,proto3" json:"key_usage"`
	// SKID an optionally included SHA1
	SubjectKeyId string `protobuf:"bytes,12,opt,name=subject_key_id,json=subjectKeyId,proto3" json:"subject_key_id"`
	// AKID an optionally included SHA1
	AuthorityKeyId string `protobuf:"bytes,13,opt,name=authority_key_id,json=authorityKeyId,proto3" json:"authority_key_id"`
	// SHA1 hash of the raw certificate contents
	Sha1 string `protobuf:"bytes,14,opt,name=sha1,proto3" json:"sha1"`
	// Path to Keychain or PEM bundle
	Path string `protobuf:"bytes,15,opt,name=path,proto3" json:"path"`
	// Certificate serial number
	Serial string `protobuf:"bytes,16,opt,name=serial,proto3" json:"serial"`
	// SID
	Sid string `protobuf:"bytes,17,opt,name=sid,proto3" json:"sid"`
	// Certificate system store location
	StoreLocation string `protobuf:"bytes,18,opt,name=store_location,json=storeLocation,proto3" json:"store_location"`
	// Certificate system store
	Store string `protobuf:"bytes,19,opt,name=store,proto3" json:"store"`
	// Username
	Username string `protobuf:"bytes,20,opt,name=username,proto3" json:"username"`
	// Exists for service/user stores. Contains raw store id provided by WinAPI.
	StoreId              string   `protobuf:"bytes,21,opt,name=store_id,json=storeId,proto3" json:"store_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3c3b8c0d0294125, []int{0}
}

func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Certificate.Unmarshal(m, b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return xxx_messageInfo_Certificate.Size(m)
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *Certificate) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Certificate) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *Certificate) GetCa() int32 {
	if m != nil {
		return m.Ca
	}
	return 0
}

func (m *Certificate) GetSelfSigned() int32 {
	if m != nil {
		return m.SelfSigned
	}
	return 0
}

func (m *Certificate) GetNotValidBefore() *timestamp.Timestamp {
	if m != nil {
		return m.NotValidBefore
	}
	return nil
}

func (m *Certificate) GetNotValidAfter() *timestamp.Timestamp {
	if m != nil {
		return m.NotValidAfter
	}
	return nil
}

func (m *Certificate) GetSigningAlgorithm() string {
	if m != nil {
		return m.SigningAlgorithm
	}
	return ""
}

func (m *Certificate) GetKeyAlgorithm() string {
	if m != nil {
		return m.KeyAlgorithm
	}
	return ""
}

func (m *Certificate) GetKeyStrength() string {
	if m != nil {
		return m.KeyStrength
	}
	return ""
}

func (m *Certificate) GetKeyUsage() string {
	if m != nil {
		return m.KeyUsage
	}
	return ""
}

func (m *Certificate) GetSubjectKeyId() string {
	if m != nil {
		return m.SubjectKeyId
	}
	return ""
}

func (m *Certificate) GetAuthorityKeyId() string {
	if m != nil {
		return m.AuthorityKeyId
	}
	return ""
}

func (m *Certificate) GetSha1() string {
	if m != nil {
		return m.Sha1
	}
	return ""
}

func (m *Certificate) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Certificate) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *Certificate) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Certificate) GetStoreLocation() string {
	if m != nil {
		return m.StoreLocation
	}
	return ""
}

func (m *Certificate) GetStore() string {
	if m != nil {
		return m.Store
	}
	return ""
}

func (m *Certificate) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Certificate) GetStoreId() string {
	if m != nil {
		return m.StoreId
	}
	return ""
}

func init() {
	proto.RegisterType((*Certificate)(nil), "schemas.Certificate")
}

func init() { proto.RegisterFile("pb/certificate.proto", fileDescriptor_f3c3b8c0d0294125) }

var fileDescriptor_f3c3b8c0d0294125 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x4f, 0x8f, 0xd3, 0x30,
	0x10, 0xc5, 0xd5, 0xee, 0xf6, 0xdf, 0x74, 0x9b, 0xed, 0x9a, 0x82, 0x4c, 0x39, 0x6c, 0xf9, 0x27,
	0x55, 0x42, 0xb4, 0xb0, 0x48, 0x70, 0xe0, 0xb4, 0x85, 0xcb, 0x0a, 0xc4, 0xa1, 0x0b, 0x1c, 0xb8,
	0x44, 0x4e, 0x32, 0x4d, 0x4c, 0xe2, 0x38, 0xd8, 0x0e, 0x52, 0x3e, 0x1f, 0x5f, 0x0c, 0xd9, 0x4e,
	0xb6, 0xdc, 0xb8, 0xf9, 0xfd, 0xde, 0x9b, 0x71, 0xa7, 0x9e, 0xc0, 0xa2, 0x8a, 0xb6, 0x31, 0x2a,
	0xc3, 0x0f, 0x3c, 0x66, 0x06, 0x37, 0x95, 0x92, 0x46, 0x92, 0x91, 0x8e, 0x33, 0x14, 0x4c, 0x2f,
	0x2f, 0x53, 0x29, 0xd3, 0x02, 0xb7, 0x0e, 0x47, 0xf5, 0x61, 0x6b, 0xb8, 0x40, 0x6d, 0x98, 0xa8,
	0x7c, 0xf2, 0xc9, 0x9f, 0x01, 0x4c, 0x3f, 0x1c, 0xeb, 0xc9, 0x25, 0x4c, 0x63, 0x29, 0x84, 0x2c,
	0xc3, 0x92, 0x09, 0xa4, 0xbd, 0x55, 0x6f, 0x3d, 0xd9, 0x83, 0x47, 0x5f, 0x98, 0x40, 0x42, 0x61,
	0xa4, 0xeb, 0xe8, 0x27, 0xc6, 0x86, 0xf6, 0x9d, 0xd9, 0x49, 0xf2, 0x00, 0x86, 0x5c, 0xeb, 0x1a,
	0x15, 0x3d, 0x71, 0x46, 0xab, 0x48, 0x00, 0xfd, 0x98, 0xd1, 0xd3, 0x55, 0x6f, 0x3d, 0xd8, 0xf7,
	0x63, 0x66, 0xaf, 0xd0, 0x58, 0x1c, 0x42, 0xcd, 0xd3, 0x12, 0x13, 0x3a, 0x70, 0x06, 0x58, 0x74,
	0xeb, 0x08, 0xf9, 0x08, 0xf3, 0x52, 0x9a, 0xf0, 0x37, 0x2b, 0x78, 0x12, 0x46, 0x78, 0x90, 0x0a,
	0xe9, 0x70, 0xd5, 0x5b, 0x4f, 0xaf, 0x96, 0x1b, 0x3f, 0xcf, 0xa6, 0x9b, 0x67, 0xf3, 0xb5, 0x9b,
	0x67, 0x1f, 0x94, 0xd2, 0x7c, 0xb7, 0x25, 0x3b, 0x57, 0x41, 0x76, 0x70, 0x7e, 0xec, 0xc2, 0x0e,
	0x06, 0x15, 0x1d, 0xfd, 0xb7, 0xc9, 0xac, 0x6b, 0x72, 0x6d, 0x0b, 0xc8, 0x0b, 0xb8, 0xb0, 0xbf,
	0x92, 0x97, 0x69, 0xc8, 0x8a, 0x54, 0x2a, 0x6e, 0x32, 0x41, 0xc7, 0x6e, 0xba, 0x79, 0x6b, 0x5c,
	0x77, 0x9c, 0x3c, 0x85, 0x59, 0x8e, 0xcd, 0x3f, 0xc1, 0x89, 0x0b, 0x9e, 0xe5, 0xd8, 0x1c, 0x43,
	0x8f, 0xc1, 0xea, 0x50, 0x1b, 0x85, 0x65, 0x6a, 0x32, 0x0a, 0x2e, 0x33, 0xcd, 0xb1, 0xb9, 0x6d,
	0x11, 0x79, 0x04, 0x13, 0x1b, 0xa9, 0x35, 0x4b, 0x91, 0x4e, 0x9d, 0x3f, 0xce, 0xb1, 0xf9, 0x66,
	0x35, 0x79, 0x06, 0x41, 0xfb, 0x7f, 0x87, 0x36, 0xc4, 0x13, 0x7a, 0xe6, 0x6f, 0x69, 0xe9, 0x27,
	0x6c, 0x6e, 0x12, 0xb2, 0x86, 0x39, 0xab, 0x4d, 0x66, 0xef, 0x6c, 0xba, 0xdc, 0xcc, 0xe5, 0x82,
	0x3b, 0xee, 0x93, 0x04, 0x4e, 0x75, 0xc6, 0x5e, 0xd3, 0xc0, 0xb9, 0xee, 0x6c, 0x59, 0xc5, 0x4c,
	0x46, 0xcf, 0x3d, 0xb3, 0x67, 0xfb, 0xb8, 0x1a, 0x15, 0x67, 0x05, 0x9d, 0xfb, 0xc7, 0xf5, 0x8a,
	0xcc, 0xe1, 0x44, 0xf3, 0x84, 0x5e, 0x38, 0x68, 0x8f, 0xe4, 0x39, 0x04, 0xda, 0x48, 0x85, 0x61,
	0x21, 0x63, 0x66, 0xb8, 0x2c, 0x29, 0x71, 0xe6, 0xcc, 0xd1, 0xcf, 0x2d, 0x24, 0x0b, 0x18, 0x38,
	0x40, 0xef, 0x39, 0xd7, 0x0b, 0xb2, 0x84, 0x71, 0xad, 0x51, 0xb9, 0xdd, 0x5b, 0xf8, 0xd1, 0x3b,
	0x4d, 0x1e, 0xc2, 0xd8, 0x37, 0xe6, 0x09, 0xbd, 0xdf, 0xae, 0x9e, 0xd5, 0x37, 0xc9, 0xee, 0xea,
	0xc7, 0xab, 0x94, 0x9b, 0xac, 0x8e, 0x36, 0xb1, 0x14, 0x5b, 0xc1, 0xe3, 0x1c, 0xab, 0x77, 0x6f,
	0xb7, 0x52, 0xff, 0xaa, 0x51, 0x35, 0x2f, 0xef, 0xb6, 0xbf, 0xca, 0xd3, 0xf7, 0xed, 0xa7, 0x11,
	0x0d, 0x1d, 0x7d, 0xf3, 0x37, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x16, 0x87, 0x58, 0x42, 0x03, 0x00,
	0x00,
}
