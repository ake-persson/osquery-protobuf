// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/process_open_pipe.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Pipes and partner processes for each process.
type ProcessOpenPipe struct {
	// Process ID
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid"`
	// File descriptor
	Fd int64 `protobuf:"varint,2,opt,name=fd,proto3" json:"fd"`
	// Pipe open mode (r/w)
	Mode string `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode"`
	// Pipe inode number
	Inode int64 `protobuf:"varint,4,opt,name=inode,proto3" json:"inode"`
	// Pipe Type: named vs unnamed/anonymous
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type"`
	// Process ID of partner process sharing a particular pipe
	PartnerPid int64 `protobuf:"varint,6,opt,name=partner_pid,json=partnerPid,proto3" json:"partner_pid"`
	// File descriptor of shared pipe at partner's end
	PartnerFd int64 `protobuf:"varint,7,opt,name=partner_fd,json=partnerFd,proto3" json:"partner_fd"`
	// Mode of shared pipe at partner's end
	PartnerMode          string   `protobuf:"bytes,8,opt,name=partner_mode,json=partnerMode,proto3" json:"partner_mode"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessOpenPipe) Reset()         { *m = ProcessOpenPipe{} }
func (m *ProcessOpenPipe) String() string { return proto.CompactTextString(m) }
func (*ProcessOpenPipe) ProtoMessage()    {}
func (*ProcessOpenPipe) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec3c673ae029aedc, []int{0}
}

func (m *ProcessOpenPipe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessOpenPipe.Unmarshal(m, b)
}
func (m *ProcessOpenPipe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessOpenPipe.Marshal(b, m, deterministic)
}
func (m *ProcessOpenPipe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessOpenPipe.Merge(m, src)
}
func (m *ProcessOpenPipe) XXX_Size() int {
	return xxx_messageInfo_ProcessOpenPipe.Size(m)
}
func (m *ProcessOpenPipe) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessOpenPipe.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessOpenPipe proto.InternalMessageInfo

func (m *ProcessOpenPipe) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcessOpenPipe) GetFd() int64 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *ProcessOpenPipe) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *ProcessOpenPipe) GetInode() int64 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *ProcessOpenPipe) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ProcessOpenPipe) GetPartnerPid() int64 {
	if m != nil {
		return m.PartnerPid
	}
	return 0
}

func (m *ProcessOpenPipe) GetPartnerFd() int64 {
	if m != nil {
		return m.PartnerFd
	}
	return 0
}

func (m *ProcessOpenPipe) GetPartnerMode() string {
	if m != nil {
		return m.PartnerMode
	}
	return ""
}

func init() {
	proto.RegisterType((*ProcessOpenPipe)(nil), "schemas.ProcessOpenPipe")
}

func init() { proto.RegisterFile("pb/process_open_pipe.proto", fileDescriptor_ec3c673ae029aedc) }

var fileDescriptor_ec3c673ae029aedc = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x90, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x86, 0x95, 0xa4, 0x1f, 0xf4, 0x40, 0x80, 0x4e, 0x0c, 0x16, 0x12, 0xa2, 0x30, 0x75, 0xa1,
	0x41, 0x20, 0xc1, 0xc0, 0xc6, 0xc0, 0x86, 0x88, 0x3a, 0xb2, 0x44, 0x4d, 0x7c, 0x69, 0xad, 0x2a,
	0xf1, 0x61, 0x27, 0x43, 0xff, 0x27, 0x3f, 0xa8, 0xf2, 0x25, 0xd9, 0xde, 0x7b, 0xee, 0xd1, 0xd9,
	0x7a, 0xe1, 0x96, 0x8b, 0x94, 0x9d, 0x2d, 0xc9, 0xfb, 0xdc, 0x32, 0x35, 0x39, 0x1b, 0xa6, 0x35,
	0x3b, 0xdb, 0x5a, 0x9c, 0xfb, 0x72, 0x4f, 0xf5, 0xd6, 0x3f, 0xfe, 0x47, 0x70, 0x95, 0xf5, 0xd2,
	0x0f, 0x53, 0x93, 0x19, 0x26, 0xbc, 0x86, 0x84, 0x8d, 0x56, 0xd1, 0x32, 0x5a, 0x25, 0x9b, 0x10,
	0xf1, 0x12, 0xe2, 0x4a, 0xab, 0x58, 0x40, 0x5c, 0x69, 0x44, 0x98, 0xd4, 0x56, 0x93, 0x4a, 0x96,
	0xd1, 0x6a, 0xb1, 0x91, 0x8c, 0x37, 0x30, 0x35, 0x4d, 0x80, 0x13, 0xd1, 0xfa, 0x21, 0x98, 0xed,
	0x91, 0x49, 0x4d, 0x7b, 0x33, 0x64, 0xbc, 0x87, 0x73, 0xde, 0xba, 0xb6, 0x21, 0x97, 0x87, 0x77,
	0x66, 0xe2, 0xc3, 0x80, 0x32, 0xa3, 0xf1, 0x0e, 0xc6, 0x29, 0xaf, 0xb4, 0x9a, 0xcb, 0x7e, 0x31,
	0x90, 0x2f, 0x8d, 0x0f, 0x70, 0x31, 0xae, 0xe5, 0x17, 0x67, 0x72, 0x7b, 0xbc, 0xf9, 0x6d, 0x35,
	0x7d, 0xbe, 0xfc, 0x3e, 0xef, 0x4c, 0xbb, 0xef, 0x8a, 0x75, 0x69, 0xeb, 0xb4, 0x36, 0xe5, 0x81,
	0xf8, 0xfd, 0x2d, 0xb5, 0xfe, 0xaf, 0x23, 0x77, 0x7c, 0x92, 0x12, 0x8a, 0xae, 0x4a, 0xf9, 0xb0,
	0xfb, 0x18, 0xaa, 0x28, 0x66, 0x42, 0x5f, 0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x93, 0x89, 0xb6,
	0x34, 0x38, 0x01, 0x00, 0x00,
}
