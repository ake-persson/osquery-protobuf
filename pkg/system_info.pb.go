// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/system_info.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// System information for identification.
type SystemInfo struct {
	// Network hostname including domain
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname"`
	// Unique ID provided by the system
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid"`
	// CPU type
	CpuType string `protobuf:"bytes,3,opt,name=cpu_type,json=cpuType,proto3" json:"cpu_type"`
	// CPU subtype
	CpuSubtype string `protobuf:"bytes,4,opt,name=cpu_subtype,json=cpuSubtype,proto3" json:"cpu_subtype"`
	// CPU brand string
	CpuBrand string `protobuf:"bytes,5,opt,name=cpu_brand,json=cpuBrand,proto3" json:"cpu_brand"`
	// Number of physical CPU cores in to the system
	CpuPhysicalCores int32 `protobuf:"varint,6,opt,name=cpu_physical_cores,json=cpuPhysicalCores,proto3" json:"cpu_physical_cores"`
	// Number of logical CPU cores available to the system
	CpuLogicalCores int32 `protobuf:"varint,7,opt,name=cpu_logical_cores,json=cpuLogicalCores,proto3" json:"cpu_logical_cores"`
	// Microcode version
	CpuMicrocode string `protobuf:"bytes,8,opt,name=cpu_microcode,json=cpuMicrocode,proto3" json:"cpu_microcode"`
	// Total physical memory in bytes
	PhysicalMemory int64 `protobuf:"varint,9,opt,name=physical_memory,json=physicalMemory,proto3" json:"physical_memory"`
	// Hardware or board vendor
	HardwareVendor string `protobuf:"bytes,10,opt,name=hardware_vendor,json=hardwareVendor,proto3" json:"hardware_vendor"`
	// Hardware or board model
	HardwareModel string `protobuf:"bytes,11,opt,name=hardware_model,json=hardwareModel,proto3" json:"hardware_model"`
	// Hardware or board version
	HardwareVersion string `protobuf:"bytes,12,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version"`
	// Device or board serial number
	HardwareSerial string `protobuf:"bytes,13,opt,name=hardware_serial,json=hardwareSerial,proto3" json:"hardware_serial"`
	// Friendly computer name (optional)
	ComputerName string `protobuf:"bytes,14,opt,name=computer_name,json=computerName,proto3" json:"computer_name"`
	// Local hostname (optional)
	LocalHostname        string   `protobuf:"bytes,15,opt,name=local_hostname,json=localHostname,proto3" json:"local_hostname"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemInfo) Reset()         { *m = SystemInfo{} }
func (m *SystemInfo) String() string { return proto.CompactTextString(m) }
func (*SystemInfo) ProtoMessage()    {}
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_95a028e0ed39cac4, []int{0}
}

func (m *SystemInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemInfo.Unmarshal(m, b)
}
func (m *SystemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemInfo.Marshal(b, m, deterministic)
}
func (m *SystemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemInfo.Merge(m, src)
}
func (m *SystemInfo) XXX_Size() int {
	return xxx_messageInfo_SystemInfo.Size(m)
}
func (m *SystemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SystemInfo proto.InternalMessageInfo

func (m *SystemInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *SystemInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *SystemInfo) GetCpuType() string {
	if m != nil {
		return m.CpuType
	}
	return ""
}

func (m *SystemInfo) GetCpuSubtype() string {
	if m != nil {
		return m.CpuSubtype
	}
	return ""
}

func (m *SystemInfo) GetCpuBrand() string {
	if m != nil {
		return m.CpuBrand
	}
	return ""
}

func (m *SystemInfo) GetCpuPhysicalCores() int32 {
	if m != nil {
		return m.CpuPhysicalCores
	}
	return 0
}

func (m *SystemInfo) GetCpuLogicalCores() int32 {
	if m != nil {
		return m.CpuLogicalCores
	}
	return 0
}

func (m *SystemInfo) GetCpuMicrocode() string {
	if m != nil {
		return m.CpuMicrocode
	}
	return ""
}

func (m *SystemInfo) GetPhysicalMemory() int64 {
	if m != nil {
		return m.PhysicalMemory
	}
	return 0
}

func (m *SystemInfo) GetHardwareVendor() string {
	if m != nil {
		return m.HardwareVendor
	}
	return ""
}

func (m *SystemInfo) GetHardwareModel() string {
	if m != nil {
		return m.HardwareModel
	}
	return ""
}

func (m *SystemInfo) GetHardwareVersion() string {
	if m != nil {
		return m.HardwareVersion
	}
	return ""
}

func (m *SystemInfo) GetHardwareSerial() string {
	if m != nil {
		return m.HardwareSerial
	}
	return ""
}

func (m *SystemInfo) GetComputerName() string {
	if m != nil {
		return m.ComputerName
	}
	return ""
}

func (m *SystemInfo) GetLocalHostname() string {
	if m != nil {
		return m.LocalHostname
	}
	return ""
}

func init() {
	proto.RegisterType((*SystemInfo)(nil), "schemas.SystemInfo")
}

func init() { proto.RegisterFile("pb/system_info.proto", fileDescriptor_95a028e0ed39cac4) }

var fileDescriptor_95a028e0ed39cac4 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x55, 0xd6, 0xad, 0xed, 0xdb, 0x9a, 0x0c, 0x8b, 0x83, 0x81, 0x03, 0x15, 0x68, 0xa2,
	0x20, 0x58, 0x10, 0x48, 0x70, 0xe0, 0x36, 0x2e, 0x20, 0x51, 0x84, 0x5a, 0xc4, 0x81, 0x4b, 0x94,
	0x38, 0x6e, 0x63, 0x2d, 0xce, 0x33, 0x76, 0x0c, 0xca, 0x1f, 0xc5, 0xff, 0x88, 0xfc, 0xf2, 0x63,
	0xdb, 0x2d, 0xfe, 0x7c, 0x3f, 0xf2, 0x37, 0x4f, 0xcf, 0xf0, 0xc0, 0xe4, 0x89, 0x6b, 0x5d, 0x23,
	0x75, 0xaa, 0xea, 0x3d, 0x5e, 0x1a, 0x8b, 0x0d, 0xb2, 0x99, 0x13, 0xa5, 0xd4, 0x99, 0x7b, 0xfa,
	0x6f, 0x0a, 0xb0, 0xa3, 0xf8, 0x4b, 0xbd, 0x47, 0xf6, 0x08, 0xe6, 0x25, 0xba, 0xa6, 0xce, 0xb4,
	0xe4, 0x93, 0xd5, 0x64, 0xbd, 0xd8, 0x8e, 0x67, 0xc6, 0x60, 0xea, 0xbd, 0x2a, 0xf8, 0x3d, 0xe2,
	0xf4, 0xcd, 0x1e, 0xc2, 0x5c, 0x18, 0x9f, 0x36, 0xad, 0x91, 0xfc, 0x88, 0xf8, 0x4c, 0x18, 0xff,
	0xa3, 0x35, 0x92, 0x3d, 0x81, 0xd3, 0x10, 0x39, 0x9f, 0x53, 0x3a, 0xa5, 0x14, 0x84, 0xf1, 0xbb,
	0x8e, 0xb0, 0xc7, 0xb0, 0x08, 0x42, 0x6e, 0xb3, 0xba, 0xe0, 0xc7, 0x5d, 0x99, 0x30, 0xfe, 0x2a,
	0x9c, 0xd9, 0x2b, 0x60, 0x21, 0x34, 0x65, 0xeb, 0x94, 0xc8, 0xaa, 0x54, 0xa0, 0x95, 0x8e, 0x9f,
	0xac, 0x26, 0xeb, 0xe3, 0xed, 0xb9, 0x30, 0xfe, 0x7b, 0x1f, 0x7c, 0x0a, 0x9c, 0xbd, 0x84, 0xfb,
	0xc1, 0xae, 0xf0, 0x70, 0x4b, 0x9e, 0x91, 0x1c, 0x0b, 0xe3, 0xbf, 0x76, 0xbc, 0x73, 0x9f, 0xc1,
	0x32, 0xb8, 0x5a, 0x09, 0x8b, 0x02, 0x0b, 0xc9, 0xe7, 0x54, 0x7d, 0x26, 0x8c, 0xdf, 0x0c, 0x8c,
	0x3d, 0x87, 0x78, 0xac, 0xd6, 0x52, 0xa3, 0x6d, 0xf9, 0x62, 0x35, 0x59, 0x1f, 0x6d, 0xa3, 0x01,
	0x6f, 0x88, 0x06, 0xb1, 0xcc, 0x6c, 0xf1, 0x37, 0xb3, 0x32, 0xfd, 0x23, 0xeb, 0x02, 0x2d, 0x07,
	0xba, 0x2f, 0x1a, 0xf0, 0x4f, 0xa2, 0xec, 0x02, 0x46, 0x92, 0x6a, 0x2c, 0x64, 0xc5, 0x4f, 0xc9,
	0x5b, 0x0e, 0x74, 0x13, 0x20, 0x7b, 0x01, 0xe7, 0xb7, 0xee, 0xb3, 0x4e, 0x61, 0xcd, 0xcf, 0x48,
	0x8c, 0x6f, 0x2e, 0x24, 0x7c, 0xa7, 0xda, 0x49, 0xab, 0xb2, 0x8a, 0x2f, 0xef, 0x56, 0xef, 0x88,
	0xd2, 0xc4, 0xa8, 0x8d, 0x6f, 0xa4, 0x4d, 0x69, 0xb3, 0x51, 0x3f, 0x71, 0x0f, 0xbf, 0x85, 0xed,
	0x5e, 0x40, 0x54, 0x61, 0x18, 0x77, 0xdc, 0x7f, 0xdc, 0xfd, 0x1f, 0xd1, 0xcf, 0x3d, 0xbc, 0x7a,
	0xfb, 0xeb, 0xcd, 0x41, 0x35, 0xa5, 0xcf, 0x2f, 0x05, 0xea, 0x44, 0x2b, 0x71, 0x2d, 0xcd, 0x87,
	0xf7, 0x09, 0xba, 0xdf, 0x5e, 0xda, 0xf6, 0x35, 0xbd, 0xae, 0xdc, 0xef, 0x13, 0x73, 0x7d, 0xf8,
	0xd8, 0xbf, 0xb1, 0xfc, 0x84, 0xe8, 0xbb, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x08, 0x84, 0x64,
	0xdb, 0x8b, 0x02, 0x00, 0x00,
}
