// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/process.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// All running processes on the host system.
type Process struct {
	// Process (or thread) ID
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid"`
	// The process path or shorthand argv[0]
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// Path to executed binary
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path"`
	// Complete argv
	Cmdline string `protobuf:"bytes,4,opt,name=cmdline,proto3" json:"cmdline"`
	// Process state
	State string `protobuf:"bytes,5,opt,name=state,proto3" json:"state"`
	// Process current working directory
	Cwd string `protobuf:"bytes,6,opt,name=cwd,proto3" json:"cwd"`
	// Process virtual root directory
	Root string `protobuf:"bytes,7,opt,name=root,proto3" json:"root"`
	// Unsigned user ID
	Uid uint64 `protobuf:"varint,8,opt,name=uid,proto3" json:"uid"`
	// Unsigned group ID
	Gid uint64 `protobuf:"varint,9,opt,name=gid,proto3" json:"gid"`
	// Unsigned effective user ID
	Euid uint64 `protobuf:"varint,10,opt,name=euid,proto3" json:"euid"`
	// Unsigned effective group ID
	Egid uint64 `protobuf:"varint,11,opt,name=egid,proto3" json:"egid"`
	// Unsigned saved user ID
	Suid uint64 `protobuf:"varint,12,opt,name=suid,proto3" json:"suid"`
	// Unsigned saved group ID
	Sgid uint64 `protobuf:"varint,13,opt,name=sgid,proto3" json:"sgid"`
	// Bytes of unpagable memory used by process
	WiredSize int64 `protobuf:"varint,14,opt,name=wired_size,json=wiredSize,proto3" json:"wired_size"`
	// Bytes of private memory used by process
	ResidentSize int64 `protobuf:"varint,15,opt,name=resident_size,json=residentSize,proto3" json:"resident_size"`
	// CPU time in milliseconds spent in user space
	UserTime int64 `protobuf:"varint,16,opt,name=user_time,json=userTime,proto3" json:"user_time"`
	// CPU time in milliseconds spent in kernel space
	SystemTime int64 `protobuf:"varint,17,opt,name=system_time,json=systemTime,proto3" json:"system_time"`
	// Bytes read from disk
	DiskBytesRead int64 `protobuf:"varint,18,opt,name=disk_bytes_read,json=diskBytesRead,proto3" json:"disk_bytes_read"`
	// Bytes written to disk
	DiskBytesWritten int64 `protobuf:"varint,19,opt,name=disk_bytes_written,json=diskBytesWritten,proto3" json:"disk_bytes_written"`
	// Process start time in seconds since Epoch
	StartTime int64 `protobuf:"varint,20,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	// Process parent's PID
	Parent int64 `protobuf:"varint,21,opt,name=parent,proto3" json:"parent"`
	// Process group
	Pgroup int64 `protobuf:"varint,22,opt,name=pgroup,proto3" json:"pgroup"`
	// Number of threads used by process
	Threads int32 `protobuf:"varint,23,opt,name=threads,proto3" json:"threads"`
	// Process nice level (-20 to 20
	Nice int32 `protobuf:"varint,24,opt,name=nice,proto3" json:"nice"`
	// Process uses elevated token yes=1
	IsElevatedToken int32 `protobuf:"varint,25,opt,name=is_elevated_token,json=isElevatedToken,proto3" json:"is_elevated_token"`
	// Elapsed time in seconds this process has been running.
	ElapsedTime int64 `protobuf:"varint,26,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time"`
	// Total number of handles that the process has open. This number is the sum of the handles currently opened by each thread in the process.
	HandleCount int64 `protobuf:"varint,27,opt,name=handle_count,json=handleCount,proto3" json:"handle_count"`
	// Returns elapsed time that all of the threads of this process used the processor to execute instructions in 100 nanoseconds ticks.
	PercentProcessorTime int64 `protobuf:"varint,28,opt,name=percent_processor_time,json=percentProcessorTime,proto3" json:"percent_processor_time"`
	// A 64bit pid that is never reused. Returns -1 if we couldn't gather them from the system.
	Upid int64 `protobuf:"varint,29,opt,name=upid,proto3" json:"upid"`
	// The 64bit parent pid that is never reused. Returns -1 if we couldn't gather them from the system.
	Uppid int64 `protobuf:"varint,30,opt,name=uppid,proto3" json:"uppid"`
	// A 64bit pid that is never reused. Returns -1 if we couldn't gather them from the system.
	CpuType int32 `protobuf:"varint,31,opt,name=cpu_type,json=cpuType,proto3" json:"cpu_type"`
	// The 64bit parent pid that is never reused. Returns -1 if we couldn't gather them from the system.
	CpuSubtype           int32    `protobuf:"varint,32,opt,name=cpu_subtype,json=cpuSubtype,proto3" json:"cpu_subtype"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Process) Reset()         { *m = Process{} }
func (m *Process) String() string { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()    {}
func (*Process) Descriptor() ([]byte, []int) {
	return fileDescriptor_7499dfaf74a17214, []int{0}
}

func (m *Process) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process.Unmarshal(m, b)
}
func (m *Process) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process.Marshal(b, m, deterministic)
}
func (m *Process) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process.Merge(m, src)
}
func (m *Process) XXX_Size() int {
	return xxx_messageInfo_Process.Size(m)
}
func (m *Process) XXX_DiscardUnknown() {
	xxx_messageInfo_Process.DiscardUnknown(m)
}

var xxx_messageInfo_Process proto.InternalMessageInfo

func (m *Process) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Process) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Process) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Process) GetCmdline() string {
	if m != nil {
		return m.Cmdline
	}
	return ""
}

func (m *Process) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Process) GetCwd() string {
	if m != nil {
		return m.Cwd
	}
	return ""
}

func (m *Process) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *Process) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Process) GetGid() uint64 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *Process) GetEuid() uint64 {
	if m != nil {
		return m.Euid
	}
	return 0
}

func (m *Process) GetEgid() uint64 {
	if m != nil {
		return m.Egid
	}
	return 0
}

func (m *Process) GetSuid() uint64 {
	if m != nil {
		return m.Suid
	}
	return 0
}

func (m *Process) GetSgid() uint64 {
	if m != nil {
		return m.Sgid
	}
	return 0
}

func (m *Process) GetWiredSize() int64 {
	if m != nil {
		return m.WiredSize
	}
	return 0
}

func (m *Process) GetResidentSize() int64 {
	if m != nil {
		return m.ResidentSize
	}
	return 0
}

func (m *Process) GetUserTime() int64 {
	if m != nil {
		return m.UserTime
	}
	return 0
}

func (m *Process) GetSystemTime() int64 {
	if m != nil {
		return m.SystemTime
	}
	return 0
}

func (m *Process) GetDiskBytesRead() int64 {
	if m != nil {
		return m.DiskBytesRead
	}
	return 0
}

func (m *Process) GetDiskBytesWritten() int64 {
	if m != nil {
		return m.DiskBytesWritten
	}
	return 0
}

func (m *Process) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Process) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *Process) GetPgroup() int64 {
	if m != nil {
		return m.Pgroup
	}
	return 0
}

func (m *Process) GetThreads() int32 {
	if m != nil {
		return m.Threads
	}
	return 0
}

func (m *Process) GetNice() int32 {
	if m != nil {
		return m.Nice
	}
	return 0
}

func (m *Process) GetIsElevatedToken() int32 {
	if m != nil {
		return m.IsElevatedToken
	}
	return 0
}

func (m *Process) GetElapsedTime() int64 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

func (m *Process) GetHandleCount() int64 {
	if m != nil {
		return m.HandleCount
	}
	return 0
}

func (m *Process) GetPercentProcessorTime() int64 {
	if m != nil {
		return m.PercentProcessorTime
	}
	return 0
}

func (m *Process) GetUpid() int64 {
	if m != nil {
		return m.Upid
	}
	return 0
}

func (m *Process) GetUppid() int64 {
	if m != nil {
		return m.Uppid
	}
	return 0
}

func (m *Process) GetCpuType() int32 {
	if m != nil {
		return m.CpuType
	}
	return 0
}

func (m *Process) GetCpuSubtype() int32 {
	if m != nil {
		return m.CpuSubtype
	}
	return 0
}

func init() {
	proto.RegisterType((*Process)(nil), "schemas.Process")
}

func init() { proto.RegisterFile("pb/process.proto", fileDescriptor_7499dfaf74a17214) }

var fileDescriptor_7499dfaf74a17214 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x93, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0x86, 0x15, 0x9a, 0x4f, 0x27, 0x21, 0xa9, 0x09, 0xc1, 0xa5, 0x94, 0xa6, 0x20, 0xa1, 0x08,
	0x41, 0x83, 0x00, 0xc1, 0x81, 0x5b, 0x11, 0xf7, 0x2a, 0x8d, 0x84, 0xc4, 0x65, 0xb5, 0x6b, 0x0f,
	0x89, 0x95, 0xec, 0xae, 0xf1, 0x07, 0x51, 0xfa, 0xab, 0xf9, 0x09, 0x68, 0xc6, 0x0e, 0xe2, 0x36,
	0xf3, 0xbc, 0x8f, 0x6c, 0xef, 0x8e, 0xcd, 0xc6, 0xa6, 0x58, 0x18, 0x5b, 0x4b, 0x70, 0xee, 0xda,
	0xd8, 0xda, 0xd7, 0xbc, 0xe3, 0xe4, 0x06, 0xca, 0xdc, 0xbd, 0xf8, 0xd3, 0x66, 0x9d, 0xdb, 0x18,
	0xf1, 0x31, 0x3b, 0x31, 0x5a, 0x89, 0xc6, 0xac, 0x31, 0x3f, 0x59, 0x62, 0xc9, 0x39, 0x6b, 0x56,
	0x79, 0x09, 0xe2, 0xc1, 0xac, 0x31, 0xef, 0x2d, 0xa9, 0x46, 0x66, 0x72, 0xbf, 0x11, 0x27, 0x91,
	0x61, 0xcd, 0x05, 0xeb, 0xc8, 0x52, 0xed, 0x74, 0x05, 0xa2, 0x49, 0xf8, 0xd8, 0xf2, 0x09, 0x6b,
	0x39, 0x9f, 0x7b, 0x10, 0x2d, 0xe2, 0xb1, 0xc1, 0x9d, 0xe4, 0x5e, 0x89, 0x36, 0x31, 0x2c, 0x71,
	0x55, 0x5b, 0xd7, 0x5e, 0x74, 0xe2, 0xaa, 0x58, 0xa3, 0x15, 0xb4, 0x12, 0xdd, 0x59, 0x63, 0xde,
	0x5c, 0x62, 0x89, 0x64, 0xad, 0x95, 0xe8, 0x45, 0xb2, 0x8e, 0x27, 0x04, 0x94, 0x18, 0x21, 0xaa,
	0x89, 0xa1, 0xd6, 0x4f, 0x2c, 0x79, 0x0e, 0xbd, 0x41, 0x64, 0x2e, 0x79, 0x0e, 0xbd, 0x61, 0x62,
	0xe8, 0x5d, 0x30, 0xb6, 0xd7, 0x16, 0x54, 0xe6, 0xf4, 0x3d, 0x88, 0x87, 0xf4, 0x2b, 0x7a, 0x44,
	0xee, 0xf4, 0x3d, 0xf0, 0x97, 0x6c, 0x68, 0xc1, 0x69, 0x05, 0x95, 0x8f, 0xc6, 0x88, 0x8c, 0xc1,
	0x11, 0x92, 0x74, 0xce, 0x7a, 0xc1, 0x81, 0xcd, 0xbc, 0x2e, 0x41, 0x8c, 0x49, 0xe8, 0x22, 0x58,
	0xe9, 0x12, 0xf8, 0x25, 0xeb, 0xbb, 0x83, 0xf3, 0x50, 0xc6, 0xf8, 0x94, 0x62, 0x16, 0x11, 0x09,
	0xaf, 0xd8, 0x48, 0x69, 0xb7, 0xcd, 0x8a, 0x83, 0x07, 0x97, 0x59, 0xc8, 0x95, 0xe0, 0x24, 0x0d,
	0x11, 0xdf, 0x20, 0x5d, 0x42, 0xae, 0xf8, 0x1b, 0xc6, 0xff, 0xf3, 0xf6, 0x56, 0x7b, 0x0f, 0x95,
	0x78, 0x44, 0xea, 0xf8, 0x9f, 0xfa, 0x3d, 0x72, 0xfc, 0x2e, 0xe7, 0x73, 0xeb, 0xe3, 0xae, 0x93,
	0xf8, 0x5d, 0x44, 0x68, 0xd3, 0x29, 0x6b, 0x9b, 0xdc, 0x42, 0xe5, 0xc5, 0x63, 0x8a, 0x52, 0x47,
	0x7c, 0x6d, 0xeb, 0x60, 0xc4, 0x34, 0x71, 0xea, 0x70, 0xe0, 0x7e, 0x83, 0x67, 0x73, 0xe2, 0xc9,
	0xac, 0x31, 0x6f, 0x2d, 0x8f, 0x2d, 0x5d, 0x19, 0x2d, 0x41, 0x08, 0xc2, 0x54, 0xf3, 0xd7, 0xec,
	0x54, 0xbb, 0x0c, 0x76, 0xf0, 0x3b, 0xf7, 0xa0, 0x32, 0x5f, 0x6f, 0xa1, 0x12, 0x67, 0x24, 0x8c,
	0xb4, 0xfb, 0x96, 0xf8, 0x0a, 0x31, 0xbf, 0x62, 0x03, 0xd8, 0xe5, 0xc6, 0xa1, 0x87, 0x47, 0x7d,
	0x4a, 0xfb, 0xf6, 0x13, 0xa3, 0xc3, 0x5e, 0xb1, 0xc1, 0x26, 0xaf, 0xd4, 0x0e, 0x32, 0x59, 0x87,
	0xca, 0x8b, 0xf3, 0xa8, 0x44, 0xf6, 0x15, 0x11, 0xff, 0xc8, 0xa6, 0x06, 0xac, 0xc4, 0x31, 0xa5,
	0x8b, 0x5f, 0xa7, 0x79, 0x3c, 0x23, 0x79, 0x92, 0xd2, 0xdb, 0x63, 0x48, 0x0b, 0x73, 0xd6, 0x0c,
	0xf8, 0x02, 0x2e, 0xc8, 0xa1, 0x1a, 0x2f, 0x70, 0x30, 0x08, 0x9f, 0x13, 0x8c, 0x0d, 0x3f, 0x63,
	0x5d, 0x69, 0x42, 0xe6, 0x0f, 0x06, 0xc4, 0x65, 0xfc, 0x01, 0xd2, 0x84, 0xd5, 0xc1, 0xd0, 0x80,
	0x31, 0x72, 0xa1, 0xa0, 0x74, 0x46, 0x29, 0x93, 0x26, 0xdc, 0x45, 0x72, 0xf3, 0xfe, 0xc7, 0xbb,
	0xb5, 0xf6, 0x9b, 0x50, 0x5c, 0xcb, 0xba, 0x5c, 0x94, 0x5a, 0x6e, 0xc1, 0x7c, 0xfe, 0xb4, 0xa8,
	0xdd, 0xaf, 0x00, 0xf6, 0xf0, 0x96, 0x1e, 0x68, 0x11, 0x7e, 0x2e, 0xcc, 0x76, 0xfd, 0x25, 0x3d,
	0xd3, 0xa2, 0x4d, 0xf4, 0xc3, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0x30, 0x49, 0xca, 0xca,
	0x03, 0x00, 0x00,
}
