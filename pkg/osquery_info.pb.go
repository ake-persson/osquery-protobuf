// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/osquery_info.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Top level information about the running version of osquery.
type OsqueryInfo struct {
	// Process (or thread/handle) ID
	Pid int32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid"`
	// Unique ID provided by the system
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid"`
	// Unique
	InstanceId string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id"`
	// osquery toolkit version
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version"`
	// Hash of the working configuration state
	ConfigHash string `protobuf:"bytes,5,opt,name=config_hash,json=configHash,proto3" json:"config_hash"`
	// 1 if the config was loaded and considered valid
	ConfigValid int32 `protobuf:"varint,6,opt,name=config_valid,json=configValid,proto3" json:"config_valid"`
	// osquery extensions status
	Extensions string `protobuf:"bytes,7,opt,name=extensions,proto3" json:"extensions"`
	// osquery toolkit build platform
	BuildPlatform string `protobuf:"bytes,8,opt,name=build_platform,json=buildPlatform,proto3" json:"build_platform"`
	// osquery toolkit platform distribution name (os version)
	BuildDistro string `protobuf:"bytes,9,opt,name=build_distro,json=buildDistro,proto3" json:"build_distro"`
	// UNIX time in seconds when the process started
	StartTime int32 `protobuf:"varint,10,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	// Process (or thread/handle) ID of optional watcher process
	Watcher int32 `protobuf:"varint,11,opt,name=watcher,proto3" json:"watcher"`
	// The osquery platform bitmask
	PlatformMask         int32    `protobuf:"varint,12,opt,name=platform_mask,json=platformMask,proto3" json:"platform_mask"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OsqueryInfo) Reset()         { *m = OsqueryInfo{} }
func (m *OsqueryInfo) String() string { return proto.CompactTextString(m) }
func (*OsqueryInfo) ProtoMessage()    {}
func (*OsqueryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_29625d0822046dee, []int{0}
}

func (m *OsqueryInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OsqueryInfo.Unmarshal(m, b)
}
func (m *OsqueryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OsqueryInfo.Marshal(b, m, deterministic)
}
func (m *OsqueryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OsqueryInfo.Merge(m, src)
}
func (m *OsqueryInfo) XXX_Size() int {
	return xxx_messageInfo_OsqueryInfo.Size(m)
}
func (m *OsqueryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OsqueryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OsqueryInfo proto.InternalMessageInfo

func (m *OsqueryInfo) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *OsqueryInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *OsqueryInfo) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *OsqueryInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *OsqueryInfo) GetConfigHash() string {
	if m != nil {
		return m.ConfigHash
	}
	return ""
}

func (m *OsqueryInfo) GetConfigValid() int32 {
	if m != nil {
		return m.ConfigValid
	}
	return 0
}

func (m *OsqueryInfo) GetExtensions() string {
	if m != nil {
		return m.Extensions
	}
	return ""
}

func (m *OsqueryInfo) GetBuildPlatform() string {
	if m != nil {
		return m.BuildPlatform
	}
	return ""
}

func (m *OsqueryInfo) GetBuildDistro() string {
	if m != nil {
		return m.BuildDistro
	}
	return ""
}

func (m *OsqueryInfo) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *OsqueryInfo) GetWatcher() int32 {
	if m != nil {
		return m.Watcher
	}
	return 0
}

func (m *OsqueryInfo) GetPlatformMask() int32 {
	if m != nil {
		return m.PlatformMask
	}
	return 0
}

func init() {
	proto.RegisterType((*OsqueryInfo)(nil), "schemas.OsqueryInfo")
}

func init() { proto.RegisterFile("pb/osquery_info.proto", fileDescriptor_29625d0822046dee) }

var fileDescriptor_29625d0822046dee = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0xcd, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xe9, 0xb7, 0x9d, 0xb4, 0x22, 0x0b, 0xc2, 0x5e, 0xd4, 0xaa, 0x08, 0xbd, 0xd8, 0x8a,
	0x82, 0x1e, 0xbc, 0x89, 0x07, 0x7b, 0x10, 0xa5, 0x88, 0x07, 0x2f, 0x61, 0x93, 0x6c, 0x9a, 0x21,
	0xdd, 0xdd, 0xb8, 0xbb, 0xa9, 0xfa, 0xaf, 0x7b, 0x92, 0x4c, 0x12, 0xbc, 0xed, 0xfc, 0xde, 0x9b,
	0x8f, 0xe5, 0xc1, 0x61, 0x11, 0x2d, 0x8d, 0xfb, 0x2c, 0xa5, 0xfd, 0x09, 0x51, 0xa7, 0x66, 0x51,
	0x58, 0xe3, 0x0d, 0x1b, 0xb9, 0x38, 0x93, 0x4a, 0xb8, 0xb3, 0xdf, 0x2e, 0x04, 0x2f, 0xb5, 0xbe,
	0xd2, 0xa9, 0x61, 0x07, 0xd0, 0x2b, 0x30, 0xe1, 0x9d, 0x59, 0x67, 0x3e, 0x58, 0x57, 0x4f, 0xc6,
	0xa0, 0x5f, 0x96, 0x98, 0xf0, 0xee, 0xac, 0x33, 0x1f, 0xaf, 0xe9, 0xcd, 0x4e, 0x20, 0x40, 0xed,
	0xbc, 0xd0, 0xb1, 0x0c, 0x31, 0xe1, 0x3d, 0x92, 0xa0, 0x45, 0xab, 0x84, 0x71, 0x18, 0xed, 0xa4,
	0x75, 0x68, 0x34, 0xef, 0x93, 0xd8, 0x96, 0x55, 0x6b, 0x6c, 0x74, 0x8a, 0x9b, 0x30, 0x13, 0x2e,
	0xe3, 0x83, 0xba, 0xb5, 0x46, 0x4f, 0xc2, 0x65, 0xec, 0x14, 0x26, 0x8d, 0x61, 0x27, 0xb6, 0x98,
	0xf0, 0x21, 0x9d, 0xd2, 0x34, 0xbd, 0x57, 0x88, 0x1d, 0x03, 0xc8, 0x6f, 0x2f, 0x75, 0x35, 0xd0,
	0xf1, 0x51, 0x3d, 0xe2, 0x9f, 0xb0, 0x0b, 0xd8, 0x8f, 0x4a, 0xdc, 0x26, 0x61, 0xb1, 0x15, 0x3e,
	0x35, 0x56, 0xf1, 0x3d, 0xf2, 0x4c, 0x89, 0xbe, 0x36, 0xb0, 0xda, 0x54, 0xdb, 0x12, 0x74, 0xde,
	0x1a, 0x3e, 0x26, 0x53, 0x40, 0xec, 0x91, 0x10, 0x3b, 0x02, 0x70, 0x5e, 0x58, 0x1f, 0x7a, 0x54,
	0x92, 0x03, 0x9d, 0x32, 0x26, 0xf2, 0x86, 0x4a, 0x56, 0xdf, 0xfc, 0x12, 0x3e, 0xce, 0xa4, 0xe5,
	0x01, 0x69, 0x6d, 0xc9, 0xce, 0x61, 0xda, 0x2e, 0x0f, 0x95, 0x70, 0x39, 0x9f, 0x90, 0x3e, 0x69,
	0xe1, 0xb3, 0x70, 0xf9, 0xc3, 0xf5, 0xc7, 0xd5, 0x06, 0x7d, 0x56, 0x46, 0x8b, 0xd8, 0xa8, 0xa5,
	0xc2, 0x38, 0x97, 0xc5, 0xdd, 0x6d, 0x9b, 0xd7, 0x25, 0x45, 0x15, 0x95, 0xe9, 0xb2, 0xc8, 0x37,
	0xf7, 0x4d, 0x60, 0xd1, 0x90, 0xe8, 0xcd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xb6, 0x3b,
	0x86, 0xd9, 0x01, 0x00, 0x00,
}
