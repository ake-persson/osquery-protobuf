// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/block_device.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Block (buffered access) device file nodes: disks, ramdisks, and DMG containers.
type BlockDevice struct {
	// Block device name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	// Block device parent name
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent"`
	// Block device vendor string
	Vendor string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor"`
	// Block device model string identifier
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model"`
	// Block device size in blocks
	Size int64 `protobuf:"varint,5,opt,name=size,proto3" json:"size"`
	// Block size in bytes
	BlockSize int32 `protobuf:"varint,6,opt,name=block_size,json=blockSize,proto3" json:"block_size"`
	// Block device Universally Unique Identifier
	Uuid string `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid"`
	// Block device type string
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type"`
	// Block device label string
	Label                string   `protobuf:"bytes,9,opt,name=label,proto3" json:"label"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockDevice) Reset()         { *m = BlockDevice{} }
func (m *BlockDevice) String() string { return proto.CompactTextString(m) }
func (*BlockDevice) ProtoMessage()    {}
func (*BlockDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e60f12d0501f99e, []int{0}
}

func (m *BlockDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockDevice.Unmarshal(m, b)
}
func (m *BlockDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockDevice.Marshal(b, m, deterministic)
}
func (m *BlockDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockDevice.Merge(m, src)
}
func (m *BlockDevice) XXX_Size() int {
	return xxx_messageInfo_BlockDevice.Size(m)
}
func (m *BlockDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockDevice.DiscardUnknown(m)
}

var xxx_messageInfo_BlockDevice proto.InternalMessageInfo

func (m *BlockDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BlockDevice) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *BlockDevice) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *BlockDevice) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *BlockDevice) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *BlockDevice) GetBlockSize() int32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *BlockDevice) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *BlockDevice) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BlockDevice) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func init() {
	proto.RegisterType((*BlockDevice)(nil), "schemas.BlockDevice")
}

func init() { proto.RegisterFile("pb/block_device.proto", fileDescriptor_0e60f12d0501f99e) }

var fileDescriptor_0e60f12d0501f99e = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x2c, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x89, 0xdb, 0x76, 0x6d, 0xbc, 0x05, 0x95, 0x5c, 0x84, 0xe2, 0xa9, 0x17, 0xb7, 0xa2,
	0xa0, 0x07, 0x6f, 0x8b, 0x4f, 0x50, 0x6f, 0x5e, 0xa4, 0x49, 0xc7, 0xdd, 0xd0, 0xa6, 0x89, 0x6d,
	0xb2, 0xb0, 0x3e, 0xa9, 0x8f, 0x23, 0x33, 0xe9, 0xed, 0xff, 0xbf, 0x0f, 0x66, 0x86, 0xe1, 0x37,
	0x5e, 0x35, 0x6a, 0x74, 0x7a, 0xf8, 0xea, 0xe1, 0x64, 0x34, 0xec, 0xfc, 0xec, 0x82, 0x13, 0xdb,
	0x45, 0x1f, 0xc1, 0x76, 0xcb, 0xfd, 0x1f, 0xe3, 0x57, 0x7b, 0xf4, 0xef, 0xa4, 0x85, 0xe0, 0xd9,
	0xd4, 0x59, 0x90, 0xac, 0x62, 0x75, 0xd9, 0x52, 0x16, 0xb7, 0xbc, 0xf0, 0xdd, 0x0c, 0x53, 0x90,
	0x17, 0x44, 0xd7, 0x86, 0xfc, 0x04, 0x53, 0xef, 0x66, 0xb9, 0x49, 0x3c, 0x35, 0x71, 0xcd, 0x73,
	0xeb, 0x7a, 0x18, 0x65, 0x46, 0x38, 0x15, 0x9c, 0xbc, 0x98, 0x5f, 0x90, 0x79, 0xc5, 0xea, 0x4d,
	0x4b, 0x59, 0xdc, 0x71, 0x9e, 0x8e, 0x23, 0x53, 0x54, 0xac, 0xce, 0xdb, 0x92, 0xc8, 0x07, 0x6a,
	0xc1, 0xb3, 0x18, 0x4d, 0x2f, 0xb7, 0xe9, 0x18, 0xcc, 0xc8, 0xc2, 0xd9, 0x83, 0xbc, 0x4c, 0x0c,
	0x33, 0x2e, 0x1c, 0x3b, 0x05, 0xa3, 0x2c, 0xd3, 0x42, 0x2a, 0xfb, 0xa7, 0xcf, 0xc7, 0x83, 0x09,
	0xc7, 0xa8, 0x76, 0xda, 0xd9, 0xc6, 0x1a, 0x3d, 0x80, 0x7f, 0x7d, 0x69, 0xdc, 0xf2, 0x13, 0x61,
	0x3e, 0x3f, 0xd0, 0x23, 0x54, 0xfc, 0x6e, 0xfc, 0x70, 0x78, 0x5b, 0xdf, 0xa1, 0x0a, 0xa2, 0xcf,
	0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x30, 0x66, 0x9d, 0x4e, 0x37, 0x01, 0x00, 0x00,
}
