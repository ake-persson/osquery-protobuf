// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/process_event.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Track time/action process executions.
type ProcessEvent struct {
	// Process (or thread) ID
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid"`
	// Path of executed file
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path"`
	// File mode permissions
	Mode string `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode"`
	// Command line arguments (argv)
	Cmdline string `protobuf:"bytes,4,opt,name=cmdline,proto3" json:"cmdline"`
	// Actual size (bytes
	CmdlineSize int64 `protobuf:"varint,5,opt,name=cmdline_size,json=cmdlineSize,proto3" json:"cmdline_size"`
	// Actual size (bytes
	EnvSize int64 `protobuf:"varint,6,opt,name=env_size,json=envSize,proto3" json:"env_size"`
	// The process current working directory
	Cwd string `protobuf:"bytes,7,opt,name=cwd,proto3" json:"cwd"`
	// Audit User ID at process start
	Auid int64 `protobuf:"varint,8,opt,name=auid,proto3" json:"auid"`
	// User ID at process start
	Uid int64 `protobuf:"varint,9,opt,name=uid,proto3" json:"uid"`
	// Effective user ID at process start
	Euid int64 `protobuf:"varint,10,opt,name=euid,proto3" json:"euid"`
	// Group ID at process start
	Gid int64 `protobuf:"varint,11,opt,name=gid,proto3" json:"gid"`
	// Effective group ID at process start
	Egid int64 `protobuf:"varint,12,opt,name=egid,proto3" json:"egid"`
	// File owner user ID
	OwnerUid int64 `protobuf:"varint,13,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid"`
	// File owner group ID
	OwnerGid int64 `protobuf:"varint,14,opt,name=owner_gid,json=ownerGid,proto3" json:"owner_gid"`
	// List of structures that overflowed
	Overflows string `protobuf:"bytes,15,opt,name=overflows,proto3" json:"overflows"`
	// Process parent's PID
	Parent int64 `protobuf:"varint,16,opt,name=parent,proto3" json:"parent"`
	// Time of execution in UNIX time
	Time int64 `protobuf:"varint,17,opt,name=time,proto3" json:"time"`
	// Time of execution in system uptime
	Uptime int64 `protobuf:"varint,18,opt,name=uptime,proto3" json:"uptime"`
	// Event ID
	Eid string `protobuf:"bytes,19,opt,name=eid,proto3" json:"eid"`
	// OpenBSM Attribute: Status of the process
	Status int64 `protobuf:"varint,20,opt,name=status,proto3" json:"status"`
	// Syscall name: fork
	Syscall              string   `protobuf:"bytes,21,opt,name=syscall,proto3" json:"syscall"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessEvent) Reset()         { *m = ProcessEvent{} }
func (m *ProcessEvent) String() string { return proto.CompactTextString(m) }
func (*ProcessEvent) ProtoMessage()    {}
func (*ProcessEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad46cca49580844, []int{0}
}

func (m *ProcessEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessEvent.Unmarshal(m, b)
}
func (m *ProcessEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessEvent.Marshal(b, m, deterministic)
}
func (m *ProcessEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessEvent.Merge(m, src)
}
func (m *ProcessEvent) XXX_Size() int {
	return xxx_messageInfo_ProcessEvent.Size(m)
}
func (m *ProcessEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessEvent proto.InternalMessageInfo

func (m *ProcessEvent) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcessEvent) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ProcessEvent) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *ProcessEvent) GetCmdline() string {
	if m != nil {
		return m.Cmdline
	}
	return ""
}

func (m *ProcessEvent) GetCmdlineSize() int64 {
	if m != nil {
		return m.CmdlineSize
	}
	return 0
}

func (m *ProcessEvent) GetEnvSize() int64 {
	if m != nil {
		return m.EnvSize
	}
	return 0
}

func (m *ProcessEvent) GetCwd() string {
	if m != nil {
		return m.Cwd
	}
	return ""
}

func (m *ProcessEvent) GetAuid() int64 {
	if m != nil {
		return m.Auid
	}
	return 0
}

func (m *ProcessEvent) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ProcessEvent) GetEuid() int64 {
	if m != nil {
		return m.Euid
	}
	return 0
}

func (m *ProcessEvent) GetGid() int64 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *ProcessEvent) GetEgid() int64 {
	if m != nil {
		return m.Egid
	}
	return 0
}

func (m *ProcessEvent) GetOwnerUid() int64 {
	if m != nil {
		return m.OwnerUid
	}
	return 0
}

func (m *ProcessEvent) GetOwnerGid() int64 {
	if m != nil {
		return m.OwnerGid
	}
	return 0
}

func (m *ProcessEvent) GetOverflows() string {
	if m != nil {
		return m.Overflows
	}
	return ""
}

func (m *ProcessEvent) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *ProcessEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ProcessEvent) GetUptime() int64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *ProcessEvent) GetEid() string {
	if m != nil {
		return m.Eid
	}
	return ""
}

func (m *ProcessEvent) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ProcessEvent) GetSyscall() string {
	if m != nil {
		return m.Syscall
	}
	return ""
}

func init() {
	proto.RegisterType((*ProcessEvent)(nil), "schemas.ProcessEvent")
}

func init() { proto.RegisterFile("pb/process_event.proto", fileDescriptor_cad46cca49580844) }

var fileDescriptor_cad46cca49580844 = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0xc1, 0x4f, 0xfa, 0x30,
	0x14, 0xc7, 0xc3, 0x6f, 0xfc, 0x18, 0x2b, 0xa8, 0x58, 0x95, 0xd4, 0xe8, 0x01, 0x3d, 0x71, 0x91,
	0x19, 0x4d, 0xf4, 0xe0, 0xcd, 0xc4, 0x78, 0x35, 0x18, 0x2f, 0x5e, 0xc8, 0xb6, 0x3e, 0x46, 0xc3,
	0xb6, 0xd6, 0xb5, 0x1b, 0x81, 0x3f, 0xdb, 0xbf, 0xc0, 0xbc, 0xb6, 0x46, 0x6e, 0xdf, 0xf7, 0xf9,
	0x7e, 0x3a, 0x1e, 0x5b, 0xc9, 0x58, 0xa5, 0xb1, 0xaa, 0x65, 0x06, 0x5a, 0x2f, 0xa0, 0x85, 0xca,
	0xcc, 0x54, 0x2d, 0x8d, 0xa4, 0xa1, 0xce, 0x56, 0x50, 0x26, 0xfa, 0xfa, 0x3b, 0x20, 0xc3, 0x37,
	0x27, 0xbc, 0x60, 0x4f, 0x47, 0x24, 0x50, 0x82, 0xb3, 0xce, 0xa4, 0x33, 0x0d, 0xe6, 0x18, 0x29,
	0x25, 0x5d, 0x95, 0x98, 0x15, 0xfb, 0x37, 0xe9, 0x4c, 0xa3, 0xb9, 0xcd, 0xc8, 0x4a, 0xc9, 0x81,
	0x05, 0x8e, 0x61, 0xa6, 0x8c, 0x84, 0x59, 0xc9, 0x0b, 0x51, 0x01, 0xeb, 0x5a, 0xfc, 0x3b, 0xd2,
	0x2b, 0x32, 0xf4, 0x71, 0xa1, 0xc5, 0x0e, 0xd8, 0x7f, 0xfb, 0xf0, 0x81, 0x67, 0xef, 0x62, 0x07,
	0xf4, 0x9c, 0xf4, 0xa1, 0x6a, 0x5d, 0xdd, 0xb3, 0x75, 0x08, 0x55, 0x6b, 0xab, 0x11, 0x09, 0xb2,
	0x0d, 0x67, 0xa1, 0x7d, 0x26, 0x46, 0xfc, 0xf5, 0xa4, 0x11, 0x9c, 0xf5, 0xad, 0x68, 0x33, 0x5a,
	0x88, 0x22, 0xb7, 0x77, 0xe3, 0xf6, 0x06, 0x44, 0xc4, 0x59, 0xe0, 0xad, 0x5c, 0x70, 0x36, 0x70,
	0x56, 0xee, 0x2d, 0x44, 0x43, 0x6f, 0x21, 0xbb, 0x20, 0x91, 0xdc, 0x54, 0x50, 0x2f, 0xf0, 0xf8,
	0x81, 0x2d, 0xfa, 0x16, 0x7c, 0xec, 0x97, 0x78, 0xea, 0x70, 0xaf, 0x7c, 0x15, 0x9c, 0x5e, 0x92,
	0x48, 0xb6, 0x50, 0x2f, 0x0b, 0xb9, 0xd1, 0xec, 0xc8, 0x6e, 0xfc, 0x07, 0xe8, 0x98, 0xf4, 0x54,
	0x52, 0x43, 0x65, 0xd8, 0xc8, 0x9e, 0xf3, 0x13, 0xee, 0x60, 0x44, 0x09, 0xec, 0xd8, 0xed, 0x80,
	0x19, 0xdd, 0x46, 0x59, 0x4a, 0x9d, 0xeb, 0x26, 0xfc, 0x07, 0x20, 0x38, 0x3b, 0x71, 0x6f, 0x03,
	0x04, 0x47, 0x53, 0x9b, 0xc4, 0x34, 0x9a, 0x9d, 0x3a, 0xd3, 0x4d, 0xf8, 0x3d, 0xf4, 0x56, 0x67,
	0x49, 0x51, 0xb0, 0x33, 0xf7, 0x3d, 0xfc, 0xf8, 0x7c, 0xf7, 0x79, 0x9b, 0x0b, 0xb3, 0x6a, 0xd2,
	0x59, 0x26, 0xcb, 0xb8, 0x14, 0xd9, 0x1a, 0xd4, 0xe3, 0x43, 0x2c, 0xf5, 0x57, 0x03, 0xf5, 0xf6,
	0xc6, 0x5e, 0x91, 0xb4, 0x59, 0xc6, 0x6a, 0x9d, 0x3f, 0xf9, 0x8b, 0x92, 0xf6, 0x2c, 0xbd, 0xff,
	0x09, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xaa, 0x1f, 0x5b, 0x52, 0x02, 0x00, 0x00,
}
