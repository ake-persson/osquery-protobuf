// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/fan_speed_sensor.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Fan speeds.
type FanSpeedSensor struct {
	// Fan number
	Fan string `protobuf:"bytes,1,opt,name=fan,proto3" json:"fan"`
	// Fan name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// Actual speed
	Actual int32 `protobuf:"varint,3,opt,name=actual,proto3" json:"actual"`
	// Minimum speed
	Min int32 `protobuf:"varint,4,opt,name=min,proto3" json:"min"`
	// Maximum speed
	Max int32 `protobuf:"varint,5,opt,name=max,proto3" json:"max"`
	// Target speed
	Target               int32    `protobuf:"varint,6,opt,name=target,proto3" json:"target"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FanSpeedSensor) Reset()         { *m = FanSpeedSensor{} }
func (m *FanSpeedSensor) String() string { return proto.CompactTextString(m) }
func (*FanSpeedSensor) ProtoMessage()    {}
func (*FanSpeedSensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e3c9b92488bee7d, []int{0}
}

func (m *FanSpeedSensor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FanSpeedSensor.Unmarshal(m, b)
}
func (m *FanSpeedSensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FanSpeedSensor.Marshal(b, m, deterministic)
}
func (m *FanSpeedSensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FanSpeedSensor.Merge(m, src)
}
func (m *FanSpeedSensor) XXX_Size() int {
	return xxx_messageInfo_FanSpeedSensor.Size(m)
}
func (m *FanSpeedSensor) XXX_DiscardUnknown() {
	xxx_messageInfo_FanSpeedSensor.DiscardUnknown(m)
}

var xxx_messageInfo_FanSpeedSensor proto.InternalMessageInfo

func (m *FanSpeedSensor) GetFan() string {
	if m != nil {
		return m.Fan
	}
	return ""
}

func (m *FanSpeedSensor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FanSpeedSensor) GetActual() int32 {
	if m != nil {
		return m.Actual
	}
	return 0
}

func (m *FanSpeedSensor) GetMin() int32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *FanSpeedSensor) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *FanSpeedSensor) GetTarget() int32 {
	if m != nil {
		return m.Target
	}
	return 0
}

func init() {
	proto.RegisterType((*FanSpeedSensor)(nil), "schemas.FanSpeedSensor")
}

func init() { proto.RegisterFile("pb/fan_speed_sensor.proto", fileDescriptor_4e3c9b92488bee7d) }

var fileDescriptor_4e3c9b92488bee7d = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x2c, 0x8f, 0xbb, 0x4e, 0xc4, 0x30,
	0x10, 0x45, 0x65, 0x76, 0x37, 0x08, 0x17, 0x08, 0xb9, 0x40, 0xa6, 0x5b, 0x51, 0xa5, 0x21, 0x46,
	0x20, 0x41, 0x41, 0x47, 0xc1, 0x07, 0x24, 0x1d, 0x4d, 0x34, 0x36, 0x93, 0x87, 0x82, 0x1f, 0xf8,
	0x21, 0x85, 0x5f, 0xe0, 0xab, 0x91, 0x9d, 0x74, 0xf7, 0x1e, 0xdd, 0x23, 0xcd, 0xd0, 0x3b, 0x27,
	0xc5, 0x00, 0xa6, 0x0f, 0x0e, 0xf1, 0xab, 0x0f, 0x68, 0x82, 0xf5, 0x8d, 0xf3, 0x36, 0x5a, 0x76,
	0x19, 0xd4, 0x84, 0x1a, 0xc2, 0xfd, 0x1f, 0xa1, 0xd7, 0x1f, 0x60, 0xba, 0x3c, 0xe9, 0xca, 0x82,
	0xdd, 0xd0, 0xc3, 0x00, 0x86, 0x93, 0x33, 0xa9, 0xaf, 0xda, 0x1c, 0x19, 0xa3, 0x47, 0x03, 0x1a,
	0xf9, 0x45, 0x41, 0x25, 0xb3, 0x5b, 0x5a, 0x81, 0x8a, 0x09, 0xbe, 0xf9, 0xe1, 0x4c, 0xea, 0x53,
	0xbb, 0xb7, 0x6c, 0xeb, 0xd9, 0xf0, 0x63, 0x81, 0x39, 0x16, 0x02, 0x2b, 0x3f, 0xed, 0x04, 0xd6,
	0xec, 0x46, 0xf0, 0x23, 0x46, 0x5e, 0x6d, 0xee, 0xd6, 0xde, 0x9f, 0x3e, 0x1f, 0xc7, 0x39, 0x4e,
	0x49, 0x36, 0xca, 0x6a, 0xa1, 0x67, 0xb5, 0xa0, 0x7b, 0x7d, 0x11, 0x36, 0xfc, 0x24, 0xf4, 0xbf,
	0x0f, 0xe5, 0x74, 0x99, 0x06, 0xe1, 0x96, 0xf1, 0x6d, 0x7f, 0x40, 0x56, 0x85, 0x3e, 0xff, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xfb, 0x81, 0x84, 0x39, 0xed, 0x00, 0x00, 0x00,
}
