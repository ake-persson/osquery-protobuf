// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/curl_certificate.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Inspect TLS certificates by connecting to input hostnames.
type CurlCertificate struct {
	// Hostname (domain[:port]) to CURL
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname"`
	// Common name of company issued to
	CommonName string `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3" json:"common_name"`
	// Organization issued to
	Organization string `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization"`
	// Organization unit issued to
	OrganizationUnit string `protobuf:"bytes,4,opt,name=organization_unit,json=organizationUnit,proto3" json:"organization_unit"`
	// Certificate serial number
	SerialNumber string `protobuf:"bytes,5,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number"`
	// Issuer common name
	IssuerCommonName string `protobuf:"bytes,6,opt,name=issuer_common_name,json=issuerCommonName,proto3" json:"issuer_common_name"`
	// Issuer organization
	IssuerOrganization string `protobuf:"bytes,7,opt,name=issuer_organization,json=issuerOrganization,proto3" json:"issuer_organization"`
	// Issuer organization unit
	IssuerOrganizationUnit string `protobuf:"bytes,8,opt,name=issuer_organization_unit,json=issuerOrganizationUnit,proto3" json:"issuer_organization_unit"`
	// Period of validity start date
	ValidFrom string `protobuf:"bytes,9,opt,name=valid_from,json=validFrom,proto3" json:"valid_from"`
	// Period of validity end date
	ValidTo string `protobuf:"bytes,10,opt,name=valid_to,json=validTo,proto3" json:"valid_to"`
	// SHA-256 fingerprint
	Sha256Fingerprint string `protobuf:"bytes,11,opt,name=sha256_fingerprint,json=sha256Fingerprint,proto3" json:"sha256_fingerprint"`
	// SHA1 fingerprint
	Sha1Fingerprint      string   `protobuf:"bytes,12,opt,name=sha1_fingerprint,json=sha1Fingerprint,proto3" json:"sha1_fingerprint"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurlCertificate) Reset()         { *m = CurlCertificate{} }
func (m *CurlCertificate) String() string { return proto.CompactTextString(m) }
func (*CurlCertificate) ProtoMessage()    {}
func (*CurlCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f3b1de523add3a3, []int{0}
}

func (m *CurlCertificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurlCertificate.Unmarshal(m, b)
}
func (m *CurlCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurlCertificate.Marshal(b, m, deterministic)
}
func (m *CurlCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurlCertificate.Merge(m, src)
}
func (m *CurlCertificate) XXX_Size() int {
	return xxx_messageInfo_CurlCertificate.Size(m)
}
func (m *CurlCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_CurlCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_CurlCertificate proto.InternalMessageInfo

func (m *CurlCertificate) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *CurlCertificate) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *CurlCertificate) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CurlCertificate) GetOrganizationUnit() string {
	if m != nil {
		return m.OrganizationUnit
	}
	return ""
}

func (m *CurlCertificate) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *CurlCertificate) GetIssuerCommonName() string {
	if m != nil {
		return m.IssuerCommonName
	}
	return ""
}

func (m *CurlCertificate) GetIssuerOrganization() string {
	if m != nil {
		return m.IssuerOrganization
	}
	return ""
}

func (m *CurlCertificate) GetIssuerOrganizationUnit() string {
	if m != nil {
		return m.IssuerOrganizationUnit
	}
	return ""
}

func (m *CurlCertificate) GetValidFrom() string {
	if m != nil {
		return m.ValidFrom
	}
	return ""
}

func (m *CurlCertificate) GetValidTo() string {
	if m != nil {
		return m.ValidTo
	}
	return ""
}

func (m *CurlCertificate) GetSha256Fingerprint() string {
	if m != nil {
		return m.Sha256Fingerprint
	}
	return ""
}

func (m *CurlCertificate) GetSha1Fingerprint() string {
	if m != nil {
		return m.Sha1Fingerprint
	}
	return ""
}

func init() {
	proto.RegisterType((*CurlCertificate)(nil), "schemas.CurlCertificate")
}

func init() { proto.RegisterFile("pb/curl_certificate.proto", fileDescriptor_2f3b1de523add3a3) }

var fileDescriptor_2f3b1de523add3a3 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4d, 0x6b, 0xdb, 0x40,
	0x10, 0x86, 0x71, 0xdd, 0xfa, 0x63, 0xec, 0x62, 0x7b, 0x0b, 0x65, 0x5d, 0x28, 0x2d, 0xee, 0xa5,
	0xa5, 0xb5, 0xd5, 0x38, 0xc4, 0x09, 0xe4, 0x16, 0x83, 0x8f, 0x0e, 0x84, 0xe4, 0x92, 0x8b, 0x58,
	0x29, 0x2b, 0x69, 0xb1, 0x76, 0x57, 0xd9, 0x8f, 0x40, 0xf2, 0xaf, 0xf3, 0x0f, 0x82, 0x67, 0x4d,
	0x2c, 0x93, 0x1c, 0xe7, 0x7d, 0x9e, 0x19, 0xde, 0xc3, 0xc0, 0xb8, 0x4a, 0xa2, 0xd4, 0x9b, 0x32,
	0x4e, 0xb9, 0x71, 0x22, 0x13, 0x29, 0x73, 0x7c, 0x56, 0x19, 0xed, 0x34, 0x69, 0xdb, 0xb4, 0xe0,
	0x92, 0xd9, 0xc9, 0x73, 0x13, 0x06, 0x4b, 0x6f, 0xca, 0xe5, 0x5e, 0x21, 0xdf, 0xa0, 0x53, 0x68,
	0xeb, 0x14, 0x93, 0x9c, 0x36, 0x7e, 0x36, 0x7e, 0x77, 0xaf, 0x5e, 0x67, 0xf2, 0x03, 0x7a, 0xa9,
	0x96, 0x52, 0xab, 0x18, 0xf1, 0x07, 0xc4, 0x10, 0xa2, 0xf5, 0x56, 0x98, 0x40, 0x5f, 0x9b, 0x9c,
	0x29, 0xf1, 0xc4, 0x9c, 0xd0, 0x8a, 0x36, 0xd1, 0x38, 0xc8, 0xc8, 0x5f, 0x18, 0xd5, 0xe7, 0xd8,
	0x2b, 0xe1, 0xe8, 0x47, 0x14, 0x87, 0x75, 0x70, 0xa3, 0x84, 0x23, 0xbf, 0xe0, 0xb3, 0xe5, 0x46,
	0xb0, 0x32, 0x56, 0x5e, 0x26, 0xdc, 0xd0, 0x4f, 0xe1, 0x62, 0x08, 0xd7, 0x98, 0x91, 0x7f, 0x40,
	0x84, 0xb5, 0x9e, 0x9b, 0xb8, 0xde, 0xae, 0x15, 0x4e, 0x06, 0xb2, 0xdc, 0x77, 0x8c, 0xe0, 0xcb,
	0xce, 0x3e, 0xa8, 0xda, 0x46, 0x7d, 0x77, 0xe8, 0xb2, 0x5e, 0xf8, 0x0c, 0xe8, 0x3b, 0x0b, 0xa1,
	0x77, 0x07, 0xb7, 0xbe, 0xbe, 0xdd, 0xc2, 0xf6, 0xdf, 0x01, 0x1e, 0x58, 0x29, 0xee, 0xe2, 0xcc,
	0x68, 0x49, 0xbb, 0xe8, 0x76, 0x31, 0x59, 0x19, 0x2d, 0xc9, 0x18, 0x3a, 0x01, 0x3b, 0x4d, 0x01,
	0x61, 0x1b, 0xe7, 0x6b, 0x4d, 0xa6, 0x40, 0x6c, 0xc1, 0xe6, 0x27, 0x8b, 0x38, 0x13, 0x2a, 0xe7,
	0xa6, 0x32, 0x42, 0x39, 0xda, 0x43, 0x69, 0x14, 0xc8, 0x6a, 0x0f, 0xc8, 0x1f, 0x18, 0xda, 0x82,
	0x1d, 0x1d, 0xc8, 0x7d, 0x94, 0x07, 0xdb, 0xbc, 0xa6, 0x5e, 0xcc, 0x6f, 0xff, 0xe7, 0xc2, 0x15,
	0x3e, 0x99, 0xa5, 0x5a, 0x46, 0x52, 0xa4, 0x1b, 0x5e, 0x9d, 0x2e, 0x22, 0x6d, 0xef, 0x3d, 0x37,
	0x8f, 0x53, 0xfc, 0x90, 0xc4, 0x67, 0x51, 0xb5, 0xc9, 0xcf, 0x77, 0x7f, 0x92, 0xb4, 0x30, 0x3d,
	0x7e, 0x09, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x15, 0x3c, 0xab, 0x54, 0x02, 0x00, 0x00,
}
