// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/process_file_event.proto

package schemas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A File Integrity Monitor implementation using the audit service.
type ProcessFileEvent struct {
	// Operation type
	Operation string `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation"`
	// Process ID
	Pid int64 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid"`
	// Parent process ID
	Ppid int64 `protobuf:"varint,3,opt,name=ppid,proto3" json:"ppid"`
	// Time of execution in UNIX time
	Time int64 `protobuf:"varint,4,opt,name=time,proto3" json:"time"`
	// The executable path
	Executable string `protobuf:"bytes,5,opt,name=executable,proto3" json:"executable"`
	// True if this is a partial event (i.e.: this process existed before we started osquery)
	Partial string `protobuf:"bytes,6,opt,name=partial,proto3" json:"partial"`
	// The current working directory of the process
	Cwd string `protobuf:"bytes,7,opt,name=cwd,proto3" json:"cwd"`
	// The path associated with the event
	Path string `protobuf:"bytes,8,opt,name=path,proto3" json:"path"`
	// The canonical path associated with the event
	DestPath string `protobuf:"bytes,9,opt,name=dest_path,json=destPath,proto3" json:"dest_path"`
	// The uid of the process performing the action
	Uid string `protobuf:"bytes,10,opt,name=uid,proto3" json:"uid"`
	// The gid of the process performing the action
	Gid string `protobuf:"bytes,11,opt,name=gid,proto3" json:"gid"`
	// Effective user ID of the process using the file
	Euid string `protobuf:"bytes,12,opt,name=euid,proto3" json:"euid"`
	// Effective group ID of the process using the file
	Egid string `protobuf:"bytes,13,opt,name=egid,proto3" json:"egid"`
	// Time of execution in system uptime
	Uptime int64 `protobuf:"varint,14,opt,name=uptime,proto3" json:"uptime"`
	// Event ID
	Eid                  string   `protobuf:"bytes,15,opt,name=eid,proto3" json:"eid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessFileEvent) Reset()         { *m = ProcessFileEvent{} }
func (m *ProcessFileEvent) String() string { return proto.CompactTextString(m) }
func (*ProcessFileEvent) ProtoMessage()    {}
func (*ProcessFileEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c057b16ed8c1bad, []int{0}
}

func (m *ProcessFileEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessFileEvent.Unmarshal(m, b)
}
func (m *ProcessFileEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessFileEvent.Marshal(b, m, deterministic)
}
func (m *ProcessFileEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessFileEvent.Merge(m, src)
}
func (m *ProcessFileEvent) XXX_Size() int {
	return xxx_messageInfo_ProcessFileEvent.Size(m)
}
func (m *ProcessFileEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessFileEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessFileEvent proto.InternalMessageInfo

func (m *ProcessFileEvent) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *ProcessFileEvent) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcessFileEvent) GetPpid() int64 {
	if m != nil {
		return m.Ppid
	}
	return 0
}

func (m *ProcessFileEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ProcessFileEvent) GetExecutable() string {
	if m != nil {
		return m.Executable
	}
	return ""
}

func (m *ProcessFileEvent) GetPartial() string {
	if m != nil {
		return m.Partial
	}
	return ""
}

func (m *ProcessFileEvent) GetCwd() string {
	if m != nil {
		return m.Cwd
	}
	return ""
}

func (m *ProcessFileEvent) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ProcessFileEvent) GetDestPath() string {
	if m != nil {
		return m.DestPath
	}
	return ""
}

func (m *ProcessFileEvent) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ProcessFileEvent) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *ProcessFileEvent) GetEuid() string {
	if m != nil {
		return m.Euid
	}
	return ""
}

func (m *ProcessFileEvent) GetEgid() string {
	if m != nil {
		return m.Egid
	}
	return ""
}

func (m *ProcessFileEvent) GetUptime() int64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *ProcessFileEvent) GetEid() string {
	if m != nil {
		return m.Eid
	}
	return ""
}

func init() {
	proto.RegisterType((*ProcessFileEvent)(nil), "schemas.ProcessFileEvent")
}

func init() { proto.RegisterFile("pb/process_file_event.proto", fileDescriptor_3c057b16ed8c1bad) }

var fileDescriptor_3c057b16ed8c1bad = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x4d, 0x4f, 0xf3, 0x30,
	0x10, 0x84, 0xd5, 0xa6, 0x6f, 0xdb, 0xec, 0xcb, 0x47, 0xe5, 0x03, 0xb2, 0x54, 0x84, 0x2a, 0x4e,
	0xbd, 0xd0, 0x20, 0x90, 0xe0, 0xc0, 0x0d, 0x09, 0xce, 0x55, 0x8f, 0x5c, 0xaa, 0x24, 0xde, 0xa6,
	0xab, 0x26, 0xb5, 0x49, 0x6c, 0x3e, 0x7e, 0x2c, 0xff, 0x05, 0xed, 0xba, 0x08, 0x6e, 0xe3, 0x67,
	0x46, 0xb3, 0x5e, 0x2d, 0x4c, 0x5d, 0x91, 0xb9, 0xd6, 0x96, 0xd8, 0x75, 0xeb, 0x0d, 0xd5, 0xb8,
	0xc6, 0x37, 0xdc, 0xfb, 0x85, 0x6b, 0xad, 0xb7, 0x6a, 0xd4, 0x95, 0x5b, 0x6c, 0xf2, 0xee, 0xf2,
	0xab, 0x0f, 0x93, 0x65, 0x4c, 0x3d, 0x53, 0x8d, 0x4f, 0x9c, 0x51, 0xe7, 0x90, 0x5a, 0x87, 0x6d,
	0xee, 0xc9, 0xee, 0x75, 0x6f, 0xd6, 0x9b, 0xa7, 0xab, 0x5f, 0xa0, 0x26, 0x90, 0x38, 0x32, 0xba,
	0x3f, 0xeb, 0xcd, 0x93, 0x15, 0x4b, 0xa5, 0x60, 0xe0, 0x18, 0x25, 0x82, 0x44, 0x33, 0xf3, 0xd4,
	0xa0, 0x1e, 0x44, 0xc6, 0x5a, 0x5d, 0x00, 0xe0, 0x07, 0x96, 0xc1, 0xe7, 0x45, 0x8d, 0xfa, 0x9f,
	0x14, 0xff, 0x21, 0x4a, 0xc3, 0xc8, 0xe5, 0xad, 0xa7, 0xbc, 0xd6, 0x43, 0x31, 0x7f, 0x9e, 0x3c,
	0xb3, 0x7c, 0x37, 0x7a, 0x24, 0x94, 0xa5, 0xcc, 0xcc, 0xfd, 0x56, 0x8f, 0x05, 0x89, 0x56, 0x53,
	0x48, 0x0d, 0x76, 0x7e, 0x2d, 0x46, 0x2a, 0xc6, 0x98, 0xc1, 0x92, 0xcd, 0x09, 0x24, 0x81, 0x8c,
	0x86, 0x58, 0x11, 0xc8, 0x30, 0xa9, 0xc8, 0xe8, 0xff, 0x91, 0x54, 0xf1, 0xd3, 0xc8, 0xa1, 0xa3,
	0x58, 0xca, 0x5a, 0x18, 0xc7, 0x8e, 0x0f, 0x8c, 0x73, 0x67, 0x30, 0x0c, 0x4e, 0xd6, 0x3b, 0x91,
	0xf5, 0x0e, 0x2f, 0x6e, 0x44, 0x32, 0xfa, 0x34, 0x36, 0x22, 0x99, 0xc7, 0x9b, 0x97, 0xeb, 0x8a,
	0xfc, 0x36, 0x14, 0x8b, 0xd2, 0x36, 0x59, 0x43, 0xe5, 0x0e, 0xdd, 0xfd, 0x5d, 0x66, 0xbb, 0xd7,
	0x80, 0xed, 0xe7, 0x95, 0x5c, 0xa3, 0x08, 0x9b, 0xcc, 0xed, 0xaa, 0x87, 0xc3, 0x4d, 0x8a, 0xa1,
	0xd0, 0xdb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x9f, 0xcb, 0x11, 0xc2, 0x01, 0x00, 0x00,
}
